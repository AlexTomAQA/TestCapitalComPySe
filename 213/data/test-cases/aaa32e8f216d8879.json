{"uid":"aaa32e8f216d8879","name":"TC_55!422 (Lang: en) | Bid:55!422-en.gb.NoReg","fullName":"tests.US_55_ReTestsManual.artemdashkov.US_55-artemdashkov_ReTestsManual_test.TestManualDetected#test_422_links_jpmorgan_exxon_ibm_on_page_largest_stock_exchanges_dont_open_page","historyId":"7f22f922a5a7ec056fea81b761eb5565","time":{"start":1730936461276,"stop":1730936481442,"duration":20166},"description":"\n        Check:  Menu section [Markets] >\n                Menu item [Shares] >\n                Scroll down to the block “Why trade shares?” >\n                Click the link “the most popular markets to trade” >\n                Scroll down to the text block “NYSE” >\n                Click the links [JPMorgan Chase & Co]/[Exxon Mobil]/[IBM]\n        Language: EN\n        License/Country: FCA\n        Role: NoReg, NoAuth, Auth\n        Author: Artem Dashkov\n        ","descriptionHtml":"<pre><code>    Check:  Menu section [Markets] &gt;\n            Menu item [Shares] &gt;\n            Scroll down to the block “Why trade shares?” &gt;\n            Click the link “the most popular markets to trade” &gt;\n            Scroll down to the text block “NYSE” &gt;\n            Click the links [JPMorgan Chase &amp; Co]/[Exxon Mobil]/[IBM]\n    Language: EN\n    License/Country: FCA\n    Role: NoReg, NoAuth, Auth\n    Author: Artem Dashkov\n</code></pre>\n","status":"failed","statusMessage":"Failed: Bug # 422: No access to page after click 'IBM'","statusTrace":"self = <pages.BugsManual.bug_422.BUG_422 object at 0x7fdc86516e40>\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"5c7491aa174674effc31c03b486d754f\")>\nlink_for_check = 'IBM'\n\n    @allure.step(f\"{datetime.now()}   3. Start Assert\")\n    def assert_(self, d, link_for_check):\n        print(f\"{datetime.now()}   3. Start Assert\")\n    \n        try:\n            # try to reopen page\n>           self.driver.get(self.driver.current_url)\n\npages/BugsManual/bug_422.py:74: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:389: in get\n    self.execute(Command.GET, {\"url\": url})\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:380: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fdc864b7d10>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_NAME_NOT_RESOLVED\\\\n  (...\\\\n#23 0x55f7db61fca0 \\\\u003Cunknown>\\\\n#24 0x55f7db630556 \\\\u003Cunknown>\\\\n#25 0x7febb8e94ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_NAME_NOT_RESOLVED\nE         (Session info: chrome=130.0.6723.91)\nE       Stacktrace:\nE       #0 0x55f7db6316da <unknown>\nE       #1 0x55f7db145f80 <unknown>\nE       #2 0x55f7db13e181 <unknown>\nE       #3 0x55f7db12e8b9 <unknown>\nE       #4 0x55f7db1305ea <unknown>\nE       #5 0x55f7db12eb6d <unknown>\nE       #6 0x55f7db12e3df <unknown>\nE       #7 0x55f7db12e2d2 <unknown>\nE       #8 0x55f7db12c35c <unknown>\nE       #9 0x55f7db12c99a <unknown>\nE       #10 0x55f7db148879 <unknown>\nE       #11 0x55f7db1d61e5 <unknown>\nE       #12 0x55f7db1b6bb2 <unknown>\nE       #13 0x55f7db1d569d <unknown>\nE       #14 0x55f7db1b6953 <unknown>\nE       #15 0x55f7db18572e <unknown>\nE       #16 0x55f7db18679e <unknown>\nE       #17 0x55f7db5fcf1b <unknown>\nE       #18 0x55f7db600eb8 <unknown>\nE       #19 0x55f7db5ea42c <unknown>\nE       #20 0x55f7db601a37 <unknown>\nE       #21 0x55f7db5cefef <unknown>\nE       #22 0x55f7db61fad8 <unknown>\nE       #23 0x55f7db61fca0 <unknown>\nE       #24 0x55f7db630556 <unknown>\nE       #25 0x7febb8e94ac3 <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: WebDriverException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <US_55-artemdashkov_ReTestsManual_test.TestManualDetected object at 0x7fdc864b5d90>\nworker_id = 'master'\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"5c7491aa174674effc31c03b486d754f\")>\ncur_language = '', cur_country = 'gb', cur_role = 'NoReg'\nlink_for_check = 'IBM', cur_login = 'test001.miketar+1@gmail.com'\ncur_password = 'Qwer1234-!@#$'\n\n    @allure.step(\"Start test of links 'JPMorgan Chase & Co', 'Exxon Mobil' and 'IBM' on page 'Largest Stock Exchanges'\")\n    @pytest.mark.parametrize('cur_language', [\"\"])\n    @pytest.mark.parametrize('cur_country', [\"gb\"])\n    @pytest.mark.parametrize('cur_role', [\"NoReg\", \"Auth\", \"NoAuth\"])\n    @pytest.mark.parametrize('link_for_check', [\"JPMorgan Chase & Co\", \"Exxon Mobil\", \"IBM\"])\n    @pytest.mark.bug_422\n    def test_422_links_jpmorgan_exxon_ibm_on_page_largest_stock_exchanges_dont_open_page(\n            self, worker_id, d, cur_language, cur_country, cur_role, link_for_check, cur_login, cur_password):\n        \"\"\"\n        Check:  Menu section [Markets] >\n                Menu item [Shares] >\n                Scroll down to the block “Why trade shares?” >\n                Click the link “the most popular markets to trade” >\n                Scroll down to the text block “NYSE” >\n                Click the links [JPMorgan Chase & Co]/[Exxon Mobil]/[IBM]\n        Language: EN\n        License/Country: FCA\n        Role: NoReg, NoAuth, Auth\n        Author: Artem Dashkov\n        \"\"\"\n    \n        bid = build_dynamic_arg_for_us_55(\n            d, worker_id, cur_language, cur_country, cur_role,\n            \"55\", \"ReTests of Manual Detected Bugs\",\n            \"422\",\n            \"Menu section [Markets] > Menu item [Shares] >\"\n            \"Scroll down to the block 'Why trade shares' >\"\n            \"Click the link 'the most popular markets to trade' >\"\n            \"Scroll down to the text block 'NYSE' >\"\n            \"Click the links [JPMorgan Chase & Co]/[Exxon Mobil]/[IBM]\",\n            False, True\n        )\n        # Arrange\n        cur_item_link = apply_preconditions_to_link(d, cur_language, cur_country,\n                                                    cur_role, cur_login, cur_password)\n    \n        page_menu = from_markets_menu_open_shares.MenuNewShares(d, cur_item_link)\n        link = page_menu.from_markets_menu_open_shares(\n            d, cur_language, cur_country, cur_item_link)\n    \n        test_element = BUG_422(d, link, bid)\n        test_element.arrange(d, link, link_for_check)\n    \n        # Act\n        test_element.act(d, link_for_check)\n    \n        # Assert\n>       test_element.assert_(d, link_for_check)\n\ntests/US_55_ReTestsManual/artemdashkov/US_55-artemdashkov_ReTestsManual_test.py:1241: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/BugsManual/bug_422.py:79: in assert_\n    Common().pytest_fail(f\"Bug # {BUG_NUMBER}: {msg}\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmsg = \"Bug # 422: No access to page after click 'IBM'\"\n\n    @staticmethod\n    def pytest_fail(msg):\n    \tCommon.flag_of_bug = True\n>   \tpytest.fail(msg)\nE    Failed: Bug # 422: No access to page after click 'IBM'\n\npages/common.py:235: Failed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"d","time":{"start":1730932424436,"stop":1730932424835,"duration":399},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"worker_id","time":{"start":1730932424835,"stop":1730932424835,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_login","time":{"start":1730932424835,"stop":1730932424835,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_password","time":{"start":1730932424835,"stop":1730932424836,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"\n        Check:  Menu section [Markets] >\n                Menu item [Shares] >\n                Scroll down to the block “Why trade shares?” >\n                Click the link “the most popular markets to trade” >\n                Scroll down to the text block “NYSE” >\n                Click the links [JPMorgan Chase & Co]/[Exxon Mobil]/[IBM]\n        Language: EN\n        License/Country: FCA\n        Role: NoReg, NoAuth, Auth\n        Author: Artem Dashkov\n        ","status":"failed","statusMessage":"Failed: Bug # 422: No access to page after click 'IBM'","statusTrace":"self = <pages.BugsManual.bug_422.BUG_422 object at 0x7fdc86516e40>\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"5c7491aa174674effc31c03b486d754f\")>\nlink_for_check = 'IBM'\n\n    @allure.step(f\"{datetime.now()}   3. Start Assert\")\n    def assert_(self, d, link_for_check):\n        print(f\"{datetime.now()}   3. Start Assert\")\n    \n        try:\n            # try to reopen page\n>           self.driver.get(self.driver.current_url)\n\npages/BugsManual/bug_422.py:74: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:389: in get\n    self.execute(Command.GET, {\"url\": url})\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:380: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fdc864b7d10>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_NAME_NOT_RESOLVED\\\\n  (...\\\\n#23 0x55f7db61fca0 \\\\u003Cunknown>\\\\n#24 0x55f7db630556 \\\\u003Cunknown>\\\\n#25 0x7febb8e94ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_NAME_NOT_RESOLVED\nE         (Session info: chrome=130.0.6723.91)\nE       Stacktrace:\nE       #0 0x55f7db6316da <unknown>\nE       #1 0x55f7db145f80 <unknown>\nE       #2 0x55f7db13e181 <unknown>\nE       #3 0x55f7db12e8b9 <unknown>\nE       #4 0x55f7db1305ea <unknown>\nE       #5 0x55f7db12eb6d <unknown>\nE       #6 0x55f7db12e3df <unknown>\nE       #7 0x55f7db12e2d2 <unknown>\nE       #8 0x55f7db12c35c <unknown>\nE       #9 0x55f7db12c99a <unknown>\nE       #10 0x55f7db148879 <unknown>\nE       #11 0x55f7db1d61e5 <unknown>\nE       #12 0x55f7db1b6bb2 <unknown>\nE       #13 0x55f7db1d569d <unknown>\nE       #14 0x55f7db1b6953 <unknown>\nE       #15 0x55f7db18572e <unknown>\nE       #16 0x55f7db18679e <unknown>\nE       #17 0x55f7db5fcf1b <unknown>\nE       #18 0x55f7db600eb8 <unknown>\nE       #19 0x55f7db5ea42c <unknown>\nE       #20 0x55f7db601a37 <unknown>\nE       #21 0x55f7db5cefef <unknown>\nE       #22 0x55f7db61fad8 <unknown>\nE       #23 0x55f7db61fca0 <unknown>\nE       #24 0x55f7db630556 <unknown>\nE       #25 0x7febb8e94ac3 <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: WebDriverException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <US_55-artemdashkov_ReTestsManual_test.TestManualDetected object at 0x7fdc864b5d90>\nworker_id = 'master'\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"5c7491aa174674effc31c03b486d754f\")>\ncur_language = '', cur_country = 'gb', cur_role = 'NoReg'\nlink_for_check = 'IBM', cur_login = 'test001.miketar+1@gmail.com'\ncur_password = 'Qwer1234-!@#$'\n\n    @allure.step(\"Start test of links 'JPMorgan Chase & Co', 'Exxon Mobil' and 'IBM' on page 'Largest Stock Exchanges'\")\n    @pytest.mark.parametrize('cur_language', [\"\"])\n    @pytest.mark.parametrize('cur_country', [\"gb\"])\n    @pytest.mark.parametrize('cur_role', [\"NoReg\", \"Auth\", \"NoAuth\"])\n    @pytest.mark.parametrize('link_for_check', [\"JPMorgan Chase & Co\", \"Exxon Mobil\", \"IBM\"])\n    @pytest.mark.bug_422\n    def test_422_links_jpmorgan_exxon_ibm_on_page_largest_stock_exchanges_dont_open_page(\n            self, worker_id, d, cur_language, cur_country, cur_role, link_for_check, cur_login, cur_password):\n        \"\"\"\n        Check:  Menu section [Markets] >\n                Menu item [Shares] >\n                Scroll down to the block “Why trade shares?” >\n                Click the link “the most popular markets to trade” >\n                Scroll down to the text block “NYSE” >\n                Click the links [JPMorgan Chase & Co]/[Exxon Mobil]/[IBM]\n        Language: EN\n        License/Country: FCA\n        Role: NoReg, NoAuth, Auth\n        Author: Artem Dashkov\n        \"\"\"\n    \n        bid = build_dynamic_arg_for_us_55(\n            d, worker_id, cur_language, cur_country, cur_role,\n            \"55\", \"ReTests of Manual Detected Bugs\",\n            \"422\",\n            \"Menu section [Markets] > Menu item [Shares] >\"\n            \"Scroll down to the block 'Why trade shares' >\"\n            \"Click the link 'the most popular markets to trade' >\"\n            \"Scroll down to the text block 'NYSE' >\"\n            \"Click the links [JPMorgan Chase & Co]/[Exxon Mobil]/[IBM]\",\n            False, True\n        )\n        # Arrange\n        cur_item_link = apply_preconditions_to_link(d, cur_language, cur_country,\n                                                    cur_role, cur_login, cur_password)\n    \n        page_menu = from_markets_menu_open_shares.MenuNewShares(d, cur_item_link)\n        link = page_menu.from_markets_menu_open_shares(\n            d, cur_language, cur_country, cur_item_link)\n    \n        test_element = BUG_422(d, link, bid)\n        test_element.arrange(d, link, link_for_check)\n    \n        # Act\n        test_element.act(d, link_for_check)\n    \n        # Assert\n>       test_element.assert_(d, link_for_check)\n\ntests/US_55_ReTestsManual/artemdashkov/US_55-artemdashkov_ReTestsManual_test.py:1241: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/BugsManual/bug_422.py:79: in assert_\n    Common().pytest_fail(f\"Bug # {BUG_NUMBER}: {msg}\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmsg = \"Bug # 422: No access to page after click 'IBM'\"\n\n    @staticmethod\n    def pytest_fail(msg):\n    \tCommon.flag_of_bug = True\n>   \tpytest.fail(msg)\nE    Failed: Bug # 422: No access to page after click 'IBM'\n\npages/common.py:235: Failed","steps":[{"name":"Start test of links 'JPMorgan Chase & Co', 'Exxon Mobil' and 'IBM' on page 'Largest Stock Exchanges'","time":{"start":1730936461276,"stop":1730936481441,"duration":20165},"status":"failed","statusMessage":"Failed: Bug # 422: No access to page after click 'IBM'\n","statusTrace":"  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/tests/US_55_ReTestsManual/artemdashkov/US_55-artemdashkov_ReTestsManual_test.py\", line 1241, in test_422_links_jpmorgan_exxon_ibm_on_page_largest_stock_exchanges_dont_open_page\n    test_element.assert_(d, link_for_check)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/BugsManual/bug_422.py\", line 79, in assert_\n    Common().pytest_fail(f\"Bug # {BUG_NUMBER}: {msg}\")\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/common.py\", line 235, in pytest_fail\n    pytest.fail(msg)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/_pytest/outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n","steps":[{"name":"Build dynamic argument for TCs of US_55","time":{"start":1730936461276,"stop":1730936461278,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"5c7491aa174674effc31c03b486d754f\")>"},{"name":"worker_id","value":"'master'"},{"name":"cur_language","value":"''"},{"name":"cur_country","value":"'gb'"},{"name":"cur_role","value":"'NoReg'"},{"name":"us","value":"'55'"},{"name":"desc_us","value":"'ReTests of Manual Detected Bugs'"},{"name":"num_tc","value":"'422'"},{"name":"desc_tc","value":"'Menu section [Markets] > Menu item [Shares] >Scroll down to the block 'Why trade shares' >Click the link 'the most popular markets to trade' >Scroll down to the text block 'NYSE' >Click the links [JPMorgan Chase & Co]/[Exxon Mobil]/[IBM]'"},{"name":"manual","value":"False"},{"name":"new_layout","value":"True"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"   Set New preconditions","time":{"start":1730936461278,"stop":1730936471456,"duration":10178},"status":"passed","steps":[{"name":"2024-11-06 22:33:44.390459   Set language and country","time":{"start":1730936469019,"stop":1730936471450,"duration":2431},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"5c7491aa174674effc31c03b486d754f\")>"},{"name":"cur_language","value":"'en'"},{"name":"cur_country","value":"'gb'"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"5c7491aa174674effc31c03b486d754f\")>"},{"name":"host","value":"'https://capital.com/en-gb'"},{"name":"end_point","value":"''"},{"name":"cur_language","value":"''"},{"name":"cur_country","value":"'gb'"},{"name":"cur_role","value":"'NoReg'"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"}],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Select \"Markets\" menu, \"Shares\" submenu","time":{"start":1730936471456,"stop":1730936479936,"duration":8480},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"5c7491aa174674effc31c03b486d754f\")>"},{"name":"cur_language","value":"''"},{"name":"cur_country","value":"'gb'"},{"name":"link","value":"'https://capital.com/en-gb'"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"2024-11-06 22:33:44.383443   Start Arrange: find and click link 'the most popular markets to trade', find links [JPMorgan Chase & Co]/[Exxon Mobil]/[IBM]","time":{"start":1730936479936,"stop":1730936480651,"duration":715},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"5c7491aa174674effc31c03b486d754f\")>"},{"name":"link","value":"'https://capital.com/en-gb/markets/shares'"},{"name":"link_for_check","value":"'IBM'"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"\n2024-11-06 22:33:44.383469   2. Start Act.","time":{"start":1730936480651,"stop":1730936481289,"duration":638},"status":"passed","steps":[],"attachments":[{"uid":"6ceb7657c4f8a75d","name":"Screen page after click 'IBM'","source":"6ceb7657c4f8a75d.png","type":"image/png","size":21365}],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"5c7491aa174674effc31c03b486d754f\")>"},{"name":"link_for_check","value":"'IBM'"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},{"name":"2024-11-06 22:33:44.383483   3. Start Assert","time":{"start":1730936481290,"stop":1730936481441,"duration":151},"status":"failed","statusMessage":"Failed: Bug # 422: No access to page after click 'IBM'\n","statusTrace":"  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/BugsManual/bug_422.py\", line 79, in assert_\n    Common().pytest_fail(f\"Bug # {BUG_NUMBER}: {msg}\")\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/common.py\", line 235, in pytest_fail\n    pytest.fail(msg)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/_pytest/outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n","steps":[],"attachments":[{"uid":"262df82ff952fef1","name":"No access to page after click 'IBM'","source":"262df82ff952fef1.png","type":"image/png","size":21365}],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"5c7491aa174674effc31c03b486d754f\")>"},{"name":"link_for_check","value":"'IBM'"}],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"worker_id","value":"'master'"},{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"5c7491aa174674effc31c03b486d754f\")>"},{"name":"cur_language","value":"''"},{"name":"cur_country","value":"'gb'"},{"name":"cur_role","value":"'NoReg'"},{"name":"link_for_check","value":"'IBM'"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"}],"shouldDisplayMessage":false,"stepsCount":7,"attachmentsCount":2,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"871e416dc3e007","name":"Screenshot","source":"871e416dc3e007.png","type":"image/png","size":21365},{"uid":"86f1b2bebe4f686b","name":"stdout","source":"86f1b2bebe4f686b.txt","type":"text/plain","size":5804}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":8,"attachmentsCount":4,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"d::0","time":{"start":1730936531101,"stop":1730936531514,"duration":413},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"epic","value":"TC_55!422 | Menu section [Markets] > Menu item [Shares] >Scroll down to the block 'Why trade shares' >Click the link 'the most popular markets to trade' >Scroll down to the text block 'NYSE' >Click the links [JPMorgan Chase & Co]/[Exxon Mobil]/[IBM]"},{"name":"feature","value":"Role: NoReg"},{"name":"story","value":"Country: gb"},{"name":"tag","value":"bug_422"},{"name":"tag","value":"us_55"},{"name":"parentSuite","value":"tests.US_55_ReTestsManual.artemdashkov"},{"name":"suite","value":"US_55-artemdashkov_ReTestsManual_test"},{"name":"subSuite","value":"TestManualDetected"},{"name":"host","value":"fv-az1385-247"},{"name":"thread","value":"4799-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.US_55_ReTestsManual.artemdashkov.US_55-artemdashkov_ReTestsManual_test"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"cur_country","value":"'gb'"},{"name":"cur_language","value":"''"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"},{"name":"cur_role","value":"'NoReg'"},{"name":"d","value":"'Chrome'"},{"name":"link_for_check","value":"'IBM'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":0,"skipped":4,"passed":0,"unknown":0,"total":7},"items":[{"uid":"5859e582f7fa23b1","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/212//#testresult/5859e582f7fa23b1","status":"failed","statusDetails":"Failed: Bug # 422: No access to page after click 'IBM'","time":{"start":1730848772925,"stop":1730848804986,"duration":32061}},{"uid":"abbf802006d9e9f","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/211//#testresult/abbf802006d9e9f","status":"failed","statusDetails":"Failed: Bug # 422: No access to page after click 'IBM'","time":{"start":1730781663224,"stop":1730781681337,"duration":18113}},{"uid":"94bff255cfec91fb","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/210//#testresult/94bff255cfec91fb","status":"skipped","statusDetails":"Skipped: Intermediate version","time":{"start":1730762960136,"stop":1730762960139,"duration":3}},{"uid":"fa8ab2dd2730b64","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/209//#testresult/fa8ab2dd2730b64","status":"skipped","statusDetails":"Skipped: Intermediate version","time":{"start":1730675337955,"stop":1730675337957,"duration":2}},{"uid":"d7e390fbd70cd8a3","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/208//#testresult/d7e390fbd70cd8a3","status":"skipped","statusDetails":"Skipped: Intermediate version","time":{"start":1730589084479,"stop":1730589084481,"duration":2}},{"uid":"d73351ddb4c9d080","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/207//#testresult/d73351ddb4c9d080","status":"skipped","statusDetails":"Skipped: Intermediate version","time":{"start":1730519870124,"stop":1730519870126,"duration":2}}]},"tags":["us_55","bug_422"]},"source":"aaa32e8f216d8879.json","parameterValues":["'gb'","''","'test001.miketar+1@gmail.com'","'Qwer1234-!@#$'","'NoReg'","'Chrome'","'IBM'"]}