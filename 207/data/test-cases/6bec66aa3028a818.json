{"uid":"6bec66aa3028a818","name":"TC_11.02.03.01_01 | Testing button [Start Trading] on Main banner. Bid:11.02.03.01_01-de.gb.NoAuth","fullName":"tests.US_11_Education.US_11-02-03_Commodities_trading.us_11-02-03-01_Commodities_trading_test.TestCommoditiesTrading#test_01_main_banner_start_trading_button","historyId":"8f1aaf2f32727eb2ec83e4ffe280c039","time":{"start":1706565403329,"stop":1706565416539,"duration":13210},"description":"\n        Check: Button [Start Trading] on Main banner\n        Language: All. License: All.\n        ","descriptionHtml":"<pre><code>    Check: Button [Start Trading] on Main banner\n    Language: All. License: All.\n</code></pre>\n","status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"https://capital.com/trading/signup\" class=\"cc-banner__btn btn btn--darkText js_signup js-analyticsClick\" data-type=\"top_banner_btn\">...</a> is not clickable at point (196, 300). Other element would receive the click: <div class=\"overlay overlay--uk\" id=\"uk_overlay\">...</div>\n  (Session info: chrome=120.0.6099.224)\nStacktrace:\n#0 0x56011e663f83 <unknown>\n#1 0x56011e31ccf7 <unknown>\n#2 0x56011e374d92 <unknown>\n#3 0x56011e3727f4 <unknown>\n#4 0x56011e36f894 <unknown>\n#5 0x56011e36e4b9 <unknown>\n#6 0x56011e360313 <unknown>\n#7 0x56011e3960b2 <unknown>\n#8 0x56011e35fb49 <unknown>\n#9 0x56011e3964ce <unknown>\n#10 0x56011e3b5006 <unknown>\n#11 0x56011e395e53 <unknown>\n#12 0x56011e35ddd4 <unknown>\n#13 0x56011e35f1de <unknown>\n#14 0x56011e628531 <unknown>\n#15 0x56011e62c455 <unknown>\n#16 0x56011e614f55 <unknown>\n#17 0x56011e62d0ef <unknown>\n#18 0x56011e5f899f <unknown>\n#19 0x56011e651008 <unknown>\n#20 0x56011e6511d7 <unknown>\n#21 0x56011e663124 <unknown>\n#22 0x7f773f094ac3 <unknown>","statusTrace":"self = <pages.Elements.ButtonStartTradingMainBanner.MainBannerStartTrading object at 0x7fa4740586d0>\n\n    @allure.step(\"Click button [Start Trading] on Main banner\")\n    def element_click(self):\n        print(f\"\\n{datetime.now()}   2. Act_v0\")\n        print(f\"{datetime.now()}   Start Click button [Start Trading] =>\")\n        button_list = self.driver.find_elements(*MainBannerLocators.BUTTON_START_TRADING)\n    \n        print(f\"{datetime.now()}   BUTTON_START_TRADING is clickable? =>\")\n        time_out = 3\n        if not self.element_is_clickable(button_list[0], time_out):\n            print(f\"{datetime.now()}   => BUTTON_START_TRADING is not clickable after {time_out} sec. Stop TC>\")\n            pytest.fail(f\"BUTTON_START_TRADING is not clickable after {time_out} sec.\")\n    \n        print(f\"{datetime.now()}   BUTTON_START_TRADING click =>\")\n        try:\n>           button_list[0].click()\n\npages/Elements/ButtonStartTradingMainBanner.py:93: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fa475616590>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x56011e6511d7 \\\\u003Cunknown>\\\\n#21 0x56011e663124 \\\\u003Cunknown>\\\\n#22 0x7f773f094ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"https://capital.com/trading/signup\" class=\"cc-banner__btn btn btn--darkText js_signup js-analyticsClick\" data-type=\"top_banner_btn\">...</a> is not clickable at point (196, 300). Other element would receive the click: <div class=\"overlay overlay--uk\" id=\"uk_overlay\">...</div>\nE         (Session info: chrome=120.0.6099.224)\nE       Stacktrace:\nE       #0 0x56011e663f83 <unknown>\nE       #1 0x56011e31ccf7 <unknown>\nE       #2 0x56011e374d92 <unknown>\nE       #3 0x56011e3727f4 <unknown>\nE       #4 0x56011e36f894 <unknown>\nE       #5 0x56011e36e4b9 <unknown>\nE       #6 0x56011e360313 <unknown>\nE       #7 0x56011e3960b2 <unknown>\nE       #8 0x56011e35fb49 <unknown>\nE       #9 0x56011e3964ce <unknown>\nE       #10 0x56011e3b5006 <unknown>\nE       #11 0x56011e395e53 <unknown>\nE       #12 0x56011e35ddd4 <unknown>\nE       #13 0x56011e35f1de <unknown>\nE       #14 0x56011e628531 <unknown>\nE       #15 0x56011e62c455 <unknown>\nE       #16 0x56011e614f55 <unknown>\nE       #17 0x56011e62d0ef <unknown>\nE       #18 0x56011e5f899f <unknown>\nE       #19 0x56011e651008 <unknown>\nE       #20 0x56011e6511d7 <unknown>\nE       #21 0x56011e663124 <unknown>\nE       #22 0x7f773f094ac3 <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <us_11-02-03-01_Commodities_trading_test.TestCommoditiesTrading object at 0x7fa474c72490>\nworker_id = 'master'\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"791fb34d14f2e4a685743ee430a719f8\")>\ncur_language = 'de', cur_country = 'gb', cur_role = 'NoAuth'\ncur_login = 'aqa.tomelo.an@gmail.com', cur_password = 'iT9Vgqi6d$fiZ*Z'\ncur_item_link = 'https://capital.com/de/trade-brent'\n\n    @allure.step(\"Start test of button [Start trading] on Main banner\")\n    @pytest.mark.test_01\n    def test_01_main_banner_start_trading_button(\n            self, worker_id, d, cur_language, cur_country, cur_role, cur_login, cur_password, cur_item_link):\n        \"\"\"\n        Check: Button [Start Trading] on Main banner\n        Language: All. License: All.\n        \"\"\"\n        bid = build_dynamic_arg_v4(\n            d, worker_id, cur_language, cur_country, cur_role,\n            \"11.02.03\", \"Education > Menu item [Commodities trading]\",\n            \".01_01\", \"Testing button [Start Trading] on Main banner\")\n    \n        check_language(cur_language)\n    \n        page_conditions = Conditions(d, \"\")\n        page_conditions.preconditions(\n            d, CapitalComPageSrc.URL, \"\", cur_language, cur_country, cur_role, cur_login, cur_password)\n    \n        test_element = MainBannerStartTrading(d, cur_item_link, bid)\n>       test_element.full_test_with_tpi(d, cur_language, cur_country, cur_role, cur_item_link)\n\ntests/US_11_Education/US_11-02-03_Commodities_trading/us_11-02-03-01_Commodities_trading_test.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/Elements/ButtonStartTradingMainBanner.py:21: in full_test_with_tpi\n    self.element_click()\npages/Elements/ButtonStartTradingMainBanner.py:110: in element_click\n    button_list[0].click()\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fa475616590>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x56011e6511d7 \\\\u003Cunknown>\\\\n#21 0x56011e663124 \\\\u003Cunknown>\\\\n#22 0x7f773f094ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"https://capital.com/trading/signup\" class=\"cc-banner__btn btn btn--darkText js_signup js-analyticsClick\" data-type=\"top_banner_btn\">...</a> is not clickable at point (196, 300). Other element would receive the click: <div class=\"overlay overlay--uk\" id=\"uk_overlay\">...</div>\nE         (Session info: chrome=120.0.6099.224)\nE       Stacktrace:\nE       #0 0x56011e663f83 <unknown>\nE       #1 0x56011e31ccf7 <unknown>\nE       #2 0x56011e374d92 <unknown>\nE       #3 0x56011e3727f4 <unknown>\nE       #4 0x56011e36f894 <unknown>\nE       #5 0x56011e36e4b9 <unknown>\nE       #6 0x56011e360313 <unknown>\nE       #7 0x56011e3960b2 <unknown>\nE       #8 0x56011e35fb49 <unknown>\nE       #9 0x56011e3964ce <unknown>\nE       #10 0x56011e3b5006 <unknown>\nE       #11 0x56011e395e53 <unknown>\nE       #12 0x56011e35ddd4 <unknown>\nE       #13 0x56011e35f1de <unknown>\nE       #14 0x56011e628531 <unknown>\nE       #15 0x56011e62c455 <unknown>\nE       #16 0x56011e614f55 <unknown>\nE       #17 0x56011e62d0ef <unknown>\nE       #18 0x56011e5f899f <unknown>\nE       #19 0x56011e651008 <unknown>\nE       #20 0x56011e6511d7 <unknown>\nE       #21 0x56011e663124 <unknown>\nE       #22 0x7f773f094ac3 <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"d","time":{"start":1706565066647,"stop":1706565067519,"duration":872},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_language","time":{"start":1706565067519,"stop":1706565067519,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"worker_id","time":{"start":1706565067519,"stop":1706565067519,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_login","time":{"start":1706565067520,"stop":1706565067520,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_country","time":{"start":1706565067520,"stop":1706565067520,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_password","time":{"start":1706565067520,"stop":1706565067520,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_role","time":{"start":1706565295961,"stop":1706565295961,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"\n        Check: Button [Start Trading] on Main banner\n        Language: All. License: All.\n        ","status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"https://capital.com/trading/signup\" class=\"cc-banner__btn btn btn--darkText js_signup js-analyticsClick\" data-type=\"top_banner_btn\">...</a> is not clickable at point (196, 300). Other element would receive the click: <div class=\"overlay overlay--uk\" id=\"uk_overlay\">...</div>\n  (Session info: chrome=120.0.6099.224)\nStacktrace:\n#0 0x56011e663f83 <unknown>\n#1 0x56011e31ccf7 <unknown>\n#2 0x56011e374d92 <unknown>\n#3 0x56011e3727f4 <unknown>\n#4 0x56011e36f894 <unknown>\n#5 0x56011e36e4b9 <unknown>\n#6 0x56011e360313 <unknown>\n#7 0x56011e3960b2 <unknown>\n#8 0x56011e35fb49 <unknown>\n#9 0x56011e3964ce <unknown>\n#10 0x56011e3b5006 <unknown>\n#11 0x56011e395e53 <unknown>\n#12 0x56011e35ddd4 <unknown>\n#13 0x56011e35f1de <unknown>\n#14 0x56011e628531 <unknown>\n#15 0x56011e62c455 <unknown>\n#16 0x56011e614f55 <unknown>\n#17 0x56011e62d0ef <unknown>\n#18 0x56011e5f899f <unknown>\n#19 0x56011e651008 <unknown>\n#20 0x56011e6511d7 <unknown>\n#21 0x56011e663124 <unknown>\n#22 0x7f773f094ac3 <unknown>","statusTrace":"self = <pages.Elements.ButtonStartTradingMainBanner.MainBannerStartTrading object at 0x7fa4740586d0>\n\n    @allure.step(\"Click button [Start Trading] on Main banner\")\n    def element_click(self):\n        print(f\"\\n{datetime.now()}   2. Act_v0\")\n        print(f\"{datetime.now()}   Start Click button [Start Trading] =>\")\n        button_list = self.driver.find_elements(*MainBannerLocators.BUTTON_START_TRADING)\n    \n        print(f\"{datetime.now()}   BUTTON_START_TRADING is clickable? =>\")\n        time_out = 3\n        if not self.element_is_clickable(button_list[0], time_out):\n            print(f\"{datetime.now()}   => BUTTON_START_TRADING is not clickable after {time_out} sec. Stop TC>\")\n            pytest.fail(f\"BUTTON_START_TRADING is not clickable after {time_out} sec.\")\n    \n        print(f\"{datetime.now()}   BUTTON_START_TRADING click =>\")\n        try:\n>           button_list[0].click()\n\npages/Elements/ButtonStartTradingMainBanner.py:93: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fa475616590>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x56011e6511d7 \\\\u003Cunknown>\\\\n#21 0x56011e663124 \\\\u003Cunknown>\\\\n#22 0x7f773f094ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"https://capital.com/trading/signup\" class=\"cc-banner__btn btn btn--darkText js_signup js-analyticsClick\" data-type=\"top_banner_btn\">...</a> is not clickable at point (196, 300). Other element would receive the click: <div class=\"overlay overlay--uk\" id=\"uk_overlay\">...</div>\nE         (Session info: chrome=120.0.6099.224)\nE       Stacktrace:\nE       #0 0x56011e663f83 <unknown>\nE       #1 0x56011e31ccf7 <unknown>\nE       #2 0x56011e374d92 <unknown>\nE       #3 0x56011e3727f4 <unknown>\nE       #4 0x56011e36f894 <unknown>\nE       #5 0x56011e36e4b9 <unknown>\nE       #6 0x56011e360313 <unknown>\nE       #7 0x56011e3960b2 <unknown>\nE       #8 0x56011e35fb49 <unknown>\nE       #9 0x56011e3964ce <unknown>\nE       #10 0x56011e3b5006 <unknown>\nE       #11 0x56011e395e53 <unknown>\nE       #12 0x56011e35ddd4 <unknown>\nE       #13 0x56011e35f1de <unknown>\nE       #14 0x56011e628531 <unknown>\nE       #15 0x56011e62c455 <unknown>\nE       #16 0x56011e614f55 <unknown>\nE       #17 0x56011e62d0ef <unknown>\nE       #18 0x56011e5f899f <unknown>\nE       #19 0x56011e651008 <unknown>\nE       #20 0x56011e6511d7 <unknown>\nE       #21 0x56011e663124 <unknown>\nE       #22 0x7f773f094ac3 <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <us_11-02-03-01_Commodities_trading_test.TestCommoditiesTrading object at 0x7fa474c72490>\nworker_id = 'master'\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"791fb34d14f2e4a685743ee430a719f8\")>\ncur_language = 'de', cur_country = 'gb', cur_role = 'NoAuth'\ncur_login = 'aqa.tomelo.an@gmail.com', cur_password = 'iT9Vgqi6d$fiZ*Z'\ncur_item_link = 'https://capital.com/de/trade-brent'\n\n    @allure.step(\"Start test of button [Start trading] on Main banner\")\n    @pytest.mark.test_01\n    def test_01_main_banner_start_trading_button(\n            self, worker_id, d, cur_language, cur_country, cur_role, cur_login, cur_password, cur_item_link):\n        \"\"\"\n        Check: Button [Start Trading] on Main banner\n        Language: All. License: All.\n        \"\"\"\n        bid = build_dynamic_arg_v4(\n            d, worker_id, cur_language, cur_country, cur_role,\n            \"11.02.03\", \"Education > Menu item [Commodities trading]\",\n            \".01_01\", \"Testing button [Start Trading] on Main banner\")\n    \n        check_language(cur_language)\n    \n        page_conditions = Conditions(d, \"\")\n        page_conditions.preconditions(\n            d, CapitalComPageSrc.URL, \"\", cur_language, cur_country, cur_role, cur_login, cur_password)\n    \n        test_element = MainBannerStartTrading(d, cur_item_link, bid)\n>       test_element.full_test_with_tpi(d, cur_language, cur_country, cur_role, cur_item_link)\n\ntests/US_11_Education/US_11-02-03_Commodities_trading/us_11-02-03-01_Commodities_trading_test.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/Elements/ButtonStartTradingMainBanner.py:21: in full_test_with_tpi\n    self.element_click()\npages/Elements/ButtonStartTradingMainBanner.py:110: in element_click\n    button_list[0].click()\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fa475616590>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x56011e6511d7 \\\\u003Cunknown>\\\\n#21 0x56011e663124 \\\\u003Cunknown>\\\\n#22 0x7f773f094ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"https://capital.com/trading/signup\" class=\"cc-banner__btn btn btn--darkText js_signup js-analyticsClick\" data-type=\"top_banner_btn\">...</a> is not clickable at point (196, 300). Other element would receive the click: <div class=\"overlay overlay--uk\" id=\"uk_overlay\">...</div>\nE         (Session info: chrome=120.0.6099.224)\nE       Stacktrace:\nE       #0 0x56011e663f83 <unknown>\nE       #1 0x56011e31ccf7 <unknown>\nE       #2 0x56011e374d92 <unknown>\nE       #3 0x56011e3727f4 <unknown>\nE       #4 0x56011e36f894 <unknown>\nE       #5 0x56011e36e4b9 <unknown>\nE       #6 0x56011e360313 <unknown>\nE       #7 0x56011e3960b2 <unknown>\nE       #8 0x56011e35fb49 <unknown>\nE       #9 0x56011e3964ce <unknown>\nE       #10 0x56011e3b5006 <unknown>\nE       #11 0x56011e395e53 <unknown>\nE       #12 0x56011e35ddd4 <unknown>\nE       #13 0x56011e35f1de <unknown>\nE       #14 0x56011e628531 <unknown>\nE       #15 0x56011e62c455 <unknown>\nE       #16 0x56011e614f55 <unknown>\nE       #17 0x56011e62d0ef <unknown>\nE       #18 0x56011e5f899f <unknown>\nE       #19 0x56011e651008 <unknown>\nE       #20 0x56011e6511d7 <unknown>\nE       #21 0x56011e663124 <unknown>\nE       #22 0x7f773f094ac3 <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","steps":[{"name":"Start test of button [Start trading] on Main banner","time":{"start":1706565403329,"stop":1706565416538,"duration":13209},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"https://capital.com/trading/signup\" class=\"cc-banner__btn btn btn--darkText js_signup js-analyticsClick\" data-type=\"top_banner_btn\">...</a> is not clickable at point (196, 300). Other element would receive the click: <div class=\"overlay overlay--uk\" id=\"uk_overlay\">...</div>\n  (Session info: chrome=120.0.6099.224)\nStacktrace:\n#0 0x56011e663f83 <unknown>\n#1 0x56011e31ccf7 <unknown>\n#2 0x56011e374d92 <unknown>\n#3 0x56011e3727f4 <unknown>\n#4 0x56011e36f894 <unknown>\n#5 0x56011e36e4b9 <unknown>\n#6 0x56011e360313 <unknown>\n#7 0x56011e3960b2 <unknown>\n#8 0x56011e35fb49 <unknown>\n#9 0x56011e3964ce <unknown>\n#10 0x56011e3b5006 <unknown>\n#11 0x56011e395e53 <unknown>\n#12 0x56011e35ddd4 <unknown>\n#13 0x56011e35f1de <unknown>\n#14 0x56011e628531 <unknown>\n#15 0x56011e62c455 <unknown>\n#16 0x56011e614f55 <unknown>\n#17 0x56011e62d0ef <unknown>\n#18 0x56011e5f899f <unknown>\n#19 0x56011e651008 <unknown>\n#20 0x56011e6511d7 <unknown>\n#21 0x56011e663124 <unknown>\n#22 0x7f773f094ac3 <unknown>\n\n","statusTrace":"  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.11/lib/python3.11/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/tests/US_11_Education/US_11-02-03_Commodities_trading/us_11-02-03-01_Commodities_trading_test.py\", line 77, in test_01_main_banner_start_trading_button\n    test_element.full_test_with_tpi(d, cur_language, cur_country, cur_role, cur_item_link)\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/Elements/ButtonStartTradingMainBanner.py\", line 21, in full_test_with_tpi\n    self.element_click()\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.11/lib/python3.11/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/Elements/ButtonStartTradingMainBanner.py\", line 110, in element_click\n    button_list[0].click()\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py\", line 94, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py\", line 395, in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py\", line 348, in execute\n    self.error_handler.check_response(response)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[{"name":"Start Building dynamic arguments for allure report generation","time":{"start":1706565403329,"stop":1706565403331,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"791fb34d14f2e4a685743ee430a719f8\")>"},{"name":"worker_id","value":"'master'"},{"name":"cur_language","value":"'de'"},{"name":"cur_country","value":"'gb'"},{"name":"cur_role","value":"'NoAuth'"},{"name":"us","value":"'11.02.03'"},{"name":"desc_us","value":"'Education > Menu item [Commodities trading]'"},{"name":"num_tc","value":"'.01_01'"},{"name":"desc_tc","value":"'Testing button [Start Trading] on Main banner'"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Set preconditions","time":{"start":1706565403331,"stop":1706565406632,"duration":3301},"status":"passed","steps":[{"name":"Start Checking Captcha","time":{"start":1706565403539,"stop":1706565404588,"duration":1049},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Start Checking Captcha","time":{"start":1706565404588,"stop":1706565405629,"duration":1041},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Start Checking Captcha","time":{"start":1706565405629,"stop":1706565406632,"duration":1003},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"791fb34d14f2e4a685743ee430a719f8\")>"},{"name":"host","value":"'https://capital.com'"},{"name":"end_point","value":"''"},{"name":"cur_language","value":"'de'"},{"name":"cur_country","value":"'gb'"},{"name":"cur_role","value":"'NoAuth'"},{"name":"cur_login","value":"'aqa.tomelo.an@gmail.com'"},{"name":"cur_password","value":"'iT9Vgqi6d$fiZ*Z'"}],"shouldDisplayMessage":false,"stepsCount":3,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Click button [Start Trading] on Main banner","time":{"start":1706565408077,"stop":1706565416538,"duration":8461},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"https://capital.com/trading/signup\" class=\"cc-banner__btn btn btn--darkText js_signup js-analyticsClick\" data-type=\"top_banner_btn\">...</a> is not clickable at point (196, 300). Other element would receive the click: <div class=\"overlay overlay--uk\" id=\"uk_overlay\">...</div>\n  (Session info: chrome=120.0.6099.224)\nStacktrace:\n#0 0x56011e663f83 <unknown>\n#1 0x56011e31ccf7 <unknown>\n#2 0x56011e374d92 <unknown>\n#3 0x56011e3727f4 <unknown>\n#4 0x56011e36f894 <unknown>\n#5 0x56011e36e4b9 <unknown>\n#6 0x56011e360313 <unknown>\n#7 0x56011e3960b2 <unknown>\n#8 0x56011e35fb49 <unknown>\n#9 0x56011e3964ce <unknown>\n#10 0x56011e3b5006 <unknown>\n#11 0x56011e395e53 <unknown>\n#12 0x56011e35ddd4 <unknown>\n#13 0x56011e35f1de <unknown>\n#14 0x56011e628531 <unknown>\n#15 0x56011e62c455 <unknown>\n#16 0x56011e614f55 <unknown>\n#17 0x56011e62d0ef <unknown>\n#18 0x56011e5f899f <unknown>\n#19 0x56011e651008 <unknown>\n#20 0x56011e6511d7 <unknown>\n#21 0x56011e663124 <unknown>\n#22 0x7f773f094ac3 <unknown>\n\n","statusTrace":"  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.11/lib/python3.11/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/Elements/ButtonStartTradingMainBanner.py\", line 110, in element_click\n    button_list[0].click()\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py\", line 94, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py\", line 395, in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py\", line 348, in execute\n    self.error_handler.check_response(response)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[{"name":"Close form [Sign up]","time":{"start":1706565409220,"stop":1706565412292,"duration":3072},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Close form [Login]","time":{"start":1706565412292,"stop":1706565415340,"duration":3048},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Close page [Sign up]","time":{"start":1706565415340,"stop":1706565415343,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Close page [Login]","time":{"start":1706565415343,"stop":1706565415346,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"worker_id","value":"'master'"},{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"791fb34d14f2e4a685743ee430a719f8\")>"},{"name":"cur_language","value":"'de'"},{"name":"cur_country","value":"'gb'"},{"name":"cur_role","value":"'NoAuth'"},{"name":"cur_login","value":"'aqa.tomelo.an@gmail.com'"},{"name":"cur_password","value":"'iT9Vgqi6d$fiZ*Z'"},{"name":"cur_item_link","value":"'https://capital.com/de/trade-brent'"}],"shouldDisplayMessage":false,"stepsCount":10,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"3c1632cc6d336bf2","name":"Screenshot","source":"3c1632cc6d336bf2.png","type":"image/png","size":89182},{"uid":"d88388f91b1fac95","name":"log","source":"d88388f91b1fac95.txt","type":"text/plain","size":7428},{"uid":"34be287bb27192ca","name":"stdout","source":"34be287bb27192ca.txt","type":"text/plain","size":2022}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":11,"attachmentsCount":3,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"d::0","time":{"start":1706565724911,"stop":1706565725068,"duration":157},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"epic","value":"US_11.02.03 | Education > Menu item [Commodities trading]"},{"name":"feature","value":"Language: de"},{"name":"story","value":"Country: gb / Role: NoAuth"},{"name":"tag","value":"test_01"},{"name":"tag","value":"us_11_02_03"},{"name":"parentSuite","value":"tests.US_11_Education.US_11-02-03_Commodities_trading"},{"name":"suite","value":"us_11-02-03-01_Commodities_trading_test"},{"name":"subSuite","value":"TestCommoditiesTrading"},{"name":"host","value":"fv-az773-638"},{"name":"thread","value":"21090-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.US_11_Education.US_11-02-03_Commodities_trading.us_11-02-03-01_Commodities_trading_test"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"cur_country","value":"'gb'"},{"name":"cur_item_link","value":"'https://capital.com/de/trade-brent'"},{"name":"cur_language","value":"'de'"},{"name":"cur_login","value":"'aqa.tomelo.an@gmail.com'"},{"name":"cur_password","value":"'iT9Vgqi6d$fiZ*Z'"},{"name":"cur_role","value":"'NoAuth'"},{"name":"d","value":"'Chrome'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["test_01","us_11_02_03"]},"source":"6bec66aa3028a818.json","parameterValues":["'gb'","'https://capital.com/de/trade-brent'","'de'","'aqa.tomelo.an@gmail.com'","'iT9Vgqi6d$fiZ*Z'","'NoAuth'","'Chrome'"]}