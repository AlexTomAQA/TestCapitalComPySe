{"uid":"6d5af17112cb7585","name":"TC_11.02.02.01_12 | Testing button in block [Horizontal banner]. Bid:11.02.02.01_12-de.au.NoAuth","fullName":"tests.US_11_Education.US_11-02-06_Indices_trading.us_11-02-06-01_indices_trading_test.TestIndicesTrading#test_12_block_hor_banner_button","historyId":"4775c57472e7e7ed7573450185994bea","time":{"start":1706569224707,"stop":1706569233419,"duration":8712},"description":"\n        Check the [Button] on the Horizontal banner at the bottom of the page.\n        For \"Authorized user\" role:\n        The trading platform page is opened depend on the banner [type-id]:\n                Live mode if the banner in the Live mode banners list\n                Demo mode if the banner in the Demo mode banners list\n        ","descriptionHtml":"<pre><code>    Check the [Button] on the Horizontal banner at the bottom of the page.\n    For &quot;Authorized user&quot; role:\n    The trading platform page is opened depend on the banner [type-id]:\n            Live mode if the banner in the Live mode banners list\n            Demo mode if the banner in the Demo mode banners list\n</code></pre>\n","status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"/trading/signup\" class=\"button-main rounded-lg __cp_b ln-auto js-analyticsClick\" data-type=\"b_hor_s1_169\">...</a> is not clickable at point (770, 300). Other element would receive the click: <a href=\"#\" class=\"l_btn_forgot\">...</a>\n  (Session info: chrome=120.0.6099.224)\nStacktrace:\n#0 0x5581e2e25f83 <unknown>\n#1 0x5581e2adecf7 <unknown>\n#2 0x5581e2b36d92 <unknown>\n#3 0x5581e2b347f4 <unknown>\n#4 0x5581e2b31894 <unknown>\n#5 0x5581e2b304b9 <unknown>\n#6 0x5581e2b22313 <unknown>\n#7 0x5581e2b580b2 <unknown>\n#8 0x5581e2b21b49 <unknown>\n#9 0x5581e2b584ce <unknown>\n#10 0x5581e2b77006 <unknown>\n#11 0x5581e2b57e53 <unknown>\n#12 0x5581e2b1fdd4 <unknown>\n#13 0x5581e2b211de <unknown>\n#14 0x5581e2dea531 <unknown>\n#15 0x5581e2dee455 <unknown>\n#16 0x5581e2dd6f55 <unknown>\n#17 0x5581e2def0ef <unknown>\n#18 0x5581e2dba99f <unknown>\n#19 0x5581e2e13008 <unknown>\n#20 0x5581e2e131d7 <unknown>\n#21 0x5581e2e25124 <unknown>\n#22 0x7ffa0fc94ac3 <unknown>","statusTrace":"self = <pages.Elements.ButtonOnHorizontalBanner.ButtonOnHorizontalBanner object at 0x7fd8e2c60710>\n\n    @allure.step(\"Click button [BUTTON_ON_HOR_BANNER]\")\n    def element_click(self):\n        print(f\"\\n{datetime.now()}   2. Act\")\n        print(f\"{datetime.now()}   BUTTON_ON_HOR_BANNER is present? =>\")\n        button_list = self.driver.find_elements(*ButtonOnHorizontalBannerLocators.BUTTON_ON_HOR_BANNER)\n        if len(button_list) == 0:\n            print(f\"{datetime.now()}   => BUTTON_ON_HOR_BANNER is not present on the page!\")\n            del button_list\n            return False\n        print(f\"{datetime.now()}   => BUTTON_ON_HOR_BANNER is present on the page!\")\n    \n        print(f\"{datetime.now()}   BUTTON_ON_HOR_BANNER scroll =>\")\n    \n        self.driver.execute_script(\n            'return arguments[0].scrollIntoView({block: \"center\", inline: \"nearest\"});',\n            button_list[0]\n        )\n    \n        self.element_is_clickable(button_list[0], 5)\n    \n        data_type = button_list[0].get_attribute(\"data-type\")\n        data_id = data_type.split('_')[-1]\n    \n        try:\n>           button_list[0].click()\n\npages/Elements/ButtonOnHorizontalBanner.py:93: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fd8e39dfc50>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x5581e2e131d7 \\\\u003Cunknown>\\\\n#21 0x5581e2e25124 \\\\u003Cunknown>\\\\n#22 0x7ffa0fc94ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"/trading/signup\" class=\"button-main rounded-lg __cp_b ln-auto js-analyticsClick\" data-type=\"b_hor_s1_169\">...</a> is not clickable at point (770, 300). Other element would receive the click: <a href=\"#\" class=\"l_btn_forgot\">...</a>\nE         (Session info: chrome=120.0.6099.224)\nE       Stacktrace:\nE       #0 0x5581e2e25f83 <unknown>\nE       #1 0x5581e2adecf7 <unknown>\nE       #2 0x5581e2b36d92 <unknown>\nE       #3 0x5581e2b347f4 <unknown>\nE       #4 0x5581e2b31894 <unknown>\nE       #5 0x5581e2b304b9 <unknown>\nE       #6 0x5581e2b22313 <unknown>\nE       #7 0x5581e2b580b2 <unknown>\nE       #8 0x5581e2b21b49 <unknown>\nE       #9 0x5581e2b584ce <unknown>\nE       #10 0x5581e2b77006 <unknown>\nE       #11 0x5581e2b57e53 <unknown>\nE       #12 0x5581e2b1fdd4 <unknown>\nE       #13 0x5581e2b211de <unknown>\nE       #14 0x5581e2dea531 <unknown>\nE       #15 0x5581e2dee455 <unknown>\nE       #16 0x5581e2dd6f55 <unknown>\nE       #17 0x5581e2def0ef <unknown>\nE       #18 0x5581e2dba99f <unknown>\nE       #19 0x5581e2e13008 <unknown>\nE       #20 0x5581e2e131d7 <unknown>\nE       #21 0x5581e2e25124 <unknown>\nE       #22 0x7ffa0fc94ac3 <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <us_11-02-06-01_indices_trading_test.TestIndicesTrading object at 0x7fd8e3916d50>\nworker_id = 'master'\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"1d6942b313d863d81837b9075c19e92c\")>\ncur_language = 'de', cur_country = 'au', cur_role = 'NoAuth'\ncur_login = 'aqa.tomelo.an@gmail.com', cur_password = 'iT9Vgqi6d$fiZ*Z'\ncur_item_link = 'https://capital.com/de/trade-cac'\n\n    @allure.step(\"Start test of button in block [Horizontal banner]\")\n    # @pytest.mark.skip(reason=\"Skipped for debugging\")\n    @pytest.mark.test_12\n    def test_12_block_hor_banner_button(\n            self, worker_id, d, cur_language, cur_country, cur_role, cur_login, cur_password,\n            cur_item_link):\n        \"\"\"\n        Check the [Button] on the Horizontal banner at the bottom of the page.\n        For \"Authorized user\" role:\n        The trading platform page is opened depend on the banner [type-id]:\n                Live mode if the banner in the Live mode banners list\n                Demo mode if the banner in the Demo mode banners list\n        \"\"\"\n    \n        bid = build_dynamic_arg_v4(\n            d, worker_id, cur_language, cur_country, cur_role,\n            \"11.02.02\", \"Education > Menu item [Indices trading]\",\n            \".01_12\", \"Testing button in block [Horizontal banner]\")\n    \n        Common().skip_if_eng_lang_and_fca_license(cur_language, cur_country)\n    \n        Common().check_language_in_list_and_skip_if_not_present(\n            cur_language, [\"de\", \"es\", \"it\", \"ru\", \"zh\"])\n    \n        page_conditions = Conditions(d, \"\")\n        page_conditions.preconditions(\n            d, CapitalComPageSrc.URL, \"\", cur_language, cur_country, cur_role, cur_login, cur_password)\n    \n        # банеры должны открываться в Demo mode for US_00\n        banner00_hor_tpd = []\n        # банеры должны открываться в Live mode for US_00\n        banner00_hor_tp = []\n        # банеры должны открываться в Demo mode for US_01\n        banner01_hor_tpd = ['429']\n        # банеры должны открываться в Live mode for US_01\n        banner01_hor_tp = ['169', '199', '254', '392', '430',]\n    \n        test_element = ButtonOnHorizontalBanner(d, cur_item_link, bid)\n>       test_element.full_test_with_tpi(d, cur_language, cur_country, cur_role, cur_item_link,\n                                        banner00_hor_tpd, banner00_hor_tp, banner01_hor_tpd, banner01_hor_tp)\n\ntests/US_11_Education/US_11-02-06_Indices_trading/us_11-02-06-01_indices_trading_test.py:367: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/Elements/ButtonOnHorizontalBanner.py:29: in full_test_with_tpi\n    data_id = self.element_click()\npages/Elements/ButtonOnHorizontalBanner.py:105: in element_click\n    button_list[0].click()\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fd8e39dfc50>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x5581e2e131d7 \\\\u003Cunknown>\\\\n#21 0x5581e2e25124 \\\\u003Cunknown>\\\\n#22 0x7ffa0fc94ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"/trading/signup\" class=\"button-main rounded-lg __cp_b ln-auto js-analyticsClick\" data-type=\"b_hor_s1_169\">...</a> is not clickable at point (770, 300). Other element would receive the click: <a href=\"#\" class=\"l_btn_forgot\">...</a>\nE         (Session info: chrome=120.0.6099.224)\nE       Stacktrace:\nE       #0 0x5581e2e25f83 <unknown>\nE       #1 0x5581e2adecf7 <unknown>\nE       #2 0x5581e2b36d92 <unknown>\nE       #3 0x5581e2b347f4 <unknown>\nE       #4 0x5581e2b31894 <unknown>\nE       #5 0x5581e2b304b9 <unknown>\nE       #6 0x5581e2b22313 <unknown>\nE       #7 0x5581e2b580b2 <unknown>\nE       #8 0x5581e2b21b49 <unknown>\nE       #9 0x5581e2b584ce <unknown>\nE       #10 0x5581e2b77006 <unknown>\nE       #11 0x5581e2b57e53 <unknown>\nE       #12 0x5581e2b1fdd4 <unknown>\nE       #13 0x5581e2b211de <unknown>\nE       #14 0x5581e2dea531 <unknown>\nE       #15 0x5581e2dee455 <unknown>\nE       #16 0x5581e2dd6f55 <unknown>\nE       #17 0x5581e2def0ef <unknown>\nE       #18 0x5581e2dba99f <unknown>\nE       #19 0x5581e2e13008 <unknown>\nE       #20 0x5581e2e131d7 <unknown>\nE       #21 0x5581e2e25124 <unknown>\nE       #22 0x7ffa0fc94ac3 <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"d","time":{"start":1706568357449,"stop":1706568358335,"duration":886},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"worker_id","time":{"start":1706568358335,"stop":1706568358335,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_language","time":{"start":1706568358335,"stop":1706568358335,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_login","time":{"start":1706568358335,"stop":1706568358335,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_country","time":{"start":1706568358335,"stop":1706568358335,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_password","time":{"start":1706568358335,"stop":1706568358335,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_role","time":{"start":1706568899509,"stop":1706568899509,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"\n        Check the [Button] on the Horizontal banner at the bottom of the page.\n        For \"Authorized user\" role:\n        The trading platform page is opened depend on the banner [type-id]:\n                Live mode if the banner in the Live mode banners list\n                Demo mode if the banner in the Demo mode banners list\n        ","status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"/trading/signup\" class=\"button-main rounded-lg __cp_b ln-auto js-analyticsClick\" data-type=\"b_hor_s1_169\">...</a> is not clickable at point (770, 300). Other element would receive the click: <a href=\"#\" class=\"l_btn_forgot\">...</a>\n  (Session info: chrome=120.0.6099.224)\nStacktrace:\n#0 0x5581e2e25f83 <unknown>\n#1 0x5581e2adecf7 <unknown>\n#2 0x5581e2b36d92 <unknown>\n#3 0x5581e2b347f4 <unknown>\n#4 0x5581e2b31894 <unknown>\n#5 0x5581e2b304b9 <unknown>\n#6 0x5581e2b22313 <unknown>\n#7 0x5581e2b580b2 <unknown>\n#8 0x5581e2b21b49 <unknown>\n#9 0x5581e2b584ce <unknown>\n#10 0x5581e2b77006 <unknown>\n#11 0x5581e2b57e53 <unknown>\n#12 0x5581e2b1fdd4 <unknown>\n#13 0x5581e2b211de <unknown>\n#14 0x5581e2dea531 <unknown>\n#15 0x5581e2dee455 <unknown>\n#16 0x5581e2dd6f55 <unknown>\n#17 0x5581e2def0ef <unknown>\n#18 0x5581e2dba99f <unknown>\n#19 0x5581e2e13008 <unknown>\n#20 0x5581e2e131d7 <unknown>\n#21 0x5581e2e25124 <unknown>\n#22 0x7ffa0fc94ac3 <unknown>","statusTrace":"self = <pages.Elements.ButtonOnHorizontalBanner.ButtonOnHorizontalBanner object at 0x7fd8e2c60710>\n\n    @allure.step(\"Click button [BUTTON_ON_HOR_BANNER]\")\n    def element_click(self):\n        print(f\"\\n{datetime.now()}   2. Act\")\n        print(f\"{datetime.now()}   BUTTON_ON_HOR_BANNER is present? =>\")\n        button_list = self.driver.find_elements(*ButtonOnHorizontalBannerLocators.BUTTON_ON_HOR_BANNER)\n        if len(button_list) == 0:\n            print(f\"{datetime.now()}   => BUTTON_ON_HOR_BANNER is not present on the page!\")\n            del button_list\n            return False\n        print(f\"{datetime.now()}   => BUTTON_ON_HOR_BANNER is present on the page!\")\n    \n        print(f\"{datetime.now()}   BUTTON_ON_HOR_BANNER scroll =>\")\n    \n        self.driver.execute_script(\n            'return arguments[0].scrollIntoView({block: \"center\", inline: \"nearest\"});',\n            button_list[0]\n        )\n    \n        self.element_is_clickable(button_list[0], 5)\n    \n        data_type = button_list[0].get_attribute(\"data-type\")\n        data_id = data_type.split('_')[-1]\n    \n        try:\n>           button_list[0].click()\n\npages/Elements/ButtonOnHorizontalBanner.py:93: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fd8e39dfc50>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x5581e2e131d7 \\\\u003Cunknown>\\\\n#21 0x5581e2e25124 \\\\u003Cunknown>\\\\n#22 0x7ffa0fc94ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"/trading/signup\" class=\"button-main rounded-lg __cp_b ln-auto js-analyticsClick\" data-type=\"b_hor_s1_169\">...</a> is not clickable at point (770, 300). Other element would receive the click: <a href=\"#\" class=\"l_btn_forgot\">...</a>\nE         (Session info: chrome=120.0.6099.224)\nE       Stacktrace:\nE       #0 0x5581e2e25f83 <unknown>\nE       #1 0x5581e2adecf7 <unknown>\nE       #2 0x5581e2b36d92 <unknown>\nE       #3 0x5581e2b347f4 <unknown>\nE       #4 0x5581e2b31894 <unknown>\nE       #5 0x5581e2b304b9 <unknown>\nE       #6 0x5581e2b22313 <unknown>\nE       #7 0x5581e2b580b2 <unknown>\nE       #8 0x5581e2b21b49 <unknown>\nE       #9 0x5581e2b584ce <unknown>\nE       #10 0x5581e2b77006 <unknown>\nE       #11 0x5581e2b57e53 <unknown>\nE       #12 0x5581e2b1fdd4 <unknown>\nE       #13 0x5581e2b211de <unknown>\nE       #14 0x5581e2dea531 <unknown>\nE       #15 0x5581e2dee455 <unknown>\nE       #16 0x5581e2dd6f55 <unknown>\nE       #17 0x5581e2def0ef <unknown>\nE       #18 0x5581e2dba99f <unknown>\nE       #19 0x5581e2e13008 <unknown>\nE       #20 0x5581e2e131d7 <unknown>\nE       #21 0x5581e2e25124 <unknown>\nE       #22 0x7ffa0fc94ac3 <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <us_11-02-06-01_indices_trading_test.TestIndicesTrading object at 0x7fd8e3916d50>\nworker_id = 'master'\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"1d6942b313d863d81837b9075c19e92c\")>\ncur_language = 'de', cur_country = 'au', cur_role = 'NoAuth'\ncur_login = 'aqa.tomelo.an@gmail.com', cur_password = 'iT9Vgqi6d$fiZ*Z'\ncur_item_link = 'https://capital.com/de/trade-cac'\n\n    @allure.step(\"Start test of button in block [Horizontal banner]\")\n    # @pytest.mark.skip(reason=\"Skipped for debugging\")\n    @pytest.mark.test_12\n    def test_12_block_hor_banner_button(\n            self, worker_id, d, cur_language, cur_country, cur_role, cur_login, cur_password,\n            cur_item_link):\n        \"\"\"\n        Check the [Button] on the Horizontal banner at the bottom of the page.\n        For \"Authorized user\" role:\n        The trading platform page is opened depend on the banner [type-id]:\n                Live mode if the banner in the Live mode banners list\n                Demo mode if the banner in the Demo mode banners list\n        \"\"\"\n    \n        bid = build_dynamic_arg_v4(\n            d, worker_id, cur_language, cur_country, cur_role,\n            \"11.02.02\", \"Education > Menu item [Indices trading]\",\n            \".01_12\", \"Testing button in block [Horizontal banner]\")\n    \n        Common().skip_if_eng_lang_and_fca_license(cur_language, cur_country)\n    \n        Common().check_language_in_list_and_skip_if_not_present(\n            cur_language, [\"de\", \"es\", \"it\", \"ru\", \"zh\"])\n    \n        page_conditions = Conditions(d, \"\")\n        page_conditions.preconditions(\n            d, CapitalComPageSrc.URL, \"\", cur_language, cur_country, cur_role, cur_login, cur_password)\n    \n        # банеры должны открываться в Demo mode for US_00\n        banner00_hor_tpd = []\n        # банеры должны открываться в Live mode for US_00\n        banner00_hor_tp = []\n        # банеры должны открываться в Demo mode for US_01\n        banner01_hor_tpd = ['429']\n        # банеры должны открываться в Live mode for US_01\n        banner01_hor_tp = ['169', '199', '254', '392', '430',]\n    \n        test_element = ButtonOnHorizontalBanner(d, cur_item_link, bid)\n>       test_element.full_test_with_tpi(d, cur_language, cur_country, cur_role, cur_item_link,\n                                        banner00_hor_tpd, banner00_hor_tp, banner01_hor_tpd, banner01_hor_tp)\n\ntests/US_11_Education/US_11-02-06_Indices_trading/us_11-02-06-01_indices_trading_test.py:367: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/Elements/ButtonOnHorizontalBanner.py:29: in full_test_with_tpi\n    data_id = self.element_click()\npages/Elements/ButtonOnHorizontalBanner.py:105: in element_click\n    button_list[0].click()\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fd8e39dfc50>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x5581e2e131d7 \\\\u003Cunknown>\\\\n#21 0x5581e2e25124 \\\\u003Cunknown>\\\\n#22 0x7ffa0fc94ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"/trading/signup\" class=\"button-main rounded-lg __cp_b ln-auto js-analyticsClick\" data-type=\"b_hor_s1_169\">...</a> is not clickable at point (770, 300). Other element would receive the click: <a href=\"#\" class=\"l_btn_forgot\">...</a>\nE         (Session info: chrome=120.0.6099.224)\nE       Stacktrace:\nE       #0 0x5581e2e25f83 <unknown>\nE       #1 0x5581e2adecf7 <unknown>\nE       #2 0x5581e2b36d92 <unknown>\nE       #3 0x5581e2b347f4 <unknown>\nE       #4 0x5581e2b31894 <unknown>\nE       #5 0x5581e2b304b9 <unknown>\nE       #6 0x5581e2b22313 <unknown>\nE       #7 0x5581e2b580b2 <unknown>\nE       #8 0x5581e2b21b49 <unknown>\nE       #9 0x5581e2b584ce <unknown>\nE       #10 0x5581e2b77006 <unknown>\nE       #11 0x5581e2b57e53 <unknown>\nE       #12 0x5581e2b1fdd4 <unknown>\nE       #13 0x5581e2b211de <unknown>\nE       #14 0x5581e2dea531 <unknown>\nE       #15 0x5581e2dee455 <unknown>\nE       #16 0x5581e2dd6f55 <unknown>\nE       #17 0x5581e2def0ef <unknown>\nE       #18 0x5581e2dba99f <unknown>\nE       #19 0x5581e2e13008 <unknown>\nE       #20 0x5581e2e131d7 <unknown>\nE       #21 0x5581e2e25124 <unknown>\nE       #22 0x7ffa0fc94ac3 <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","steps":[{"name":"Start test of button in block [Horizontal banner]","time":{"start":1706569224707,"stop":1706569233418,"duration":8711},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"/trading/signup\" class=\"button-main rounded-lg __cp_b ln-auto js-analyticsClick\" data-type=\"b_hor_s1_169\">...</a> is not clickable at point (770, 300). Other element would receive the click: <a href=\"#\" class=\"l_btn_forgot\">...</a>\n  (Session info: chrome=120.0.6099.224)\nStacktrace:\n#0 0x5581e2e25f83 <unknown>\n#1 0x5581e2adecf7 <unknown>\n#2 0x5581e2b36d92 <unknown>\n#3 0x5581e2b347f4 <unknown>\n#4 0x5581e2b31894 <unknown>\n#5 0x5581e2b304b9 <unknown>\n#6 0x5581e2b22313 <unknown>\n#7 0x5581e2b580b2 <unknown>\n#8 0x5581e2b21b49 <unknown>\n#9 0x5581e2b584ce <unknown>\n#10 0x5581e2b77006 <unknown>\n#11 0x5581e2b57e53 <unknown>\n#12 0x5581e2b1fdd4 <unknown>\n#13 0x5581e2b211de <unknown>\n#14 0x5581e2dea531 <unknown>\n#15 0x5581e2dee455 <unknown>\n#16 0x5581e2dd6f55 <unknown>\n#17 0x5581e2def0ef <unknown>\n#18 0x5581e2dba99f <unknown>\n#19 0x5581e2e13008 <unknown>\n#20 0x5581e2e131d7 <unknown>\n#21 0x5581e2e25124 <unknown>\n#22 0x7ffa0fc94ac3 <unknown>\n\n","statusTrace":"  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.11/lib/python3.11/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/tests/US_11_Education/US_11-02-06_Indices_trading/us_11-02-06-01_indices_trading_test.py\", line 367, in test_12_block_hor_banner_button\n    test_element.full_test_with_tpi(d, cur_language, cur_country, cur_role, cur_item_link,\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/Elements/ButtonOnHorizontalBanner.py\", line 29, in full_test_with_tpi\n    data_id = self.element_click()\n              ^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.11/lib/python3.11/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/Elements/ButtonOnHorizontalBanner.py\", line 105, in element_click\n    button_list[0].click()\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py\", line 94, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py\", line 395, in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py\", line 348, in execute\n    self.error_handler.check_response(response)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[{"name":"Start Building dynamic arguments for allure report generation","time":{"start":1706569224707,"stop":1706569224708,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"1d6942b313d863d81837b9075c19e92c\")>"},{"name":"worker_id","value":"'master'"},{"name":"cur_language","value":"'de'"},{"name":"cur_country","value":"'au'"},{"name":"cur_role","value":"'NoAuth'"},{"name":"us","value":"'11.02.02'"},{"name":"desc_us","value":"'Education > Menu item [Indices trading]'"},{"name":"num_tc","value":"'.01_12'"},{"name":"desc_tc","value":"'Testing button in block [Horizontal banner]'"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Set preconditions","time":{"start":1706569224708,"stop":1706569228029,"duration":3321},"status":"passed","steps":[{"name":"Start Checking Captcha","time":{"start":1706569224916,"stop":1706569225955,"duration":1039},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Start Checking Captcha","time":{"start":1706569225955,"stop":1706569226992,"duration":1037},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Start Checking Captcha","time":{"start":1706569226993,"stop":1706569228029,"duration":1036},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"1d6942b313d863d81837b9075c19e92c\")>"},{"name":"host","value":"'https://capital.com'"},{"name":"end_point","value":"''"},{"name":"cur_language","value":"'de'"},{"name":"cur_country","value":"'au'"},{"name":"cur_role","value":"'NoAuth'"},{"name":"cur_login","value":"'aqa.tomelo.an@gmail.com'"},{"name":"cur_password","value":"'iT9Vgqi6d$fiZ*Z'"}],"shouldDisplayMessage":false,"stepsCount":3,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Check that form [Sign up] opened","time":{"start":1706569228050,"stop":1706569228113,"duration":63},"status":"passed","steps":[{"name":"Close form [Sign up]","time":{"start":1706569228061,"stop":1706569228113,"duration":52},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"timeout","value":"1"}],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Click button [BUTTON_ON_HOR_BANNER]","time":{"start":1706569228113,"stop":1706569233417,"duration":5304},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"/trading/signup\" class=\"button-main rounded-lg __cp_b ln-auto js-analyticsClick\" data-type=\"b_hor_s1_169\">...</a> is not clickable at point (770, 300). Other element would receive the click: <a href=\"#\" class=\"l_btn_forgot\">...</a>\n  (Session info: chrome=120.0.6099.224)\nStacktrace:\n#0 0x5581e2e25f83 <unknown>\n#1 0x5581e2adecf7 <unknown>\n#2 0x5581e2b36d92 <unknown>\n#3 0x5581e2b347f4 <unknown>\n#4 0x5581e2b31894 <unknown>\n#5 0x5581e2b304b9 <unknown>\n#6 0x5581e2b22313 <unknown>\n#7 0x5581e2b580b2 <unknown>\n#8 0x5581e2b21b49 <unknown>\n#9 0x5581e2b584ce <unknown>\n#10 0x5581e2b77006 <unknown>\n#11 0x5581e2b57e53 <unknown>\n#12 0x5581e2b1fdd4 <unknown>\n#13 0x5581e2b211de <unknown>\n#14 0x5581e2dea531 <unknown>\n#15 0x5581e2dee455 <unknown>\n#16 0x5581e2dd6f55 <unknown>\n#17 0x5581e2def0ef <unknown>\n#18 0x5581e2dba99f <unknown>\n#19 0x5581e2e13008 <unknown>\n#20 0x5581e2e131d7 <unknown>\n#21 0x5581e2e25124 <unknown>\n#22 0x7ffa0fc94ac3 <unknown>\n\n","statusTrace":"  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.11/lib/python3.11/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/Elements/ButtonOnHorizontalBanner.py\", line 105, in element_click\n    button_list[0].click()\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py\", line 94, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py\", line 395, in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py\", line 348, in execute\n    self.error_handler.check_response(response)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[{"name":"Close form [Sign up]","time":{"start":1706569229260,"stop":1706569232342,"duration":3082},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Close page [Sign up]","time":{"start":1706569232342,"stop":1706569232345,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"worker_id","value":"'master'"},{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"1d6942b313d863d81837b9075c19e92c\")>"},{"name":"cur_language","value":"'de'"},{"name":"cur_country","value":"'au'"},{"name":"cur_role","value":"'NoAuth'"},{"name":"cur_login","value":"'aqa.tomelo.an@gmail.com'"},{"name":"cur_password","value":"'iT9Vgqi6d$fiZ*Z'"},{"name":"cur_item_link","value":"'https://capital.com/de/trade-cac'"}],"shouldDisplayMessage":false,"stepsCount":10,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"3ab4e4a2f4766727","name":"Screenshot","source":"3ab4e4a2f4766727.png","type":"image/png","size":111151},{"uid":"79f48822ee58b5dd","name":"log","source":"79f48822ee58b5dd.txt","type":"text/plain","size":3109},{"uid":"82b379bceb914ef7","name":"stdout","source":"82b379bceb914ef7.txt","type":"text/plain","size":2081}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":11,"attachmentsCount":3,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"d::0","time":{"start":1706569489842,"stop":1706569489998,"duration":156},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"epic","value":"US_11.02.02 | Education > Menu item [Indices trading]"},{"name":"feature","value":"Language: de"},{"name":"story","value":"Country: au / Role: NoAuth"},{"name":"tag","value":"test_12"},{"name":"tag","value":"us_11_02_06_01"},{"name":"parentSuite","value":"tests.US_11_Education.US_11-02-06_Indices_trading"},{"name":"suite","value":"us_11-02-06-01_indices_trading_test"},{"name":"subSuite","value":"TestIndicesTrading"},{"name":"host","value":"fv-az1433-899"},{"name":"thread","value":"30567-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.US_11_Education.US_11-02-06_Indices_trading.us_11-02-06-01_indices_trading_test"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"cur_country","value":"'au'"},{"name":"cur_item_link","value":"'https://capital.com/de/trade-cac'"},{"name":"cur_language","value":"'de'"},{"name":"cur_login","value":"'aqa.tomelo.an@gmail.com'"},{"name":"cur_password","value":"'iT9Vgqi6d$fiZ*Z'"},{"name":"cur_role","value":"'NoAuth'"},{"name":"d","value":"'Chrome'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["us_11_02_06_01","test_12"]},"source":"6d5af17112cb7585.json","parameterValues":["'au'","'https://capital.com/de/trade-cac'","'de'","'aqa.tomelo.an@gmail.com'","'iT9Vgqi6d$fiZ*Z'","'NoAuth'","'Chrome'"]}