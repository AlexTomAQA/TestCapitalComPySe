{"uid":"1b3c4012584a85f9","name":"TC_55!407 (Lang: en) | Bid:55!407-en.ae.Auth","fullName":"tests.US_55_ReTestsManual.artemdashkov.US_55-artemdashkov_ReTestsManual_test.TestManualDetected#test_407_articles_all_authors_present_on_the_daniela_hathorn_page","historyId":"0b3bc6964f13d0d36ac4931d5caaae03","time":{"start":1737414900127,"stop":1737414925178,"duration":25051},"description":"\n        Check:  Menu section [Markets] > Menu item [Market analysis] >\n                Find and click article of 'Daniela Hathorn' author >\n                Click the link 'Daniela Hathorn' >\n                Click any article on the 'Daniela Hathorn' page\n        Language: EN\n        License/Country: SCA\n        Role: NoReg, NoAuth, Auth\n        Author: Artem Dashkov\n        ","descriptionHtml":"<pre><code>    Check:  Menu section [Markets] &gt; Menu item [Market analysis] &gt;\n            Find and click article of 'Daniela Hathorn' author &gt;\n            Click the link 'Daniela Hathorn' &gt;\n            Click any article on the 'Daniela Hathorn' page\n    Language: EN\n    License/Country: SCA\n    Role: NoReg, NoAuth, Auth\n    Author: Artem Dashkov\n</code></pre>\n","status":"failed","statusMessage":"Failed: Bug # 407 Current author is not Daniela Hathorn. Current author is kyle rodda","statusTrace":"self = <US_55-artemdashkov_ReTestsManual_test.TestManualDetected object at 0x7fa6580ba870>\nworker_id = 'master'\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"5196e33853d45a1efee533477932725b\")>\ncur_language = '', cur_country = 'ae', cur_role = 'Auth'\ncur_login = 'test001.miketar+1@gmail.com', cur_password = 'Qwer1234-!@#$'\n\n    @allure.step(\"Start test authors of articles on the 'Daniela Hathorn' page\")\n    @pytest.mark.parametrize('cur_language', [\"\"])\n    @pytest.mark.parametrize('cur_country', ['ae'])\n    @pytest.mark.parametrize('cur_role', [\"NoReg\", \"Auth\", \"NoAuth\"])\n    @pytest.mark.bug_407\n    def test_407_articles_all_authors_present_on_the_daniela_hathorn_page(\n            self, worker_id, d, cur_language, cur_country, cur_role, cur_login, cur_password):\n        \"\"\"\n        Check:  Menu section [Markets] > Menu item [Market analysis] >\n                Find and click article of 'Daniela Hathorn' author >\n                Click the link 'Daniela Hathorn' >\n                Click any article on the 'Daniela Hathorn' page\n        Language: EN\n        License/Country: SCA\n        Role: NoReg, NoAuth, Auth\n        Author: Artem Dashkov\n        \"\"\"\n    \n        bid = build_dynamic_arg_for_us_55(\n            d, worker_id, cur_language, cur_country, cur_role,\n            \"55\", \"ReTests of Manual Detected Bugs\",\n            \"407\",\n            \"Menu section [Markets] > Menu item [Market analysis] > \"\n            \"Find and click article of 'Daniela Hathorn' author > \"\n            \"Click the link 'Daniela Hathorn' > \"\n            \"Click any article on the 'Daniela Hathorn' page\",\n            False, True\n        )\n        # pytest.skip(\"Промежуточная версия\")\n        # Arrange\n        cur_item_link = apply_preconditions_to_link(d, cur_language, cur_country,\n                                                    cur_role, cur_login, cur_password)\n    \n        page_menu = from_markets_menu_open_market_analysis.MenuNew(d, cur_item_link)\n        link = page_menu.from_markets_menu_open_market_analysis(\n            d, cur_language, cur_country, cur_item_link)\n    \n        test_element = BUG_407(d, link, bid)\n        test_element.arrange(d, link)\n    \n        # Act\n        test_element.act(d)\n    \n        # Assert\n>       test_element.assert_(d)\n\ntests/US_55_ReTestsManual/artemdashkov/US_55-artemdashkov_ReTestsManual_test.py:1164: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/BugsManual/bug_407.py:205: in assert_\n    Common().pytest_fail(f\"Bug # {BUG_NUMBER} {msg}\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmsg = 'Bug # 407 Current author is not Daniela Hathorn. Current author is kyle rodda'\n\n    @staticmethod\n    def pytest_fail(msg):\n    \tCommon.flag_of_bug = True\n>   \tpytest.fail(msg)\nE    Failed: Bug # 407 Current author is not Daniela Hathorn. Current author is kyle rodda\n\npages/common.py:235: Failed","flaky":true,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"d","time":{"start":1737412263645,"stop":1737412264283,"duration":638},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"worker_id","time":{"start":1737412264283,"stop":1737412264283,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_login","time":{"start":1737412264283,"stop":1737412264283,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_password","time":{"start":1737412264283,"stop":1737412264283,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"\n        Check:  Menu section [Markets] > Menu item [Market analysis] >\n                Find and click article of 'Daniela Hathorn' author >\n                Click the link 'Daniela Hathorn' >\n                Click any article on the 'Daniela Hathorn' page\n        Language: EN\n        License/Country: SCA\n        Role: NoReg, NoAuth, Auth\n        Author: Artem Dashkov\n        ","status":"failed","statusMessage":"Failed: Bug # 407 Current author is not Daniela Hathorn. Current author is kyle rodda","statusTrace":"self = <US_55-artemdashkov_ReTestsManual_test.TestManualDetected object at 0x7fa6580ba870>\nworker_id = 'master'\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"5196e33853d45a1efee533477932725b\")>\ncur_language = '', cur_country = 'ae', cur_role = 'Auth'\ncur_login = 'test001.miketar+1@gmail.com', cur_password = 'Qwer1234-!@#$'\n\n    @allure.step(\"Start test authors of articles on the 'Daniela Hathorn' page\")\n    @pytest.mark.parametrize('cur_language', [\"\"])\n    @pytest.mark.parametrize('cur_country', ['ae'])\n    @pytest.mark.parametrize('cur_role', [\"NoReg\", \"Auth\", \"NoAuth\"])\n    @pytest.mark.bug_407\n    def test_407_articles_all_authors_present_on_the_daniela_hathorn_page(\n            self, worker_id, d, cur_language, cur_country, cur_role, cur_login, cur_password):\n        \"\"\"\n        Check:  Menu section [Markets] > Menu item [Market analysis] >\n                Find and click article of 'Daniela Hathorn' author >\n                Click the link 'Daniela Hathorn' >\n                Click any article on the 'Daniela Hathorn' page\n        Language: EN\n        License/Country: SCA\n        Role: NoReg, NoAuth, Auth\n        Author: Artem Dashkov\n        \"\"\"\n    \n        bid = build_dynamic_arg_for_us_55(\n            d, worker_id, cur_language, cur_country, cur_role,\n            \"55\", \"ReTests of Manual Detected Bugs\",\n            \"407\",\n            \"Menu section [Markets] > Menu item [Market analysis] > \"\n            \"Find and click article of 'Daniela Hathorn' author > \"\n            \"Click the link 'Daniela Hathorn' > \"\n            \"Click any article on the 'Daniela Hathorn' page\",\n            False, True\n        )\n        # pytest.skip(\"Промежуточная версия\")\n        # Arrange\n        cur_item_link = apply_preconditions_to_link(d, cur_language, cur_country,\n                                                    cur_role, cur_login, cur_password)\n    \n        page_menu = from_markets_menu_open_market_analysis.MenuNew(d, cur_item_link)\n        link = page_menu.from_markets_menu_open_market_analysis(\n            d, cur_language, cur_country, cur_item_link)\n    \n        test_element = BUG_407(d, link, bid)\n        test_element.arrange(d, link)\n    \n        # Act\n        test_element.act(d)\n    \n        # Assert\n>       test_element.assert_(d)\n\ntests/US_55_ReTestsManual/artemdashkov/US_55-artemdashkov_ReTestsManual_test.py:1164: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/BugsManual/bug_407.py:205: in assert_\n    Common().pytest_fail(f\"Bug # {BUG_NUMBER} {msg}\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmsg = 'Bug # 407 Current author is not Daniela Hathorn. Current author is kyle rodda'\n\n    @staticmethod\n    def pytest_fail(msg):\n    \tCommon.flag_of_bug = True\n>   \tpytest.fail(msg)\nE    Failed: Bug # 407 Current author is not Daniela Hathorn. Current author is kyle rodda\n\npages/common.py:235: Failed","steps":[{"name":"Start test authors of articles on the 'Daniela Hathorn' page","time":{"start":1737414900127,"stop":1737414925177,"duration":25050},"status":"failed","statusMessage":"Failed: Bug # 407 Current author is not Daniela Hathorn. Current author is kyle rodda\n","statusTrace":"  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/tests/US_55_ReTestsManual/artemdashkov/US_55-artemdashkov_ReTestsManual_test.py\", line 1164, in test_407_articles_all_authors_present_on_the_daniela_hathorn_page\n    test_element.assert_(d)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/BugsManual/bug_407.py\", line 205, in assert_\n    Common().pytest_fail(f\"Bug # {BUG_NUMBER} {msg}\")\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/common.py\", line 235, in pytest_fail\n    pytest.fail(msg)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/_pytest/outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n","steps":[{"name":"Build dynamic argument for TCs of US_55","time":{"start":1737414900127,"stop":1737414900141,"duration":14},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"5196e33853d45a1efee533477932725b\")>"},{"name":"worker_id","value":"'master'"},{"name":"cur_language","value":"''"},{"name":"cur_country","value":"'ae'"},{"name":"cur_role","value":"'Auth'"},{"name":"us","value":"'55'"},{"name":"desc_us","value":"'ReTests of Manual Detected Bugs'"},{"name":"num_tc","value":"'407'"},{"name":"desc_tc","value":"'Menu section [Markets] > Menu item [Market analysis] > Find and click article of 'Daniela Hathorn' author > Click the link 'Daniela Hathorn' > Click any article on the 'Daniela Hathorn' page'"},{"name":"manual","value":"False"},{"name":"new_layout","value":"True"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"   Set New preconditions","time":{"start":1737414900141,"stop":1737414913154,"duration":13013},"status":"passed","steps":[{"name":"2025-01-20 22:31:03.593044   Start Authorization","time":{"start":1737414907702,"stop":1737414910742,"duration":3040},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"5196e33853d45a1efee533477932725b\")>"},{"name":"link","value":"'https://capital.com/en-gb'"},{"name":"login","value":"'test001.miketar+1@gmail.com'"},{"name":"password","value":"'Qwer1234-!@#$'"},{"name":"cur_role","value":"'Auth'"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"2025-01-20 22:31:03.593064   Set language and country","time":{"start":1737414910743,"stop":1737414913146,"duration":2403},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"5196e33853d45a1efee533477932725b\")>"},{"name":"cur_language","value":"'en'"},{"name":"cur_country","value":"'ae'"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"5196e33853d45a1efee533477932725b\")>"},{"name":"host","value":"'https://capital.com/en-gb'"},{"name":"end_point","value":"''"},{"name":"cur_language","value":"''"},{"name":"cur_country","value":"'ae'"},{"name":"cur_role","value":"'Auth'"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"}],"shouldDisplayMessage":false,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Select \"Markets\" menu, \"Market analysis\" submenu","time":{"start":1737414913154,"stop":1737414921355,"duration":8201},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"5196e33853d45a1efee533477932725b\")>"},{"name":"cur_language","value":"''"},{"name":"cur_country","value":"'ae'"},{"name":"link","value":"'https://capital.com/en-ae'"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"2025-01-20 22:31:03.573711   1. Start Arrange: find target article,choose and click article,find and click link 'Daniela Hathorn', choose any random article","time":{"start":1737414921355,"stop":1737414921766,"duration":411},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"5196e33853d45a1efee533477932725b\")>"},{"name":"link","value":"'https://capital.com/en-ae/analysis'"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"\n2025-01-20 22:31:03.573736   2. Start Act.","time":{"start":1737414921766,"stop":1737414925177,"duration":3411},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"5196e33853d45a1efee533477932725b\")>"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"2025-01-20 22:31:03.573750   3. Start Assert. Check author of articles","time":{"start":1737414925177,"stop":1737414925177,"duration":0},"status":"failed","statusMessage":"Failed: Bug # 407 Current author is not Daniela Hathorn. Current author is kyle rodda\n","statusTrace":"  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/BugsManual/bug_407.py\", line 205, in assert_\n    Common().pytest_fail(f\"Bug # {BUG_NUMBER} {msg}\")\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/common.py\", line 235, in pytest_fail\n    pytest.fail(msg)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/_pytest/outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"5196e33853d45a1efee533477932725b\")>"}],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"worker_id","value":"'master'"},{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"5196e33853d45a1efee533477932725b\")>"},{"name":"cur_language","value":"''"},{"name":"cur_country","value":"'ae'"},{"name":"cur_role","value":"'Auth'"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"}],"shouldDisplayMessage":false,"stepsCount":8,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"7ba3fc703e46cd47","name":"Screenshot","source":"7ba3fc703e46cd47.png","type":"image/png","size":354976},{"uid":"1c7debb001b8262","name":"stdout","source":"1c7debb001b8262.txt","type":"text/plain","size":7196}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":9,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"d::0","time":{"start":1737416255730,"stop":1737416256308,"duration":578},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"epic","value":"TC_55!407 | Menu section [Markets] > Menu item [Market analysis] > Find and click article of 'Daniela Hathorn' author > Click the link 'Daniela Hathorn' > Click any article on the 'Daniela Hathorn' page"},{"name":"feature","value":"Role: Auth"},{"name":"story","value":"Country: ae"},{"name":"tag","value":"bug_407"},{"name":"tag","value":"us_55"},{"name":"parentSuite","value":"tests.US_55_ReTestsManual.artemdashkov"},{"name":"suite","value":"US_55-artemdashkov_ReTestsManual_test"},{"name":"subSuite","value":"TestManualDetected"},{"name":"host","value":"fv-az1333-372"},{"name":"thread","value":"5710-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.US_55_ReTestsManual.artemdashkov.US_55-artemdashkov_ReTestsManual_test"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"cur_country","value":"'ae'"},{"name":"cur_language","value":"''"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"},{"name":"cur_role","value":"'Auth'"},{"name":"d","value":"'Chrome'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":77,"broken":0,"skipped":0,"passed":10,"unknown":0,"total":87},"items":[{"uid":"7289d6fb2e61c6da","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/294//#testresult/7289d6fb2e61c6da","status":"passed","time":{"start":1737329760213,"stop":1737329787372,"duration":27159}},{"uid":"6296df8afcdb588f","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/293//#testresult/6296df8afcdb588f","status":"failed","statusDetails":"Failed: Bug # 407 Current author is not Daniela Hathorn. Current author is kyle rodda","time":{"start":1737243299203,"stop":1737243323741,"duration":24538}},{"uid":"1ce45d3c0bc366b","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/292//#testresult/1ce45d3c0bc366b","status":"failed","statusDetails":"Failed: Bug # 407 Current author is not Daniela Hathorn. Current author is kyle rodda","time":{"start":1737156980945,"stop":1737157006590,"duration":25645}},{"uid":"518ca78d2cae52fa","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/291//#testresult/518ca78d2cae52fa","status":"passed","time":{"start":1737070470826,"stop":1737070495724,"duration":24898}},{"uid":"edbe5184d5b81724","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/290//#testresult/edbe5184d5b81724","status":"passed","time":{"start":1736983007065,"stop":1736983030557,"duration":23492}},{"uid":"86fc7f70b75220f7","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/289//#testresult/86fc7f70b75220f7","status":"failed","statusDetails":"Failed: Bug # 407 Current author is not Daniela Hathorn. Current author is kyle rodda","time":{"start":1736896506081,"stop":1736896530731,"duration":24650}},{"uid":"ca80fa7067ca1001","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/288//#testresult/ca80fa7067ca1001","status":"failed","statusDetails":"Failed: Bug # 407 Current author is not Daniela Hathorn. Current author is kyle rodda","time":{"start":1736810468845,"stop":1736810496656,"duration":27811}},{"uid":"8582134f6648d346","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/287//#testresult/8582134f6648d346","status":"failed","statusDetails":"Failed: Bug # 407 Current author is not Daniela Hathorn. Current author is kyle rodda","time":{"start":1736724802516,"stop":1736724826565,"duration":24049}},{"uid":"9ff6c010f8f0c908","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/286//#testresult/9ff6c010f8f0c908","status":"failed","statusDetails":"Failed: Bug # 407 Current author is not Daniela Hathorn. Current author is kyle rodda","time":{"start":1736637485556,"stop":1736637509355,"duration":23799}},{"uid":"fe95079c0f22ae93","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/285//#testresult/fe95079c0f22ae93","status":"failed","statusDetails":"Failed: Bug # 407 Current author is not Daniela Hathorn. Current author is kyle rodda","time":{"start":1736551035096,"stop":1736551059668,"duration":24572}},{"uid":"b4aac5b77e958e0b","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/284//#testresult/b4aac5b77e958e0b","status":"failed","statusDetails":"Failed: Bug # 407 Current author is not Daniela Hathorn. Current author is kyle rodda","time":{"start":1736464610562,"stop":1736464634727,"duration":24165}},{"uid":"1bd4e49fb9bc1b88","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/283//#testresult/1bd4e49fb9bc1b88","status":"passed","time":{"start":1736378235028,"stop":1736378258766,"duration":23738}},{"uid":"eba81d6b02af357b","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/282//#testresult/eba81d6b02af357b","status":"failed","statusDetails":"Failed: Bug # 407 Current author is not Daniela Hathorn. Current author is kyle rodda","time":{"start":1736293264520,"stop":1736293291487,"duration":26967}},{"uid":"cdcbbd80fa8c03d1","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/281//#testresult/cdcbbd80fa8c03d1","status":"failed","statusDetails":"Failed: Bug # 407 Current author is not Daniela Hathorn. Current author is kyle rodda","time":{"start":1736205616221,"stop":1736205640429,"duration":24208}},{"uid":"3850a0510cc50c19","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/280//#testresult/3850a0510cc50c19","status":"passed","time":{"start":1736119101020,"stop":1736119125137,"duration":24117}},{"uid":"e68ceb734c35ed4c","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/279//#testresult/e68ceb734c35ed4c","status":"failed","statusDetails":"Failed: Bug # 407 Current author is not Daniela Hathorn. Current author is kyle rodda","time":{"start":1736033263383,"stop":1736033287091,"duration":23708}},{"uid":"bb493f2cae590853","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/278//#testresult/bb493f2cae590853","status":"failed","statusDetails":"Failed: Bug # 407 Current author is not Daniela Hathorn. Current author is capital.com research team","time":{"start":1735946261655,"stop":1735946284834,"duration":23179}},{"uid":"f1359a9f52744e8c","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/277//#testresult/f1359a9f52744e8c","status":"failed","statusDetails":"Failed: Bug # 407 Current author is not Daniela Hathorn. Current author is kyle rodda","time":{"start":1735860605174,"stop":1735860633068,"duration":27894}},{"uid":"fd3a948a6a884267","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/276//#testresult/fd3a948a6a884267","status":"failed","statusDetails":"Failed: Bug # 407 Current author is not Daniela Hathorn. Current author is kyle rodda","time":{"start":1735773131176,"stop":1735773155443,"duration":24267}},{"uid":"214a2a7214ec75f4","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/275//#testresult/214a2a7214ec75f4","status":"failed","statusDetails":"Failed: Bug # 407 Current author is not Daniela Hathorn. Current author is kyle rodda","time":{"start":1735688095118,"stop":1735688118332,"duration":23214}}]},"tags":["bug_407","us_55"]},"source":"1b3c4012584a85f9.json","parameterValues":["'ae'","''","'test001.miketar+1@gmail.com'","'Qwer1234-!@#$'","'Auth'","'Chrome'"]}