{"uid":"90bdcf619448de67","name":"TC_55!411 (Lang: en) | Bid:55!411-en.gb.Auth","fullName":"tests.US_55_ReTestsManual.artemdashkov.US_55-artemdashkov_ReTestsManual_test.TestManualDetected#test_411_link_indices_on_page_what_is_cfd_trading","historyId":"ce1281dc64fd4c485b79330172150d4a","time":{"start":1743117414272,"stop":1743117420467,"duration":6195},"description":"\n        Check:  Menu section [Trading] >\n                Menu item [CFD trading] >\n                Scroll down to the block “Read more before you trade” >\n                Click link \"Go CFD trading guide\" >\n                Scroll down to the block \"What is a contract for difference (CFD)?\" /\n                Click link \"indices\"\n        Language: EN\n        License/Country: FCA\n        Role: NoReg, NoAuth, Auth\n        Author: Artem Dashkov\n        ","descriptionHtml":"<pre><code>    Check:  Menu section [Trading] &gt;\n            Menu item [CFD trading] &gt;\n            Scroll down to the block “Read more before you trade” &gt;\n            Click link &quot;Go CFD trading guide&quot; &gt;\n            Scroll down to the block &quot;What is a contract for difference (CFD)?&quot; /\n            Click link &quot;indices&quot;\n    Language: EN\n    License/Country: FCA\n    Role: NoReg, NoAuth, Auth\n    Author: Artem Dashkov\n</code></pre>\n","status":"failed","statusMessage":"Failed: Bug! 'Login' button is not clicked","statusTrace":"self = <pages.conditions_v2.NewConditions object at 0x7faccf1a2930>\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"99d1589a17beed480ab11928c6ac44fe\")>\nlink = 'https://capital.com/en-gb', login = 'test001.miketar+1@gmail.com'\npassword = 'Qwer1234-!@#$', cur_role = 'Auth'\n\n    @allure.step(f\"{datetime.now()}   Start Authorization\")\n    # @profile(precision=3)\n    def to_do_authorisation_new(self, d, link, login, password, cur_role):\n        \"\"\"Authorization\"\"\"\n        print(f\"\\n\" f\"{datetime.now()}   Start Authorization\")\n    \n        # Setup wait for later\n        menu = MainMenu(d, link)\n        assert login != \"\", \"Авторизация невозможна. Не указан e-mail\"\n        assert password != \"\", \"Авторизация невозможна. Не указан пароль\"\n    \n        # нажать в хедере на кнопку \"Log in\"\n        try:\n>           menu.element_is_clickable(menu.MENU_LOGIN).click()\n\npages/conditions_v2.py:237: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:380: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7faccf5ef500>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#21 0x5583f90dfe76 \\\\u003Cunknown>\\\\n#22 0x7f652e09caa4 \\\\u003Cunknown>\\\\n#23 0x7f652e129c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button class=\"accountBtns_btn__vOcCs accountBtns_btnEmpty__TCWRE helpers_showLg__UPEqH js-analyticsClick js-analyticsVisible\" data-type=\"btn_header_login\" data-testid=\"login_btn\">...</button> is not clickable at point (1385, 121). Other element would receive the click: <div class=\"modal_overlay__f_YlZ modal_mobileBottomAttached__cTOIu\">...</div>\nE         (Session info: chrome=134.0.6998.165)\nE       Stacktrace:\nE       #0 0x5583f90e0ffa <unknown>\nE       #1 0x5583f8b9f970 <unknown>\nE       #2 0x5583f8bf81ec <unknown>\nE       #3 0x5583f8bf6055 <unknown>\nE       #4 0x5583f8bf36f2 <unknown>\nE       #5 0x5583f8bf28ca <unknown>\nE       #6 0x5583f8be54cd <unknown>\nE       #7 0x5583f8c17292 <unknown>\nE       #8 0x5583f8be4e4a <unknown>\nE       #9 0x5583f8c1745e <unknown>\nE       #10 0x5583f8c3d70c <unknown>\nE       #11 0x5583f8c17063 <unknown>\nE       #12 0x5583f8be3328 <unknown>\nE       #13 0x5583f8be4491 <unknown>\nE       #14 0x5583f90a842b <unknown>\nE       #15 0x5583f90ac2ec <unknown>\nE       #16 0x5583f908fa22 <unknown>\nE       #17 0x5583f90ace64 <unknown>\nE       #18 0x5583f9073bef <unknown>\nE       #19 0x5583f90cf558 <unknown>\nE       #20 0x5583f90cf736 <unknown>\nE       #21 0x5583f90dfe76 <unknown>\nE       #22 0x7f652e09caa4 <unknown>\nE       #23 0x7f652e129c3c <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <US_55-artemdashkov_ReTestsManual_test.TestManualDetected object at 0x7faccf43d9a0>\nworker_id = 'master'\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"99d1589a17beed480ab11928c6ac44fe\")>\ncur_language = '', cur_country = 'gb', cur_role = 'Auth'\ncur_login = 'test001.miketar+1@gmail.com', cur_password = 'Qwer1234-!@#$'\n\n    @allure.step(\"Start test of link 'indices' on page 'What is CFD trading?'\")\n    @pytest.mark.parametrize('cur_language', [\"\"])\n    @pytest.mark.parametrize('cur_country', ['gb'])\n    @pytest.mark.parametrize('cur_role', [\"NoReg\", \"Auth\", \"NoAuth\"])\n    @pytest.mark.bug_411\n    def test_411_link_indices_on_page_what_is_cfd_trading(\n            self, worker_id, d, cur_language, cur_country, cur_role, cur_login, cur_password):\n        \"\"\"\n        Check:  Menu section [Trading] >\n                Menu item [CFD trading] >\n                Scroll down to the block “Read more before you trade” >\n                Click link \"Go CFD trading guide\" >\n                Scroll down to the block \"What is a contract for difference (CFD)?\" /\n                Click link \"indices\"\n        Language: EN\n        License/Country: FCA\n        Role: NoReg, NoAuth, Auth\n        Author: Artem Dashkov\n        \"\"\"\n    \n        bid = build_dynamic_arg_for_us_55(\n            d, worker_id, cur_language, cur_country, cur_role,\n            \"55\", \"ReTests of Manual Detected Bugs\",\n            \"411\",\n            \"Menu section [Trading] > Menu item [CFD trading] >\"\n            \"Scroll down to the block “Read more before you trade” > \"\n            \"Click link 'Go CFD trading guide' > \"\n            \"Scroll down to the block 'What is a contract for difference (CFD)?' > \"\n            \"Click link 'indices'\",\n            False, True\n        )\n        # Arrange\n        # pytest.skip(\"Intermediate version\")\n>       cur_item_link = apply_preconditions_to_link(d, cur_language, cur_country, cur_role, cur_login, cur_password)\n\ntests/US_55_ReTestsManual/artemdashkov/US_55-artemdashkov_ReTestsManual_test.py:1210: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/conditions_v2.py:78: in apply_preconditions_to_link\n    return cond.preconditions(d, CapitalComPageSrc.URL_NEW, '', cur_language, cur_country, cur_role,\npages/conditions_v2.py:152: in preconditions\n    self.to_do_authorisation_new(d, host, cur_login, cur_password, cur_role)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.conditions_v2.NewConditions object at 0x7faccf1a2930>\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"99d1589a17beed480ab11928c6ac44fe\")>\nlink = 'https://capital.com/en-gb', login = 'test001.miketar+1@gmail.com'\npassword = 'Qwer1234-!@#$', cur_role = 'Auth'\n\n    @allure.step(f\"{datetime.now()}   Start Authorization\")\n    # @profile(precision=3)\n    def to_do_authorisation_new(self, d, link, login, password, cur_role):\n        \"\"\"Authorization\"\"\"\n        print(f\"\\n\" f\"{datetime.now()}   Start Authorization\")\n    \n        # Setup wait for later\n        menu = MainMenu(d, link)\n        assert login != \"\", \"Авторизация невозможна. Не указан e-mail\"\n        assert password != \"\", \"Авторизация невозможна. Не указан пароль\"\n    \n        # нажать в хедере на кнопку \"Log in\"\n        try:\n            menu.element_is_clickable(menu.MENU_LOGIN).click()\n        except:\n>           pytest.fail(\"Bug! 'Login' button is not clicked\")\nE           Failed: Bug! 'Login' button is not clicked\n\npages/conditions_v2.py:239: Failed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"d","time":{"start":1743114854026,"stop":1743114854823,"duration":797},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_login","time":{"start":1743114854823,"stop":1743114854823,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"worker_id","time":{"start":1743114854823,"stop":1743114854823,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_password","time":{"start":1743114854823,"stop":1743114854823,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"\n        Check:  Menu section [Trading] >\n                Menu item [CFD trading] >\n                Scroll down to the block “Read more before you trade” >\n                Click link \"Go CFD trading guide\" >\n                Scroll down to the block \"What is a contract for difference (CFD)?\" /\n                Click link \"indices\"\n        Language: EN\n        License/Country: FCA\n        Role: NoReg, NoAuth, Auth\n        Author: Artem Dashkov\n        ","status":"failed","statusMessage":"Failed: Bug! 'Login' button is not clicked","statusTrace":"self = <pages.conditions_v2.NewConditions object at 0x7faccf1a2930>\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"99d1589a17beed480ab11928c6ac44fe\")>\nlink = 'https://capital.com/en-gb', login = 'test001.miketar+1@gmail.com'\npassword = 'Qwer1234-!@#$', cur_role = 'Auth'\n\n    @allure.step(f\"{datetime.now()}   Start Authorization\")\n    # @profile(precision=3)\n    def to_do_authorisation_new(self, d, link, login, password, cur_role):\n        \"\"\"Authorization\"\"\"\n        print(f\"\\n\" f\"{datetime.now()}   Start Authorization\")\n    \n        # Setup wait for later\n        menu = MainMenu(d, link)\n        assert login != \"\", \"Авторизация невозможна. Не указан e-mail\"\n        assert password != \"\", \"Авторизация невозможна. Не указан пароль\"\n    \n        # нажать в хедере на кнопку \"Log in\"\n        try:\n>           menu.element_is_clickable(menu.MENU_LOGIN).click()\n\npages/conditions_v2.py:237: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:380: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7faccf5ef500>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#21 0x5583f90dfe76 \\\\u003Cunknown>\\\\n#22 0x7f652e09caa4 \\\\u003Cunknown>\\\\n#23 0x7f652e129c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button class=\"accountBtns_btn__vOcCs accountBtns_btnEmpty__TCWRE helpers_showLg__UPEqH js-analyticsClick js-analyticsVisible\" data-type=\"btn_header_login\" data-testid=\"login_btn\">...</button> is not clickable at point (1385, 121). Other element would receive the click: <div class=\"modal_overlay__f_YlZ modal_mobileBottomAttached__cTOIu\">...</div>\nE         (Session info: chrome=134.0.6998.165)\nE       Stacktrace:\nE       #0 0x5583f90e0ffa <unknown>\nE       #1 0x5583f8b9f970 <unknown>\nE       #2 0x5583f8bf81ec <unknown>\nE       #3 0x5583f8bf6055 <unknown>\nE       #4 0x5583f8bf36f2 <unknown>\nE       #5 0x5583f8bf28ca <unknown>\nE       #6 0x5583f8be54cd <unknown>\nE       #7 0x5583f8c17292 <unknown>\nE       #8 0x5583f8be4e4a <unknown>\nE       #9 0x5583f8c1745e <unknown>\nE       #10 0x5583f8c3d70c <unknown>\nE       #11 0x5583f8c17063 <unknown>\nE       #12 0x5583f8be3328 <unknown>\nE       #13 0x5583f8be4491 <unknown>\nE       #14 0x5583f90a842b <unknown>\nE       #15 0x5583f90ac2ec <unknown>\nE       #16 0x5583f908fa22 <unknown>\nE       #17 0x5583f90ace64 <unknown>\nE       #18 0x5583f9073bef <unknown>\nE       #19 0x5583f90cf558 <unknown>\nE       #20 0x5583f90cf736 <unknown>\nE       #21 0x5583f90dfe76 <unknown>\nE       #22 0x7f652e09caa4 <unknown>\nE       #23 0x7f652e129c3c <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <US_55-artemdashkov_ReTestsManual_test.TestManualDetected object at 0x7faccf43d9a0>\nworker_id = 'master'\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"99d1589a17beed480ab11928c6ac44fe\")>\ncur_language = '', cur_country = 'gb', cur_role = 'Auth'\ncur_login = 'test001.miketar+1@gmail.com', cur_password = 'Qwer1234-!@#$'\n\n    @allure.step(\"Start test of link 'indices' on page 'What is CFD trading?'\")\n    @pytest.mark.parametrize('cur_language', [\"\"])\n    @pytest.mark.parametrize('cur_country', ['gb'])\n    @pytest.mark.parametrize('cur_role', [\"NoReg\", \"Auth\", \"NoAuth\"])\n    @pytest.mark.bug_411\n    def test_411_link_indices_on_page_what_is_cfd_trading(\n            self, worker_id, d, cur_language, cur_country, cur_role, cur_login, cur_password):\n        \"\"\"\n        Check:  Menu section [Trading] >\n                Menu item [CFD trading] >\n                Scroll down to the block “Read more before you trade” >\n                Click link \"Go CFD trading guide\" >\n                Scroll down to the block \"What is a contract for difference (CFD)?\" /\n                Click link \"indices\"\n        Language: EN\n        License/Country: FCA\n        Role: NoReg, NoAuth, Auth\n        Author: Artem Dashkov\n        \"\"\"\n    \n        bid = build_dynamic_arg_for_us_55(\n            d, worker_id, cur_language, cur_country, cur_role,\n            \"55\", \"ReTests of Manual Detected Bugs\",\n            \"411\",\n            \"Menu section [Trading] > Menu item [CFD trading] >\"\n            \"Scroll down to the block “Read more before you trade” > \"\n            \"Click link 'Go CFD trading guide' > \"\n            \"Scroll down to the block 'What is a contract for difference (CFD)?' > \"\n            \"Click link 'indices'\",\n            False, True\n        )\n        # Arrange\n        # pytest.skip(\"Intermediate version\")\n>       cur_item_link = apply_preconditions_to_link(d, cur_language, cur_country, cur_role, cur_login, cur_password)\n\ntests/US_55_ReTestsManual/artemdashkov/US_55-artemdashkov_ReTestsManual_test.py:1210: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/conditions_v2.py:78: in apply_preconditions_to_link\n    return cond.preconditions(d, CapitalComPageSrc.URL_NEW, '', cur_language, cur_country, cur_role,\npages/conditions_v2.py:152: in preconditions\n    self.to_do_authorisation_new(d, host, cur_login, cur_password, cur_role)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.conditions_v2.NewConditions object at 0x7faccf1a2930>\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"99d1589a17beed480ab11928c6ac44fe\")>\nlink = 'https://capital.com/en-gb', login = 'test001.miketar+1@gmail.com'\npassword = 'Qwer1234-!@#$', cur_role = 'Auth'\n\n    @allure.step(f\"{datetime.now()}   Start Authorization\")\n    # @profile(precision=3)\n    def to_do_authorisation_new(self, d, link, login, password, cur_role):\n        \"\"\"Authorization\"\"\"\n        print(f\"\\n\" f\"{datetime.now()}   Start Authorization\")\n    \n        # Setup wait for later\n        menu = MainMenu(d, link)\n        assert login != \"\", \"Авторизация невозможна. Не указан e-mail\"\n        assert password != \"\", \"Авторизация невозможна. Не указан пароль\"\n    \n        # нажать в хедере на кнопку \"Log in\"\n        try:\n            menu.element_is_clickable(menu.MENU_LOGIN).click()\n        except:\n>           pytest.fail(\"Bug! 'Login' button is not clicked\")\nE           Failed: Bug! 'Login' button is not clicked\n\npages/conditions_v2.py:239: Failed","steps":[{"name":"Start test of link 'indices' on page 'What is CFD trading?'","time":{"start":1743117414272,"stop":1743117420467,"duration":6195},"status":"failed","statusMessage":"Failed: Bug! 'Login' button is not clicked\n","statusTrace":"  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/tests/US_55_ReTestsManual/artemdashkov/US_55-artemdashkov_ReTestsManual_test.py\", line 1210, in test_411_link_indices_on_page_what_is_cfd_trading\n    cur_item_link = apply_preconditions_to_link(d, cur_language, cur_country, cur_role, cur_login, cur_password)\n                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/conditions_v2.py\", line 78, in apply_preconditions_to_link\n    return cond.preconditions(d, CapitalComPageSrc.URL_NEW, '', cur_language, cur_country, cur_role,\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/conditions_v2.py\", line 152, in preconditions\n    self.to_do_authorisation_new(d, host, cur_login, cur_password, cur_role)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/conditions_v2.py\", line 239, in to_do_authorisation_new\n    pytest.fail(\"Bug! 'Login' button is not clicked\")\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/_pytest/outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n","steps":[{"name":"Build dynamic argument for TCs of US_55","time":{"start":1743117414272,"stop":1743117414274,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"99d1589a17beed480ab11928c6ac44fe\")>"},{"name":"worker_id","value":"'master'"},{"name":"cur_language","value":"''"},{"name":"cur_country","value":"'gb'"},{"name":"cur_role","value":"'Auth'"},{"name":"us","value":"'55'"},{"name":"desc_us","value":"'ReTests of Manual Detected Bugs'"},{"name":"num_tc","value":"'411'"},{"name":"desc_tc","value":"'Menu section [Trading] > Menu item [CFD trading] >Scroll down to the block “Read more before you trade” > Click link 'Go CFD trading guide' > Scroll down to the block 'What is a contract for difference (CFD)?' > Click link 'indices''"},{"name":"manual","value":"False"},{"name":"new_layout","value":"True"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"   Set New preconditions","time":{"start":1743117414274,"stop":1743117420466,"duration":6192},"status":"failed","statusMessage":"Failed: Bug! 'Login' button is not clicked\n","statusTrace":"  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/conditions_v2.py\", line 152, in preconditions\n    self.to_do_authorisation_new(d, host, cur_login, cur_password, cur_role)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/conditions_v2.py\", line 239, in to_do_authorisation_new\n    pytest.fail(\"Bug! 'Login' button is not clicked\")\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/_pytest/outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n","steps":[{"name":"2025-03-27 22:34:13.968883   Start Authorization","time":{"start":1743117419388,"stop":1743117420466,"duration":1078},"status":"failed","statusMessage":"Failed: Bug! 'Login' button is not clicked\n","statusTrace":"  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/conditions_v2.py\", line 239, in to_do_authorisation_new\n    pytest.fail(\"Bug! 'Login' button is not clicked\")\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/_pytest/outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"99d1589a17beed480ab11928c6ac44fe\")>"},{"name":"link","value":"'https://capital.com/en-gb'"},{"name":"login","value":"'test001.miketar+1@gmail.com'"},{"name":"password","value":"'Qwer1234-!@#$'"},{"name":"cur_role","value":"'Auth'"}],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"99d1589a17beed480ab11928c6ac44fe\")>"},{"name":"host","value":"'https://capital.com/en-gb'"},{"name":"end_point","value":"''"},{"name":"cur_language","value":"''"},{"name":"cur_country","value":"'gb'"},{"name":"cur_role","value":"'Auth'"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"}],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"worker_id","value":"'master'"},{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"99d1589a17beed480ab11928c6ac44fe\")>"},{"name":"cur_language","value":"''"},{"name":"cur_country","value":"'gb'"},{"name":"cur_role","value":"'Auth'"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"}],"shouldDisplayMessage":false,"stepsCount":3,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"53fabe9b58703932","name":"Screenshot","source":"53fabe9b58703932.png","type":"image/png","size":611008},{"uid":"47dc67f2c229fdff","name":"stdout","source":"47dc67f2c229fdff.txt","type":"text/plain","size":1958}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"d::0","time":{"start":1743118022238,"stop":1743118022628,"duration":390},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"epic","value":"TC_55!411 | Menu section [Trading] > Menu item [CFD trading] >Scroll down to the block “Read more before you trade” > Click link 'Go CFD trading guide' > Scroll down to the block 'What is a contract for difference (CFD)?' > Click link 'indices'"},{"name":"feature","value":"Role: Auth"},{"name":"story","value":"Country: gb"},{"name":"tag","value":"bug_411"},{"name":"tag","value":"us_55"},{"name":"parentSuite","value":"tests.US_55_ReTestsManual.artemdashkov"},{"name":"suite","value":"US_55-artemdashkov_ReTestsManual_test"},{"name":"subSuite","value":"TestManualDetected"},{"name":"host","value":"fv-az1945-274"},{"name":"thread","value":"5463-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.US_55_ReTestsManual.artemdashkov.US_55-artemdashkov_ReTestsManual_test"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"cur_country","value":"'gb'"},{"name":"cur_language","value":"''"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"},{"name":"cur_role","value":"'Auth'"},{"name":"d","value":"'Chrome'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":20,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":20},"items":[{"uid":"47b0c0756868e316","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/360//#testresult/47b0c0756868e316","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1743030289768,"stop":1743030295747,"duration":5979}},{"uid":"261c8b33a8e87277","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/359//#testresult/261c8b33a8e87277","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742943811185,"stop":1742943817013,"duration":5828}},{"uid":"dd5bc929fd41439a","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/358//#testresult/dd5bc929fd41439a","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742857324459,"stop":1742857330462,"duration":6003}},{"uid":"ae8a419106d66842","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/357//#testresult/ae8a419106d66842","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742771252349,"stop":1742771258400,"duration":6051}},{"uid":"37609c1ae69da06","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/356//#testresult/37609c1ae69da06","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742685198303,"stop":1742685204194,"duration":5891}},{"uid":"68bef9258728729d","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/355//#testresult/68bef9258728729d","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742598917514,"stop":1742598923648,"duration":6134}},{"uid":"e515ad65cd5b75e3","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/354//#testresult/e515ad65cd5b75e3","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742511508695,"stop":1742511514546,"duration":5851}},{"uid":"be741a4d8a855265","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/353//#testresult/be741a4d8a855265","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742425034591,"stop":1742425040594,"duration":6003}},{"uid":"d7e00eef076e9491","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/352//#testresult/d7e00eef076e9491","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742338183136,"stop":1742338189171,"duration":6035}},{"uid":"8ca38911772b2680","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/351//#testresult/8ca38911772b2680","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742253521366,"stop":1742253527477,"duration":6111}},{"uid":"83d306f4fcc979a7","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/350//#testresult/83d306f4fcc979a7","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742166896099,"stop":1742166901942,"duration":5843}},{"uid":"1aee207b0405d3bf","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/349//#testresult/1aee207b0405d3bf","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742080784741,"stop":1742080790911,"duration":6170}},{"uid":"23fd5fa3b8b6d36b","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/348//#testresult/23fd5fa3b8b6d36b","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1741993277752,"stop":1741993283832,"duration":6080}},{"uid":"7f39b80c5539b92a","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/347//#testresult/7f39b80c5539b92a","status":"failed","statusDetails":"Failed: Page don't have link 'indices' in DOM","time":{"start":1741908509638,"stop":1741908535468,"duration":25830}},{"uid":"6f0cd173731ac719","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/346//#testresult/6f0cd173731ac719","status":"failed","statusDetails":"Failed: Page don't have link 'indices' in DOM","time":{"start":1741821522172,"stop":1741821549147,"duration":26975}},{"uid":"f6366c5dfc0f0f02","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/345//#testresult/f6366c5dfc0f0f02","status":"failed","statusDetails":"Failed: Page don't have link 'indices' in DOM","time":{"start":1741734801287,"stop":1741734828683,"duration":27396}},{"uid":"de4e7a6d6bba866a","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/344//#testresult/de4e7a6d6bba866a","status":"failed","statusDetails":"Failed: Page don't have link 'indices' in DOM","time":{"start":1741648937461,"stop":1741648964529,"duration":27068}},{"uid":"3f7dc45405e9c229","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/343//#testresult/3f7dc45405e9c229","status":"failed","statusDetails":"Failed: Page don't have link 'indices' in DOM","time":{"start":1741562819009,"stop":1741562845351,"duration":26342}},{"uid":"4b685ba0a8eb1baa","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/342//#testresult/4b685ba0a8eb1baa","status":"failed","statusDetails":"Failed: Page don't have link 'indices' in DOM","time":{"start":1741475326562,"stop":1741475352610,"duration":26048}}]},"tags":["us_55","bug_411"]},"source":"90bdcf619448de67.json","parameterValues":["'gb'","''","'test001.miketar+1@gmail.com'","'Qwer1234-!@#$'","'Auth'","'Chrome'"]}