{"uid":"14c9fd61a1b69948","name":"TC_55!516 (Lang: en) | Bid:55!516-en.au.Auth","fullName":"tests.US_55_ReTestsManual.K_Alex_N.US_55_K_Alex_N_ReTestsManual_test.TestManualDetectedBugs#test_516","historyId":"b55a9d8dbbb3634a2e61a020dd432b99","time":{"start":1743123454493,"stop":1743123460201,"duration":5708},"description":"\n         Check: Menu section [Markets] > \n                Menu item [Markets analysis] > \n                article \"The graph (GRT) price prediction..\" > \n                Click on the [collapse] link\n         Language: EN\n         License: ASIC\n         Author: Aleksei Kurochkin\n         ","descriptionHtml":"<pre><code>     Check: Menu section [Markets] &gt; \n            Menu item [Markets analysis] &gt; \n            article &quot;The graph (GRT) price prediction..&quot; &gt; \n            Click on the [collapse] link\n     Language: EN\n     License: ASIC\n     Author: Aleksei Kurochkin\n</code></pre>\n","status":"failed","statusMessage":"Failed: Bug! 'Login' button is not clicked","statusTrace":"self = <pages.conditions_v2.NewConditions object at 0x7f4cd9f57e60>\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"7caff77c8773cb6da17c387aa48978d1\")>\nlink = 'https://capital.com/en-gb', login = 'test001.miketar+1@gmail.com'\npassword = 'Qwer1234-!@#$', cur_role = 'Auth'\n\n    @allure.step(f\"{datetime.now()}   Start Authorization\")\n    # @profile(precision=3)\n    def to_do_authorisation_new(self, d, link, login, password, cur_role):\n        \"\"\"Authorization\"\"\"\n        print(f\"\\n\" f\"{datetime.now()}   Start Authorization\")\n    \n        # Setup wait for later\n        menu = MainMenu(d, link)\n        assert login != \"\", \"Авторизация невозможна. Не указан e-mail\"\n        assert password != \"\", \"Авторизация невозможна. Не указан пароль\"\n    \n        # нажать в хедере на кнопку \"Log in\"\n        try:\n>           menu.element_is_clickable(menu.MENU_LOGIN).click()\n\npages/conditions_v2.py:237: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:380: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f4cd9e74e90>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#21 0x5598e75dee76 \\\\u003Cunknown>\\\\n#22 0x7f59c3a9caa4 \\\\u003Cunknown>\\\\n#23 0x7f59c3b29c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button class=\"accountBtns_btn__vOcCs accountBtns_btnEmpty__TCWRE helpers_showLg__UPEqH js-analyticsClick js-analyticsVisible\" data-type=\"btn_header_login\" data-testid=\"login_btn\">...</button> is not clickable at point (1385, 121). Other element would receive the click: <div class=\"modal_overlay__f_YlZ modal_mobileBottomAttached__cTOIu\">...</div>\nE         (Session info: chrome=134.0.6998.165)\nE       Stacktrace:\nE       #0 0x5598e75dfffa <unknown>\nE       #1 0x5598e709e970 <unknown>\nE       #2 0x5598e70f71ec <unknown>\nE       #3 0x5598e70f5055 <unknown>\nE       #4 0x5598e70f26f2 <unknown>\nE       #5 0x5598e70f18ca <unknown>\nE       #6 0x5598e70e44cd <unknown>\nE       #7 0x5598e7116292 <unknown>\nE       #8 0x5598e70e3e4a <unknown>\nE       #9 0x5598e711645e <unknown>\nE       #10 0x5598e713c70c <unknown>\nE       #11 0x5598e7116063 <unknown>\nE       #12 0x5598e70e2328 <unknown>\nE       #13 0x5598e70e3491 <unknown>\nE       #14 0x5598e75a742b <unknown>\nE       #15 0x5598e75ab2ec <unknown>\nE       #16 0x5598e758ea22 <unknown>\nE       #17 0x5598e75abe64 <unknown>\nE       #18 0x5598e7572bef <unknown>\nE       #19 0x5598e75ce558 <unknown>\nE       #20 0x5598e75ce736 <unknown>\nE       #21 0x5598e75dee76 <unknown>\nE       #22 0x7f59c3a9caa4 <unknown>\nE       #23 0x7f59c3b29c3c <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <US_55_K_Alex_N_ReTestsManual_test.TestManualDetectedBugs object at 0x7f4cda046e40>\nworker_id = 'master'\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"7caff77c8773cb6da17c387aa48978d1\")>\ncur_language = '', cur_country = 'au', cur_role = 'Auth'\ncur_login = 'test001.miketar+1@gmail.com', cur_password = 'Qwer1234-!@#$'\n\n    @pytest.mark.parametrize('cur_language', [''])\n    @pytest.mark.parametrize('cur_country', ['au'])\n    @pytest.mark.parametrize('cur_role', random.sample(['Auth', 'NoAuth', 'NoReg'], 1))\n    def test_516(self, worker_id, d, cur_language, cur_country, cur_role, cur_login, cur_password):\n        \"\"\"\n         Check: Menu section [Markets] >\n                Menu item [Markets analysis] >\n                article \"The graph (GRT) price prediction..\" >\n                Click on the [collapse] link\n         Language: EN\n         License: ASIC\n         Author: Aleksei Kurochkin\n         \"\"\"\n        test = self\n        self.cur_language = cur_language\n        self.cur_country = cur_country\n        self.driver = d\n    \n        self.bid = build_dynamic_arg_for_us_55(\n            d, worker_id, cur_language, cur_country, cur_role,\n            \"55\", \"ReTests of Manual Detected Bugs\",\n            \"516\",\n            'Menu section [Markets] > Menu item [Markets analysis] > '\n            'article \"The graph (GRT) price prediction..\" > Click on the [collapse] link',\n            False,\n            False\n        )\n    \n        # Arrange\n>       self.link = apply_preconditions_to_link(d, cur_language, cur_country, cur_role, cur_login, cur_password)\n\ntests/US_55_ReTestsManual/K_Alex_N/US_55_K_Alex_N_ReTestsManual_test.py:417: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/conditions_v2.py:78: in apply_preconditions_to_link\n    return cond.preconditions(d, CapitalComPageSrc.URL_NEW, '', cur_language, cur_country, cur_role,\npages/conditions_v2.py:152: in preconditions\n    self.to_do_authorisation_new(d, host, cur_login, cur_password, cur_role)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.conditions_v2.NewConditions object at 0x7f4cd9f57e60>\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"7caff77c8773cb6da17c387aa48978d1\")>\nlink = 'https://capital.com/en-gb', login = 'test001.miketar+1@gmail.com'\npassword = 'Qwer1234-!@#$', cur_role = 'Auth'\n\n    @allure.step(f\"{datetime.now()}   Start Authorization\")\n    # @profile(precision=3)\n    def to_do_authorisation_new(self, d, link, login, password, cur_role):\n        \"\"\"Authorization\"\"\"\n        print(f\"\\n\" f\"{datetime.now()}   Start Authorization\")\n    \n        # Setup wait for later\n        menu = MainMenu(d, link)\n        assert login != \"\", \"Авторизация невозможна. Не указан e-mail\"\n        assert password != \"\", \"Авторизация невозможна. Не указан пароль\"\n    \n        # нажать в хедере на кнопку \"Log in\"\n        try:\n            menu.element_is_clickable(menu.MENU_LOGIN).click()\n        except:\n>           pytest.fail(\"Bug! 'Login' button is not clicked\")\nE           Failed: Bug! 'Login' button is not clicked\n\npages/conditions_v2.py:239: Failed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"d","time":{"start":1743123275531,"stop":1743123276318,"duration":787},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"worker_id","time":{"start":1743123276318,"stop":1743123276319,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_password","time":{"start":1743123358413,"stop":1743123358413,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_login","time":{"start":1743123358413,"stop":1743123358413,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"\n         Check: Menu section [Markets] > \n                Menu item [Markets analysis] > \n                article \"The graph (GRT) price prediction..\" > \n                Click on the [collapse] link\n         Language: EN\n         License: ASIC\n         Author: Aleksei Kurochkin\n         ","status":"failed","statusMessage":"Failed: Bug! 'Login' button is not clicked","statusTrace":"self = <pages.conditions_v2.NewConditions object at 0x7f4cd9f57e60>\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"7caff77c8773cb6da17c387aa48978d1\")>\nlink = 'https://capital.com/en-gb', login = 'test001.miketar+1@gmail.com'\npassword = 'Qwer1234-!@#$', cur_role = 'Auth'\n\n    @allure.step(f\"{datetime.now()}   Start Authorization\")\n    # @profile(precision=3)\n    def to_do_authorisation_new(self, d, link, login, password, cur_role):\n        \"\"\"Authorization\"\"\"\n        print(f\"\\n\" f\"{datetime.now()}   Start Authorization\")\n    \n        # Setup wait for later\n        menu = MainMenu(d, link)\n        assert login != \"\", \"Авторизация невозможна. Не указан e-mail\"\n        assert password != \"\", \"Авторизация невозможна. Не указан пароль\"\n    \n        # нажать в хедере на кнопку \"Log in\"\n        try:\n>           menu.element_is_clickable(menu.MENU_LOGIN).click()\n\npages/conditions_v2.py:237: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:380: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f4cd9e74e90>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#21 0x5598e75dee76 \\\\u003Cunknown>\\\\n#22 0x7f59c3a9caa4 \\\\u003Cunknown>\\\\n#23 0x7f59c3b29c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button class=\"accountBtns_btn__vOcCs accountBtns_btnEmpty__TCWRE helpers_showLg__UPEqH js-analyticsClick js-analyticsVisible\" data-type=\"btn_header_login\" data-testid=\"login_btn\">...</button> is not clickable at point (1385, 121). Other element would receive the click: <div class=\"modal_overlay__f_YlZ modal_mobileBottomAttached__cTOIu\">...</div>\nE         (Session info: chrome=134.0.6998.165)\nE       Stacktrace:\nE       #0 0x5598e75dfffa <unknown>\nE       #1 0x5598e709e970 <unknown>\nE       #2 0x5598e70f71ec <unknown>\nE       #3 0x5598e70f5055 <unknown>\nE       #4 0x5598e70f26f2 <unknown>\nE       #5 0x5598e70f18ca <unknown>\nE       #6 0x5598e70e44cd <unknown>\nE       #7 0x5598e7116292 <unknown>\nE       #8 0x5598e70e3e4a <unknown>\nE       #9 0x5598e711645e <unknown>\nE       #10 0x5598e713c70c <unknown>\nE       #11 0x5598e7116063 <unknown>\nE       #12 0x5598e70e2328 <unknown>\nE       #13 0x5598e70e3491 <unknown>\nE       #14 0x5598e75a742b <unknown>\nE       #15 0x5598e75ab2ec <unknown>\nE       #16 0x5598e758ea22 <unknown>\nE       #17 0x5598e75abe64 <unknown>\nE       #18 0x5598e7572bef <unknown>\nE       #19 0x5598e75ce558 <unknown>\nE       #20 0x5598e75ce736 <unknown>\nE       #21 0x5598e75dee76 <unknown>\nE       #22 0x7f59c3a9caa4 <unknown>\nE       #23 0x7f59c3b29c3c <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <US_55_K_Alex_N_ReTestsManual_test.TestManualDetectedBugs object at 0x7f4cda046e40>\nworker_id = 'master'\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"7caff77c8773cb6da17c387aa48978d1\")>\ncur_language = '', cur_country = 'au', cur_role = 'Auth'\ncur_login = 'test001.miketar+1@gmail.com', cur_password = 'Qwer1234-!@#$'\n\n    @pytest.mark.parametrize('cur_language', [''])\n    @pytest.mark.parametrize('cur_country', ['au'])\n    @pytest.mark.parametrize('cur_role', random.sample(['Auth', 'NoAuth', 'NoReg'], 1))\n    def test_516(self, worker_id, d, cur_language, cur_country, cur_role, cur_login, cur_password):\n        \"\"\"\n         Check: Menu section [Markets] >\n                Menu item [Markets analysis] >\n                article \"The graph (GRT) price prediction..\" >\n                Click on the [collapse] link\n         Language: EN\n         License: ASIC\n         Author: Aleksei Kurochkin\n         \"\"\"\n        test = self\n        self.cur_language = cur_language\n        self.cur_country = cur_country\n        self.driver = d\n    \n        self.bid = build_dynamic_arg_for_us_55(\n            d, worker_id, cur_language, cur_country, cur_role,\n            \"55\", \"ReTests of Manual Detected Bugs\",\n            \"516\",\n            'Menu section [Markets] > Menu item [Markets analysis] > '\n            'article \"The graph (GRT) price prediction..\" > Click on the [collapse] link',\n            False,\n            False\n        )\n    \n        # Arrange\n>       self.link = apply_preconditions_to_link(d, cur_language, cur_country, cur_role, cur_login, cur_password)\n\ntests/US_55_ReTestsManual/K_Alex_N/US_55_K_Alex_N_ReTestsManual_test.py:417: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/conditions_v2.py:78: in apply_preconditions_to_link\n    return cond.preconditions(d, CapitalComPageSrc.URL_NEW, '', cur_language, cur_country, cur_role,\npages/conditions_v2.py:152: in preconditions\n    self.to_do_authorisation_new(d, host, cur_login, cur_password, cur_role)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.conditions_v2.NewConditions object at 0x7f4cd9f57e60>\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"7caff77c8773cb6da17c387aa48978d1\")>\nlink = 'https://capital.com/en-gb', login = 'test001.miketar+1@gmail.com'\npassword = 'Qwer1234-!@#$', cur_role = 'Auth'\n\n    @allure.step(f\"{datetime.now()}   Start Authorization\")\n    # @profile(precision=3)\n    def to_do_authorisation_new(self, d, link, login, password, cur_role):\n        \"\"\"Authorization\"\"\"\n        print(f\"\\n\" f\"{datetime.now()}   Start Authorization\")\n    \n        # Setup wait for later\n        menu = MainMenu(d, link)\n        assert login != \"\", \"Авторизация невозможна. Не указан e-mail\"\n        assert password != \"\", \"Авторизация невозможна. Не указан пароль\"\n    \n        # нажать в хедере на кнопку \"Log in\"\n        try:\n            menu.element_is_clickable(menu.MENU_LOGIN).click()\n        except:\n>           pytest.fail(\"Bug! 'Login' button is not clicked\")\nE           Failed: Bug! 'Login' button is not clicked\n\npages/conditions_v2.py:239: Failed","steps":[{"name":"Build dynamic argument for TCs of US_55","time":{"start":1743123454494,"stop":1743123454495,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"7caff77c8773cb6da17c387aa48978d1\")>"},{"name":"worker_id","value":"'master'"},{"name":"cur_language","value":"''"},{"name":"cur_country","value":"'au'"},{"name":"cur_role","value":"'Auth'"},{"name":"us","value":"'55'"},{"name":"desc_us","value":"'ReTests of Manual Detected Bugs'"},{"name":"num_tc","value":"'516'"},{"name":"desc_tc","value":"'Menu section [Markets] > Menu item [Markets analysis] > article \"The graph (GRT) price prediction..\" > Click on the [collapse] link'"},{"name":"manual","value":"False"},{"name":"new_layout","value":"False"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"   Set New preconditions","time":{"start":1743123454496,"stop":1743123460200,"duration":5704},"status":"failed","statusMessage":"Failed: Bug! 'Login' button is not clicked\n","statusTrace":"  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/conditions_v2.py\", line 152, in preconditions\n    self.to_do_authorisation_new(d, host, cur_login, cur_password, cur_role)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/conditions_v2.py\", line 239, in to_do_authorisation_new\n    pytest.fail(\"Bug! 'Login' button is not clicked\")\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/_pytest/outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n","steps":[{"name":"2025-03-28 00:54:35.513214   Start Authorization","time":{"start":1743123459145,"stop":1743123460200,"duration":1055},"status":"failed","statusMessage":"Failed: Bug! 'Login' button is not clicked\n","statusTrace":"  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/conditions_v2.py\", line 239, in to_do_authorisation_new\n    pytest.fail(\"Bug! 'Login' button is not clicked\")\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/_pytest/outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"7caff77c8773cb6da17c387aa48978d1\")>"},{"name":"link","value":"'https://capital.com/en-gb'"},{"name":"login","value":"'test001.miketar+1@gmail.com'"},{"name":"password","value":"'Qwer1234-!@#$'"},{"name":"cur_role","value":"'Auth'"}],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"7caff77c8773cb6da17c387aa48978d1\")>"},{"name":"host","value":"'https://capital.com/en-gb'"},{"name":"end_point","value":"''"},{"name":"cur_language","value":"''"},{"name":"cur_country","value":"'au'"},{"name":"cur_role","value":"'Auth'"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"}],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"b2148f5061c1ebd","name":"Screenshot","source":"b2148f5061c1ebd.png","type":"image/png","size":611008},{"uid":"86c2a63a2976ecea","name":"stdout","source":"86c2a63a2976ecea.txt","type":"text/plain","size":2028}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":3,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"d::0","time":{"start":1743123460775,"stop":1743123460877,"duration":102},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"epic","value":"TC_55!516 | Menu section [Markets] > Menu item [Markets analysis] > article \"The graph (GRT) price prediction..\" > Click on the [collapse] link"},{"name":"feature","value":"Role: Auth"},{"name":"story","value":"Country: au"},{"name":"tag","value":"us_55"},{"name":"parentSuite","value":"tests.US_55_ReTestsManual.K_Alex_N"},{"name":"suite","value":"US_55_K_Alex_N_ReTestsManual_test"},{"name":"subSuite","value":"TestManualDetectedBugs"},{"name":"host","value":"fv-az1945-274"},{"name":"thread","value":"46916-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.US_55_ReTestsManual.K_Alex_N.US_55_K_Alex_N_ReTestsManual_test"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"cur_country","value":"'au'"},{"name":"cur_language","value":"''"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"},{"name":"cur_role","value":"'Auth'"},{"name":"d","value":"'Chrome'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":9,"broken":1,"skipped":0,"passed":0,"unknown":0,"total":10},"items":[{"uid":"18b9285cabaf03c4","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/356//#testresult/18b9285cabaf03c4","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742691228436,"stop":1742691234384,"duration":5948}},{"uid":"485181dc74a915f4","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/355//#testresult/485181dc74a915f4","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742604766430,"stop":1742604774980,"duration":8550}},{"uid":"15f5b7b2c5ab3388","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/353//#testresult/15f5b7b2c5ab3388","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742430832501,"stop":1742430840929,"duration":8428}},{"uid":"66e8c951d262977e","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/352//#testresult/66e8c951d262977e","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742343967509,"stop":1742343973694,"duration":6185}},{"uid":"44e7a02307f003e7","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/348//#testresult/44e7a02307f003e7","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1741999033905,"stop":1741999040038,"duration":6133}},{"uid":"44e4814d03a2aa6f","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/347//#testresult/44e4814d03a2aa6f","status":"failed","statusDetails":"Failed: Bug # 55!516 not possible to open page \"collapse\"","time":{"start":1741919407331,"stop":1741919486936,"duration":79605}},{"uid":"62bc95cdfd6d15f8","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/346//#testresult/62bc95cdfd6d15f8","status":"failed","statusDetails":"Failed: Bug # 55!516 not possible to open page \"collapse\"","time":{"start":1741832262299,"stop":1741832342226,"duration":79927}},{"uid":"863fa10eef90705e","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/343//#testresult/863fa10eef90705e","status":"failed","statusDetails":"Failed: Bug # 55!516 not possible to open page \"collapse\"","time":{"start":1741573146674,"stop":1741573226408,"duration":79734}},{"uid":"ff8599ca0c31cc8","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/342//#testresult/ff8599ca0c31cc8","status":"broken","statusDetails":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <b class=\"\">...</b> is not clickable at point (750, 11). Other element would receive the click: <span class=\"text-accord\">...</span>\n  (Session info: chrome=133.0.6943.141)\nStacktrace:\n#0 0x55defb66b14a <unknown>\n#1 0x55defb108b80 <unknown>\n#2 0x55defb160eac <unknown>\n#3 0x55defb15ed15 <unknown>\n#4 0x55defb15c3b2 <unknown>\n#5 0x55defb15b58a <unknown>\n#6 0x55defb14e0ad <unknown>\n#7 0x55defb17fed2 <unknown>\n#8 0x55defb14da2a <unknown>\n#9 0x55defb18009e <unknown>\n#10 0x55defb1a614a <unknown>\n#11 0x55defb17fca3 <unknown>\n#12 0x55defb14bf08 <unknown>\n#13 0x55defb14d071 <unknown>\n#14 0x55defb634b5b <unknown>\n#15 0x55defb638ae2 <unknown>\n#16 0x55defb620967 <unknown>\n#17 0x55defb6396d4 <unknown>\n#18 0x55defb604c7f <unknown>\n#19 0x55defb659cd8 <unknown>\n#20 0x55defb659ea9 <unknown>\n#21 0x55defb669fc6 <unknown>\n#22 0x7f5c2309caa4 <unknown>\n#23 0x7f5c23129c3c <unknown>","time":{"start":1741486257476,"stop":1741486341536,"duration":84060}}]},"tags":["us_55"]},"source":"14c9fd61a1b69948.json","parameterValues":["'au'","''","'test001.miketar+1@gmail.com'","'Qwer1234-!@#$'","'Auth'","'Chrome'"]}