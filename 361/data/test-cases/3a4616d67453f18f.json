{"uid":"3a4616d67453f18f","name":"TC_55!363 (Lang: en) | Bid:55!363-en.ae.Auth","fullName":"tests.US_55_ReTestsManual.mila_podchasova.US_55-mila_podchasova_ReTestsManual_test.TestManualDetectedBugs#test_363_selected_country_not_displayed_up_in_search_the_dropdown","historyId":"5ff0659995a9644979e40904454e52ec","time":{"start":1743123108715,"stop":1743123117076,"duration":8361},"description":"\n        Check:  Click to the dropdown [Regional settings] > Click to the dropdown [Countries] >\n                Click the [Search] input field > Enter value \"Honk\" > Check that country 'Honk Kong & Taiwan'\n                displayed in search results\n\n        Language: EN - FCA, SCA; AR - SCA\n        License/Country: FCA, SCA\n        Role: NoReg, NoAuth, Auth\n        Author: podchasova11\n        ","descriptionHtml":"<pre><code>    Check:  Click to the dropdown [Regional settings] &gt; Click to the dropdown [Countries] &gt;\n            Click the [Search] input field &gt; Enter value &quot;Honk&quot; &gt; Check that country 'Honk Kong &amp; Taiwan'\n            displayed in search results\n\n    Language: EN - FCA, SCA; AR - SCA\n    License/Country: FCA, SCA\n    Role: NoReg, NoAuth, Auth\n    Author: podchasova11\n</code></pre>\n","status":"failed","statusMessage":"Failed: Bug! 'Login' button is not clicked","statusTrace":"self = <pages.conditions_v2.NewConditions object at 0x7f1416e2e750>\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"04df5d97ffb735ab00ad0c762007443f\")>\nlink = 'https://capital.com/en-gb', login = 'test001.miketar+1@gmail.com'\npassword = 'Qwer1234-!@#$', cur_role = 'Auth'\n\n    @allure.step(f\"{datetime.now()}   Start Authorization\")\n    # @profile(precision=3)\n    def to_do_authorisation_new(self, d, link, login, password, cur_role):\n        \"\"\"Authorization\"\"\"\n        print(f\"\\n\" f\"{datetime.now()}   Start Authorization\")\n    \n        # Setup wait for later\n        menu = MainMenu(d, link)\n        assert login != \"\", \"Авторизация невозможна. Не указан e-mail\"\n        assert password != \"\", \"Авторизация невозможна. Не указан пароль\"\n    \n        # нажать в хедере на кнопку \"Log in\"\n        try:\n>           menu.element_is_clickable(menu.MENU_LOGIN).click()\n\npages/conditions_v2.py:237: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:380: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f14170317c0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#21 0x556990542e76 \\\\u003Cunknown>\\\\n#22 0x7fe240c9caa4 \\\\u003Cunknown>\\\\n#23 0x7fe240d29c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button class=\"accountBtns_btn__vOcCs accountBtns_btnEmpty__TCWRE helpers_showLg__UPEqH js-analyticsClick js-analyticsVisible\" data-type=\"btn_header_login\" data-testid=\"login_btn\">...</button> is not clickable at point (1385, 121). Other element would receive the click: <div class=\"modal_overlay__f_YlZ modal_mobileBottomAttached__cTOIu\">...</div>\nE         (Session info: chrome=134.0.6998.165)\nE       Stacktrace:\nE       #0 0x556990543ffa <unknown>\nE       #1 0x556990002970 <unknown>\nE       #2 0x55699005b1ec <unknown>\nE       #3 0x556990059055 <unknown>\nE       #4 0x5569900566f2 <unknown>\nE       #5 0x5569900558ca <unknown>\nE       #6 0x5569900484cd <unknown>\nE       #7 0x55699007a292 <unknown>\nE       #8 0x556990047e4a <unknown>\nE       #9 0x55699007a45e <unknown>\nE       #10 0x5569900a070c <unknown>\nE       #11 0x55699007a063 <unknown>\nE       #12 0x556990046328 <unknown>\nE       #13 0x556990047491 <unknown>\nE       #14 0x55699050b42b <unknown>\nE       #15 0x55699050f2ec <unknown>\nE       #16 0x5569904f2a22 <unknown>\nE       #17 0x55699050fe64 <unknown>\nE       #18 0x5569904d6bef <unknown>\nE       #19 0x556990532558 <unknown>\nE       #20 0x556990532736 <unknown>\nE       #21 0x556990542e76 <unknown>\nE       #22 0x7fe240c9caa4 <unknown>\nE       #23 0x7fe240d29c3c <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <US_55-mila_podchasova_ReTestsManual_test.TestManualDetectedBugs object at 0x7f141700bb30>\nworker_id = 'master'\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"04df5d97ffb735ab00ad0c762007443f\")>\ncur_language_country_for_fca_and_sca = ['', 'ae'], cur_role = 'Auth'\ncur_login = 'test001.miketar+1@gmail.com', cur_password = 'Qwer1234-!@#$'\n\n    @allure.step(\n        \"Start retest manual TC_55!363 | 'Honk Kong & Taiwan' not displayed up in search\"\n        \" the dropdown [Regional settings]\")\n    @pytest.mark.parametrize('cur_role', [\"NoReg\", \"Auth\", \"NoAuth\"])\n    @pytest.mark.bug_363\n    def test_363_selected_country_not_displayed_up_in_search_the_dropdown(\n            self, worker_id, d, cur_language_country_for_fca_and_sca, cur_role, cur_login, cur_password):\n        \"\"\"\n        Check:  Click to the dropdown [Regional settings] > Click to the dropdown [Countries] >\n                Click the [Search] input field > Enter value \"Honk\" > Check that country 'Honk Kong & Taiwan'\n                displayed in search results\n    \n        Language: EN - FCA, SCA; AR - SCA\n        License/Country: FCA, SCA\n        Role: NoReg, NoAuth, Auth\n        Author: podchasova11\n        \"\"\"\n    \n        bid = build_dynamic_arg_for_us_55(\n            d, worker_id, cur_language_country_for_fca_and_sca[0],\n            cur_language_country_for_fca_and_sca[1], cur_role,\n            \"55\", \"ReTests of Manual Detected Bugs\",\n            \"363\",\n            \"Click to the dropdown [Regional settings] > Click to the dropdown [Countries] > \"\n            \"Click the [Search] input field > Enter value 'Honk' > Check that country 'Honk Kong & Taiwan'\"\n            \"displayed in search results\",\n            False, True\n        )\n        # Arrange\n>       cur_item_link = apply_preconditions_to_link(d, cur_language_country_for_fca_and_sca[0],\n                                                    cur_language_country_for_fca_and_sca[1],\n                                                    cur_role, cur_login, cur_password)\n\ntests/US_55_ReTestsManual/mila_podchasova/US_55-mila_podchasova_ReTestsManual_test.py:445: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/conditions_v2.py:78: in apply_preconditions_to_link\n    return cond.preconditions(d, CapitalComPageSrc.URL_NEW, '', cur_language, cur_country, cur_role,\npages/conditions_v2.py:152: in preconditions\n    self.to_do_authorisation_new(d, host, cur_login, cur_password, cur_role)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.conditions_v2.NewConditions object at 0x7f1416e2e750>\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"04df5d97ffb735ab00ad0c762007443f\")>\nlink = 'https://capital.com/en-gb', login = 'test001.miketar+1@gmail.com'\npassword = 'Qwer1234-!@#$', cur_role = 'Auth'\n\n    @allure.step(f\"{datetime.now()}   Start Authorization\")\n    # @profile(precision=3)\n    def to_do_authorisation_new(self, d, link, login, password, cur_role):\n        \"\"\"Authorization\"\"\"\n        print(f\"\\n\" f\"{datetime.now()}   Start Authorization\")\n    \n        # Setup wait for later\n        menu = MainMenu(d, link)\n        assert login != \"\", \"Авторизация невозможна. Не указан e-mail\"\n        assert password != \"\", \"Авторизация невозможна. Не указан пароль\"\n    \n        # нажать в хедере на кнопку \"Log in\"\n        try:\n            menu.element_is_clickable(menu.MENU_LOGIN).click()\n        except:\n>           pytest.fail(\"Bug! 'Login' button is not clicked\")\nE           Failed: Bug! 'Login' button is not clicked\n\npages/conditions_v2.py:239: Failed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"d","time":{"start":1743122534680,"stop":1743122535455,"duration":775},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_password","time":{"start":1743122535456,"stop":1743122535456,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_login","time":{"start":1743122535456,"stop":1743122535456,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"worker_id","time":{"start":1743122535456,"stop":1743122535456,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_language_country_for_fca_and_sca","time":{"start":1743123108714,"stop":1743123108714,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"\n        Check:  Click to the dropdown [Regional settings] > Click to the dropdown [Countries] >\n                Click the [Search] input field > Enter value \"Honk\" > Check that country 'Honk Kong & Taiwan'\n                displayed in search results\n\n        Language: EN - FCA, SCA; AR - SCA\n        License/Country: FCA, SCA\n        Role: NoReg, NoAuth, Auth\n        Author: podchasova11\n        ","status":"failed","statusMessage":"Failed: Bug! 'Login' button is not clicked","statusTrace":"self = <pages.conditions_v2.NewConditions object at 0x7f1416e2e750>\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"04df5d97ffb735ab00ad0c762007443f\")>\nlink = 'https://capital.com/en-gb', login = 'test001.miketar+1@gmail.com'\npassword = 'Qwer1234-!@#$', cur_role = 'Auth'\n\n    @allure.step(f\"{datetime.now()}   Start Authorization\")\n    # @profile(precision=3)\n    def to_do_authorisation_new(self, d, link, login, password, cur_role):\n        \"\"\"Authorization\"\"\"\n        print(f\"\\n\" f\"{datetime.now()}   Start Authorization\")\n    \n        # Setup wait for later\n        menu = MainMenu(d, link)\n        assert login != \"\", \"Авторизация невозможна. Не указан e-mail\"\n        assert password != \"\", \"Авторизация невозможна. Не указан пароль\"\n    \n        # нажать в хедере на кнопку \"Log in\"\n        try:\n>           menu.element_is_clickable(menu.MENU_LOGIN).click()\n\npages/conditions_v2.py:237: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:380: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f14170317c0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#21 0x556990542e76 \\\\u003Cunknown>\\\\n#22 0x7fe240c9caa4 \\\\u003Cunknown>\\\\n#23 0x7fe240d29c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button class=\"accountBtns_btn__vOcCs accountBtns_btnEmpty__TCWRE helpers_showLg__UPEqH js-analyticsClick js-analyticsVisible\" data-type=\"btn_header_login\" data-testid=\"login_btn\">...</button> is not clickable at point (1385, 121). Other element would receive the click: <div class=\"modal_overlay__f_YlZ modal_mobileBottomAttached__cTOIu\">...</div>\nE         (Session info: chrome=134.0.6998.165)\nE       Stacktrace:\nE       #0 0x556990543ffa <unknown>\nE       #1 0x556990002970 <unknown>\nE       #2 0x55699005b1ec <unknown>\nE       #3 0x556990059055 <unknown>\nE       #4 0x5569900566f2 <unknown>\nE       #5 0x5569900558ca <unknown>\nE       #6 0x5569900484cd <unknown>\nE       #7 0x55699007a292 <unknown>\nE       #8 0x556990047e4a <unknown>\nE       #9 0x55699007a45e <unknown>\nE       #10 0x5569900a070c <unknown>\nE       #11 0x55699007a063 <unknown>\nE       #12 0x556990046328 <unknown>\nE       #13 0x556990047491 <unknown>\nE       #14 0x55699050b42b <unknown>\nE       #15 0x55699050f2ec <unknown>\nE       #16 0x5569904f2a22 <unknown>\nE       #17 0x55699050fe64 <unknown>\nE       #18 0x5569904d6bef <unknown>\nE       #19 0x556990532558 <unknown>\nE       #20 0x556990532736 <unknown>\nE       #21 0x556990542e76 <unknown>\nE       #22 0x7fe240c9caa4 <unknown>\nE       #23 0x7fe240d29c3c <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <US_55-mila_podchasova_ReTestsManual_test.TestManualDetectedBugs object at 0x7f141700bb30>\nworker_id = 'master'\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"04df5d97ffb735ab00ad0c762007443f\")>\ncur_language_country_for_fca_and_sca = ['', 'ae'], cur_role = 'Auth'\ncur_login = 'test001.miketar+1@gmail.com', cur_password = 'Qwer1234-!@#$'\n\n    @allure.step(\n        \"Start retest manual TC_55!363 | 'Honk Kong & Taiwan' not displayed up in search\"\n        \" the dropdown [Regional settings]\")\n    @pytest.mark.parametrize('cur_role', [\"NoReg\", \"Auth\", \"NoAuth\"])\n    @pytest.mark.bug_363\n    def test_363_selected_country_not_displayed_up_in_search_the_dropdown(\n            self, worker_id, d, cur_language_country_for_fca_and_sca, cur_role, cur_login, cur_password):\n        \"\"\"\n        Check:  Click to the dropdown [Regional settings] > Click to the dropdown [Countries] >\n                Click the [Search] input field > Enter value \"Honk\" > Check that country 'Honk Kong & Taiwan'\n                displayed in search results\n    \n        Language: EN - FCA, SCA; AR - SCA\n        License/Country: FCA, SCA\n        Role: NoReg, NoAuth, Auth\n        Author: podchasova11\n        \"\"\"\n    \n        bid = build_dynamic_arg_for_us_55(\n            d, worker_id, cur_language_country_for_fca_and_sca[0],\n            cur_language_country_for_fca_and_sca[1], cur_role,\n            \"55\", \"ReTests of Manual Detected Bugs\",\n            \"363\",\n            \"Click to the dropdown [Regional settings] > Click to the dropdown [Countries] > \"\n            \"Click the [Search] input field > Enter value 'Honk' > Check that country 'Honk Kong & Taiwan'\"\n            \"displayed in search results\",\n            False, True\n        )\n        # Arrange\n>       cur_item_link = apply_preconditions_to_link(d, cur_language_country_for_fca_and_sca[0],\n                                                    cur_language_country_for_fca_and_sca[1],\n                                                    cur_role, cur_login, cur_password)\n\ntests/US_55_ReTestsManual/mila_podchasova/US_55-mila_podchasova_ReTestsManual_test.py:445: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/conditions_v2.py:78: in apply_preconditions_to_link\n    return cond.preconditions(d, CapitalComPageSrc.URL_NEW, '', cur_language, cur_country, cur_role,\npages/conditions_v2.py:152: in preconditions\n    self.to_do_authorisation_new(d, host, cur_login, cur_password, cur_role)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.conditions_v2.NewConditions object at 0x7f1416e2e750>\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"04df5d97ffb735ab00ad0c762007443f\")>\nlink = 'https://capital.com/en-gb', login = 'test001.miketar+1@gmail.com'\npassword = 'Qwer1234-!@#$', cur_role = 'Auth'\n\n    @allure.step(f\"{datetime.now()}   Start Authorization\")\n    # @profile(precision=3)\n    def to_do_authorisation_new(self, d, link, login, password, cur_role):\n        \"\"\"Authorization\"\"\"\n        print(f\"\\n\" f\"{datetime.now()}   Start Authorization\")\n    \n        # Setup wait for later\n        menu = MainMenu(d, link)\n        assert login != \"\", \"Авторизация невозможна. Не указан e-mail\"\n        assert password != \"\", \"Авторизация невозможна. Не указан пароль\"\n    \n        # нажать в хедере на кнопку \"Log in\"\n        try:\n            menu.element_is_clickable(menu.MENU_LOGIN).click()\n        except:\n>           pytest.fail(\"Bug! 'Login' button is not clicked\")\nE           Failed: Bug! 'Login' button is not clicked\n\npages/conditions_v2.py:239: Failed","steps":[{"name":"Start retest manual TC_55!363 | 'Honk Kong & Taiwan' not displayed up in search the dropdown [Regional settings]","time":{"start":1743123108715,"stop":1743123117076,"duration":8361},"status":"failed","statusMessage":"Failed: Bug! 'Login' button is not clicked\n","statusTrace":"  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/tests/US_55_ReTestsManual/mila_podchasova/US_55-mila_podchasova_ReTestsManual_test.py\", line 445, in test_363_selected_country_not_displayed_up_in_search_the_dropdown\n    cur_item_link = apply_preconditions_to_link(d, cur_language_country_for_fca_and_sca[0],\n                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/conditions_v2.py\", line 78, in apply_preconditions_to_link\n    return cond.preconditions(d, CapitalComPageSrc.URL_NEW, '', cur_language, cur_country, cur_role,\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/conditions_v2.py\", line 152, in preconditions\n    self.to_do_authorisation_new(d, host, cur_login, cur_password, cur_role)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/conditions_v2.py\", line 239, in to_do_authorisation_new\n    pytest.fail(\"Bug! 'Login' button is not clicked\")\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/_pytest/outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n","steps":[{"name":"Build dynamic argument for TCs of US_55","time":{"start":1743123108715,"stop":1743123108717,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"04df5d97ffb735ab00ad0c762007443f\")>"},{"name":"worker_id","value":"'master'"},{"name":"cur_language","value":"''"},{"name":"cur_country","value":"'ae'"},{"name":"cur_role","value":"'Auth'"},{"name":"us","value":"'55'"},{"name":"desc_us","value":"'ReTests of Manual Detected Bugs'"},{"name":"num_tc","value":"'363'"},{"name":"desc_tc","value":"'Click to the dropdown [Regional settings] > Click to the dropdown [Countries] > Click the [Search] input field > Enter value 'Honk' > Check that country 'Honk Kong & Taiwan'displayed in search results'"},{"name":"manual","value":"False"},{"name":"new_layout","value":"True"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"   Set New preconditions","time":{"start":1743123108717,"stop":1743123117075,"duration":8358},"status":"failed","statusMessage":"Failed: Bug! 'Login' button is not clicked\n","statusTrace":"  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/conditions_v2.py\", line 152, in preconditions\n    self.to_do_authorisation_new(d, host, cur_login, cur_password, cur_role)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/conditions_v2.py\", line 239, in to_do_authorisation_new\n    pytest.fail(\"Bug! 'Login' button is not clicked\")\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/_pytest/outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n","steps":[{"name":"2025-03-28 00:42:14.664724   Start Authorization","time":{"start":1743123115991,"stop":1743123117075,"duration":1084},"status":"failed","statusMessage":"Failed: Bug! 'Login' button is not clicked\n","statusTrace":"  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/conditions_v2.py\", line 239, in to_do_authorisation_new\n    pytest.fail(\"Bug! 'Login' button is not clicked\")\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/_pytest/outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"04df5d97ffb735ab00ad0c762007443f\")>"},{"name":"link","value":"'https://capital.com/en-gb'"},{"name":"login","value":"'test001.miketar+1@gmail.com'"},{"name":"password","value":"'Qwer1234-!@#$'"},{"name":"cur_role","value":"'Auth'"}],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"04df5d97ffb735ab00ad0c762007443f\")>"},{"name":"host","value":"'https://capital.com/en-gb'"},{"name":"end_point","value":"''"},{"name":"cur_language","value":"''"},{"name":"cur_country","value":"'ae'"},{"name":"cur_role","value":"'Auth'"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"}],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"worker_id","value":"'master'"},{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"04df5d97ffb735ab00ad0c762007443f\")>"},{"name":"cur_language_country_for_fca_and_sca","value":"['', 'ae']"},{"name":"cur_role","value":"'Auth'"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"}],"shouldDisplayMessage":false,"stepsCount":3,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"51ab568bf4aa9c81","name":"Screenshot","source":"51ab568bf4aa9c81.png","type":"image/png","size":611008},{"uid":"e3fa1d7e39da6745","name":"stdout","source":"e3fa1d7e39da6745.txt","type":"text/plain","size":2271}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"d::0","time":{"start":1743123274120,"stop":1743123274388,"duration":268},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"epic","value":"TC_55!363 | Click to the dropdown [Regional settings] > Click to the dropdown [Countries] > Click the [Search] input field > Enter value 'Honk' > Check that country 'Honk Kong & Taiwan'displayed in search results"},{"name":"feature","value":"Role: Auth"},{"name":"story","value":"Country: ae"},{"name":"tag","value":"bug_363"},{"name":"tag","value":"us_55"},{"name":"parentSuite","value":"tests.US_55_ReTestsManual.mila_podchasova"},{"name":"suite","value":"US_55-mila_podchasova_ReTestsManual_test"},{"name":"subSuite","value":"TestManualDetectedBugs"},{"name":"host","value":"fv-az1945-274"},{"name":"thread","value":"42539-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.US_55_ReTestsManual.mila_podchasova.US_55-mila_podchasova_ReTestsManual_test"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"cur_language_country_for_fca_and_sca","value":"['', 'ae']"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"},{"name":"cur_role","value":"'Auth'"},{"name":"d","value":"'Chrome'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":20,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":20},"items":[{"uid":"383afcc182ca98c1","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/360//#testresult/383afcc182ca98c1","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1743035792374,"stop":1743035800886,"duration":8512}},{"uid":"6ee568a3cb7cb9a6","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/359//#testresult/6ee568a3cb7cb9a6","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742949441312,"stop":1742949449770,"duration":8458}},{"uid":"e8249e71bd61d7f5","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/358//#testresult/e8249e71bd61d7f5","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742862819484,"stop":1742862827821,"duration":8337}},{"uid":"b462a02454071dd4","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/357//#testresult/b462a02454071dd4","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742776494094,"stop":1742776502164,"duration":8070}},{"uid":"56b3b4bf74457379","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/356//#testresult/56b3b4bf74457379","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742690871632,"stop":1742690880076,"duration":8444}},{"uid":"5b8d5fc52d27a775","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/355//#testresult/5b8d5fc52d27a775","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742604401109,"stop":1742604409355,"duration":8246}},{"uid":"6d4c066b600d5e36","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/354//#testresult/6d4c066b600d5e36","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742517023764,"stop":1742517032164,"duration":8400}},{"uid":"ecdc4e893bb25682","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/353//#testresult/ecdc4e893bb25682","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742430504299,"stop":1742430512676,"duration":8377}},{"uid":"1166402635d8b607","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/352//#testresult/1166402635d8b607","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742343630027,"stop":1742343638466,"duration":8439}},{"uid":"7de15ea69a2652de","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/351//#testresult/7de15ea69a2652de","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742258765737,"stop":1742258774669,"duration":8932}},{"uid":"2ac209383609db45","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/350//#testresult/2ac209383609db45","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742172162300,"stop":1742172170453,"duration":8153}},{"uid":"198778be22bb7aa7","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/349//#testresult/198778be22bb7aa7","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742086217665,"stop":1742086226011,"duration":8346}},{"uid":"4fd5840a64b3ca59","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/348//#testresult/4fd5840a64b3ca59","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1741998712870,"stop":1741998721008,"duration":8138}},{"uid":"774ac6edc38b06e1","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/347//#testresult/774ac6edc38b06e1","status":"failed","statusDetails":"Failed: Bug # 363 The main page don't have link country to open dropdown in DOM","time":{"start":1741918366333,"stop":1741918384082,"duration":17749}},{"uid":"235221f0cf03be42","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/346//#testresult/235221f0cf03be42","status":"failed","statusDetails":"Failed: Bug # 363 The main page don't have link country to open dropdown in DOM","time":{"start":1741831241410,"stop":1741831261254,"duration":19844}},{"uid":"91a4825e5df3781","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/345//#testresult/91a4825e5df3781","status":"failed","statusDetails":"Failed: Bug # 363 The main page don't have link country to open dropdown in DOM","time":{"start":1741751480602,"stop":1741751498901,"duration":18299}},{"uid":"705f2f8ff0e97a8e","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/344//#testresult/705f2f8ff0e97a8e","status":"failed","statusDetails":"Failed: Bug # 363 The main page don't have link country to open dropdown in DOM","time":{"start":1741665377111,"stop":1741665395968,"duration":18857}},{"uid":"d5974533e93ed667","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/343//#testresult/d5974533e93ed667","status":"failed","statusDetails":"Failed: Bug # 363 The main page don't have link country to open dropdown in DOM","time":{"start":1741572163002,"stop":1741572181157,"duration":18155}},{"uid":"57c644c4d6a0b187","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/342//#testresult/57c644c4d6a0b187","status":"failed","statusDetails":"Failed: Bug # 363 The main page don't have link country to open dropdown in DOM","time":{"start":1741485267208,"stop":1741485284981,"duration":17773}}]},"tags":["bug_363","us_55"]},"source":"3a4616d67453f18f.json","parameterValues":["['', 'ae']","'test001.miketar+1@gmail.com'","'Qwer1234-!@#$'","'Auth'","'Chrome'"]}