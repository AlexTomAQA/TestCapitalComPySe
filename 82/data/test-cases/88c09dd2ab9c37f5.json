{"uid":"88c09dd2ab9c37f5","name":"TC_01.05.00_003 | Testing button [Buy]. Bid:01.05.00_003-nl.ae.Auth","fullName":"tests.US_01_Markets.US_01-05_Commodities.US_01-05-00_Commodities_test.TestCommodities#test_003_buy_trading_instrument","historyId":"55c60865d84a5888de0d38bf3bb97588","time":{"start":1711292624176,"stop":1711292630288,"duration":6112},"description":"\n        Check: button [Buy] in Widget 'Trading instrument'\n        Language: All License: All (except FCA) Role: All.\n        ","descriptionHtml":"<pre><code>    Check: button [Buy] in Widget 'Trading instrument'\n    Language: All License: All (except FCA) Role: All.\n</code></pre>\n","status":"broken","statusMessage":"selenium.common.exceptions.InvalidArgumentException: Message: invalid argument\nfrom invalid argument: 'origin' must be either a string or a dictionary\n  (Session info: chrome=122.0.6261.128)\nStacktrace:\n#0 0x55f2edcfaf33 <unknown>\n#1 0x55f2ed9f2ce6 <unknown>\n#2 0x55f2eda8487a <unknown>\n#3 0x55f2eda867d3 <unknown>\n#4 0x55f2eda5feb2 <unknown>\n#5 0x55f2eda7e899 <unknown>\n#6 0x55f2eda5fc53 <unknown>\n#7 0x55f2eda30db3 <unknown>\n#8 0x55f2eda3177e <unknown>\n#9 0x55f2edcc086b <unknown>\n#10 0x55f2edcc4885 <unknown>\n#11 0x55f2edcae181 <unknown>\n#12 0x55f2edcc5412 <unknown>\n#13 0x55f2edc9225f <unknown>\n#14 0x55f2edce9528 <unknown>\n#15 0x55f2edce9723 <unknown>\n#16 0x55f2edcfa0e4 <unknown>\n#17 0x7efd36094ac3 <unknown>","statusTrace":"self = <US_01-05-00_Commodities_test.TestCommodities object at 0x7f3bb3659610>\nworker_id = 'master'\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"dfd37e7e8a765821a8920a1b1c683071\")>\ncur_language = 'nl', cur_country = 'ae', cur_role = 'Auth'\ncur_login = 'test001.miketar+1@gmail.com', cur_password = 'Qwer1234-!@#$'\ncur_sort = 'Most volatile'\n\n    @allure.step(\"Start test of button [Buy] in Widget 'Trading instrument'\")\n    @pytest.mark.test_003\n    def test_003_buy_trading_instrument(\n            self, worker_id, d, cur_language, cur_country, cur_role, cur_login, cur_password, cur_sort):\n        \"\"\"\n        Check: button [Buy] in Widget 'Trading instrument'\n        Language: All License: All (except FCA) Role: All.\n        \"\"\"\n        bid = build_dynamic_arg_v4(\n            d, worker_id, cur_language, cur_country, cur_role,\n            \"01.05\", \"Markets > Menu item [Commodities]\",\n            \".00_003\", \"Testing button [Buy]\")\n    \n        Common().check_country_in_list_and_skip_if_present(cur_country, [\"gb\"])\n        Common().skip_if_eng_lang_and_fca_license(cur_language, cur_country)\n    \n        page_conditions = Conditions(d, \"\")\n        link = page_conditions.preconditions(\n            d, CapitalComPageSrc.URL, \"\", cur_language, cur_country, cur_role, cur_login, cur_password)\n    \n        page_menu = MenuSection(d, link)\n        page_menu.move_focus_to_markets_menu(d, cur_language, cur_country)\n        cur_page_url = page_menu.sub_menu_commodities_move_focus_click(d, cur_language)\n    \n        test_element = TableTradingInstrumentsBuyButton(d, cur_page_url, bid)\n>       test_element.full_test_with_tpi(d, cur_language, cur_country, cur_role, cur_page_url, cur_sort)\n\ntests/US_01_Markets/US_01-05_Commodities/US_01-05-00_Commodities_test.py:101: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/Elements/TableTradingInstrumentsBuyButton.py:35: in full_test_with_tpi\n    item_list = self.arrange_(d, cur_item_link, cur_sort)\npages/Elements/TableTradingInstrumentsBuyButton.py:131: in arrange_\n    .perform()\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/common/action_chains.py:94: in perform\n    self.w3c_actions.perform()\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/common/actions/action_builder.py:96: in perform\n    self.driver.execute(Command.W3C_ACTIONS, enc)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f3bb3754b90>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"invalid argument\\\\nfrom invalid argument: \\'...\\\\n#15 0x55f2edce9723 \\\\u003Cunknown>\\\\n#16 0x55f2edcfa0e4 \\\\u003Cunknown>\\\\n#17 0x7efd36094ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidArgumentException: Message: invalid argument\nE       from invalid argument: 'origin' must be either a string or a dictionary\nE         (Session info: chrome=122.0.6261.128)\nE       Stacktrace:\nE       #0 0x55f2edcfaf33 <unknown>\nE       #1 0x55f2ed9f2ce6 <unknown>\nE       #2 0x55f2eda8487a <unknown>\nE       #3 0x55f2eda867d3 <unknown>\nE       #4 0x55f2eda5feb2 <unknown>\nE       #5 0x55f2eda7e899 <unknown>\nE       #6 0x55f2eda5fc53 <unknown>\nE       #7 0x55f2eda30db3 <unknown>\nE       #8 0x55f2eda3177e <unknown>\nE       #9 0x55f2edcc086b <unknown>\nE       #10 0x55f2edcc4885 <unknown>\nE       #11 0x55f2edcae181 <unknown>\nE       #12 0x55f2edcc5412 <unknown>\nE       #13 0x55f2edc9225f <unknown>\nE       #14 0x55f2edce9528 <unknown>\nE       #15 0x55f2edce9723 <unknown>\nE       #16 0x55f2edcfa0e4 <unknown>\nE       #17 0x7efd36094ac3 <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: InvalidArgumentException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"d","time":{"start":1711291781601,"stop":1711291781998,"duration":397},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_login","time":{"start":1711291781999,"stop":1711291781999,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_password","time":{"start":1711291781999,"stop":1711291781999,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_language","time":{"start":1711291781999,"stop":1711291781999,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"worker_id","time":{"start":1711291781999,"stop":1711291781999,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_country","time":{"start":1711292334738,"stop":1711292334738,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_role","time":{"start":1711292558946,"stop":1711292558946,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_sort","time":{"start":1711292624176,"stop":1711292624176,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"\n        Check: button [Buy] in Widget 'Trading instrument'\n        Language: All License: All (except FCA) Role: All.\n        ","status":"broken","statusMessage":"selenium.common.exceptions.InvalidArgumentException: Message: invalid argument\nfrom invalid argument: 'origin' must be either a string or a dictionary\n  (Session info: chrome=122.0.6261.128)\nStacktrace:\n#0 0x55f2edcfaf33 <unknown>\n#1 0x55f2ed9f2ce6 <unknown>\n#2 0x55f2eda8487a <unknown>\n#3 0x55f2eda867d3 <unknown>\n#4 0x55f2eda5feb2 <unknown>\n#5 0x55f2eda7e899 <unknown>\n#6 0x55f2eda5fc53 <unknown>\n#7 0x55f2eda30db3 <unknown>\n#8 0x55f2eda3177e <unknown>\n#9 0x55f2edcc086b <unknown>\n#10 0x55f2edcc4885 <unknown>\n#11 0x55f2edcae181 <unknown>\n#12 0x55f2edcc5412 <unknown>\n#13 0x55f2edc9225f <unknown>\n#14 0x55f2edce9528 <unknown>\n#15 0x55f2edce9723 <unknown>\n#16 0x55f2edcfa0e4 <unknown>\n#17 0x7efd36094ac3 <unknown>","statusTrace":"self = <US_01-05-00_Commodities_test.TestCommodities object at 0x7f3bb3659610>\nworker_id = 'master'\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"dfd37e7e8a765821a8920a1b1c683071\")>\ncur_language = 'nl', cur_country = 'ae', cur_role = 'Auth'\ncur_login = 'test001.miketar+1@gmail.com', cur_password = 'Qwer1234-!@#$'\ncur_sort = 'Most volatile'\n\n    @allure.step(\"Start test of button [Buy] in Widget 'Trading instrument'\")\n    @pytest.mark.test_003\n    def test_003_buy_trading_instrument(\n            self, worker_id, d, cur_language, cur_country, cur_role, cur_login, cur_password, cur_sort):\n        \"\"\"\n        Check: button [Buy] in Widget 'Trading instrument'\n        Language: All License: All (except FCA) Role: All.\n        \"\"\"\n        bid = build_dynamic_arg_v4(\n            d, worker_id, cur_language, cur_country, cur_role,\n            \"01.05\", \"Markets > Menu item [Commodities]\",\n            \".00_003\", \"Testing button [Buy]\")\n    \n        Common().check_country_in_list_and_skip_if_present(cur_country, [\"gb\"])\n        Common().skip_if_eng_lang_and_fca_license(cur_language, cur_country)\n    \n        page_conditions = Conditions(d, \"\")\n        link = page_conditions.preconditions(\n            d, CapitalComPageSrc.URL, \"\", cur_language, cur_country, cur_role, cur_login, cur_password)\n    \n        page_menu = MenuSection(d, link)\n        page_menu.move_focus_to_markets_menu(d, cur_language, cur_country)\n        cur_page_url = page_menu.sub_menu_commodities_move_focus_click(d, cur_language)\n    \n        test_element = TableTradingInstrumentsBuyButton(d, cur_page_url, bid)\n>       test_element.full_test_with_tpi(d, cur_language, cur_country, cur_role, cur_page_url, cur_sort)\n\ntests/US_01_Markets/US_01-05_Commodities/US_01-05-00_Commodities_test.py:101: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/Elements/TableTradingInstrumentsBuyButton.py:35: in full_test_with_tpi\n    item_list = self.arrange_(d, cur_item_link, cur_sort)\npages/Elements/TableTradingInstrumentsBuyButton.py:131: in arrange_\n    .perform()\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/common/action_chains.py:94: in perform\n    self.w3c_actions.perform()\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/common/actions/action_builder.py:96: in perform\n    self.driver.execute(Command.W3C_ACTIONS, enc)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f3bb3754b90>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"invalid argument\\\\nfrom invalid argument: \\'...\\\\n#15 0x55f2edce9723 \\\\u003Cunknown>\\\\n#16 0x55f2edcfa0e4 \\\\u003Cunknown>\\\\n#17 0x7efd36094ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidArgumentException: Message: invalid argument\nE       from invalid argument: 'origin' must be either a string or a dictionary\nE         (Session info: chrome=122.0.6261.128)\nE       Stacktrace:\nE       #0 0x55f2edcfaf33 <unknown>\nE       #1 0x55f2ed9f2ce6 <unknown>\nE       #2 0x55f2eda8487a <unknown>\nE       #3 0x55f2eda867d3 <unknown>\nE       #4 0x55f2eda5feb2 <unknown>\nE       #5 0x55f2eda7e899 <unknown>\nE       #6 0x55f2eda5fc53 <unknown>\nE       #7 0x55f2eda30db3 <unknown>\nE       #8 0x55f2eda3177e <unknown>\nE       #9 0x55f2edcc086b <unknown>\nE       #10 0x55f2edcc4885 <unknown>\nE       #11 0x55f2edcae181 <unknown>\nE       #12 0x55f2edcc5412 <unknown>\nE       #13 0x55f2edc9225f <unknown>\nE       #14 0x55f2edce9528 <unknown>\nE       #15 0x55f2edce9723 <unknown>\nE       #16 0x55f2edcfa0e4 <unknown>\nE       #17 0x7efd36094ac3 <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: InvalidArgumentException","steps":[{"name":"Start test of button [Buy] in Widget 'Trading instrument'","time":{"start":1711292624177,"stop":1711292630286,"duration":6109},"status":"broken","statusMessage":"selenium.common.exceptions.InvalidArgumentException: Message: invalid argument\nfrom invalid argument: 'origin' must be either a string or a dictionary\n  (Session info: chrome=122.0.6261.128)\nStacktrace:\n#0 0x55f2edcfaf33 <unknown>\n#1 0x55f2ed9f2ce6 <unknown>\n#2 0x55f2eda8487a <unknown>\n#3 0x55f2eda867d3 <unknown>\n#4 0x55f2eda5feb2 <unknown>\n#5 0x55f2eda7e899 <unknown>\n#6 0x55f2eda5fc53 <unknown>\n#7 0x55f2eda30db3 <unknown>\n#8 0x55f2eda3177e <unknown>\n#9 0x55f2edcc086b <unknown>\n#10 0x55f2edcc4885 <unknown>\n#11 0x55f2edcae181 <unknown>\n#12 0x55f2edcc5412 <unknown>\n#13 0x55f2edc9225f <unknown>\n#14 0x55f2edce9528 <unknown>\n#15 0x55f2edce9723 <unknown>\n#16 0x55f2edcfa0e4 <unknown>\n#17 0x7efd36094ac3 <unknown>\n\n","statusTrace":"  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/tests/US_01_Markets/US_01-05_Commodities/US_01-05-00_Commodities_test.py\", line 101, in test_003_buy_trading_instrument\n    test_element.full_test_with_tpi(d, cur_language, cur_country, cur_role, cur_page_url, cur_sort)\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/Elements/TableTradingInstrumentsBuyButton.py\", line 35, in full_test_with_tpi\n    item_list = self.arrange_(d, cur_item_link, cur_sort)\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/Elements/TableTradingInstrumentsBuyButton.py\", line 131, in arrange_\n    .perform()\n     ^^^^^^^^^\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/common/action_chains.py\", line 94, in perform\n    self.w3c_actions.perform()\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/common/actions/action_builder.py\", line 96, in perform\n    self.driver.execute(Command.W3C_ACTIONS, enc)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 347, in execute\n    self.error_handler.check_response(response)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[{"name":"2024-03-24 14:49:41.541570   Start Building dynamic arguments for allure report generation","time":{"start":1711292624177,"stop":1711292624178,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"dfd37e7e8a765821a8920a1b1c683071\")>"},{"name":"worker_id","value":"'master'"},{"name":"cur_language","value":"'nl'"},{"name":"cur_country","value":"'ae'"},{"name":"cur_role","value":"'Auth'"},{"name":"us","value":"'01.05'"},{"name":"desc_us","value":"'Markets > Menu item [Commodities]'"},{"name":"num_tc","value":"'.00_003'"},{"name":"desc_tc","value":"'Testing button [Buy]'"},{"name":"manual","value":"False"},{"name":"new_layout","value":"False"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"2024-03-24 14:49:41.546046   Set preconditions","time":{"start":1711292624178,"stop":1711292625420,"duration":1242},"status":"passed","steps":[{"name":"2024-03-24 14:49:41.544924   Start Checking Captcha","time":{"start":1711292624386,"stop":1711292625417,"duration":1031},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"dfd37e7e8a765821a8920a1b1c683071\")>"},{"name":"host","value":"'https://capital.com'"},{"name":"end_point","value":"''"},{"name":"cur_language","value":"'nl'"},{"name":"cur_country","value":"'ae'"},{"name":"cur_role","value":"'Auth'"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"}],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"2024-03-24 14:49:41.543438.   Focus moved to 'Markets' menu","time":{"start":1711292625420,"stop":1711292627204,"duration":1784},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"dfd37e7e8a765821a8920a1b1c683071\")>"},{"name":"test_language","value":"'nl'"},{"name":"test_country","value":"'ae'"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"2024-03-24 14:49:41.543880. Move focus to 'Commodities' submenu and click.","time":{"start":1711292627204,"stop":1711292628473,"duration":1269},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"dfd37e7e8a765821a8920a1b1c683071\")>"},{"name":"test_language","value":"'nl'"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"worker_id","value":"'master'"},{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"dfd37e7e8a765821a8920a1b1c683071\")>"},{"name":"cur_language","value":"'nl'"},{"name":"cur_country","value":"'ae'"},{"name":"cur_role","value":"'Auth'"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"},{"name":"cur_sort","value":"'Most volatile'"}],"shouldDisplayMessage":true,"stepsCount":5,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"ef0bd8b50e8ecfba","name":"Screenshot","source":"ef0bd8b50e8ecfba.png","type":"image/png","size":80858},{"uid":"e04a07e05a013a68","name":"log","source":"e04a07e05a013a68.txt","type":"text/plain","size":848},{"uid":"50435b603bd1b6be","name":"stdout","source":"50435b603bd1b6be.txt","type":"text/plain","size":2297}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":6,"attachmentsCount":3,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"d::0","time":{"start":1711292638423,"stop":1711292638564,"duration":141},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"epic","value":"US_01.05 | Markets > Menu item [Commodities]"},{"name":"feature","value":"Language: nl"},{"name":"story","value":"Country: ae / Role: Auth"},{"name":"tag","value":"test_003"},{"name":"tag","value":"us_01_05"},{"name":"parentSuite","value":"tests.US_01_Markets.US_01-05_Commodities"},{"name":"suite","value":"US_01-05-00_Commodities_test"},{"name":"subSuite","value":"TestCommodities"},{"name":"host","value":"fv-az1210-93"},{"name":"thread","value":"20465-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.US_01_Markets.US_01-05_Commodities.US_01-05-00_Commodities_test"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"cur_country","value":"'ae'"},{"name":"cur_language","value":"'nl'"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"},{"name":"cur_role","value":"'Auth'"},{"name":"cur_sort","value":"'Most volatile'"},{"name":"d","value":"'Chrome'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["us_01_05","test_003"]},"source":"88c09dd2ab9c37f5.json","parameterValues":["'ae'","'nl'","'test001.miketar+1@gmail.com'","'Qwer1234-!@#$'","'Auth'","'Most volatile'","'Chrome'"]}