{"uid":"4dff58586a565ee5","name":"TC_55!048 (Lang: pl) | Bid:55!048-pl.ua.NoReg","fullName":"tests.US_55_ReTestsManual.tassobaccato.US_55-tassobaccato_ReTestsManual_test.TestManualDetectedBugs#test_048","historyId":"62551ac3b0fb060534a87874bb8112ae","time":{"start":1722370044899,"stop":1722370069689,"duration":24790},"description":"\n        Check: Filters application in the 'Live shares prices' widget\n        Language: All\n        License: CYSEC, SCB, ASIC\n        Author: Kasila\n        ","descriptionHtml":"<pre><code>    Check: Filters application in the 'Live shares prices' widget\n    Language: All\n    License: CYSEC, SCB, ASIC\n    Author: Kasila\n</code></pre>\n","status":"broken","statusMessage":"selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found in the current frame\n  (Session info: chrome=126.0.6478.182); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nStacktrace:\n#0 0x556f4c97dc5a <unknown>\n#1 0x556f4c660e2c <unknown>\n#2 0x556f4c666539 <unknown>\n#3 0x556f4c6682e5 <unknown>\n#4 0x556f4c66836c <unknown>\n#5 0x556f4c6a7822 <unknown>\n#6 0x556f4c6d05c2 <unknown>\n#7 0x556f4c6a1ad9 <unknown>\n#8 0x556f4c6d078e <unknown>\n#9 0x556f4c6ef303 <unknown>\n#10 0x556f4c6d0363 <unknown>\n#11 0x556f4c6a0247 <unknown>\n#12 0x556f4c6a0b9e <unknown>\n#13 0x556f4c94422b <unknown>\n#14 0x556f4c9482d1 <unknown>\n#15 0x556f4c92fade <unknown>\n#16 0x556f4c948e32 <unknown>\n#17 0x556f4c91477f <unknown>\n#18 0x556f4c96d618 <unknown>\n#19 0x556f4c96d7f0 <unknown>\n#20 0x556f4c97cd8c <unknown>\n#21 0x7feecf894ac3 <unknown>","statusTrace":"self = <pages.BugsManual.bug_048.AppliedFilters object at 0x7f79283a3800>\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"1db029766591aa1156aa1c01315d9b28\")>\ncur_item_link = 'https://capital.com/pl/aktualne-ceny-akcji'\n\n    def arrange_v0(self, d, cur_item_link):\n        print(f\"\\n{datetime.now()}   1. Arrange_v0\")\n    \n        if not self.current_page_is(cur_item_link):\n            self.link = cur_item_link\n            self.open_page()\n    \n        print(f\"{datetime.now()}   Scroll to the labels\")\n        filters_labels = self.driver.find_element(By.CSS_SELECTOR, '#flt_labels')\n        self.driver.execute_script(\n            'return arguments[0].scrollIntoView({block: \"center\", inline: \"nearest\"});',\n            filters_labels\n        )\n        print(f\"{datetime.now()}   Close the filters if selected\")\n        filter_labels_list = self.driver.find_elements(By.CSS_SELECTOR, 'span.cross-button')\n    \n        for attempt in range(3):\n            try:\n                if len(filter_labels_list) > 0:\n                    for element in filter_labels_list:\n                        element.click()\n                break\n            except StaleElementReferenceException:\n                filter_labels_list = self.driver.find_elements(By.CSS_SELECTOR,\n                                                               '#flt_labels > span > span.cross-button')\n    \n        print(f\"{datetime.now()}   Select region filters\")\n        region_checkbox_list = self.driver.find_elements(By.CSS_SELECTOR, '#flt_reg > li > label.checkbox > span')\n        region_random_list = random.sample(region_checkbox_list, 3)\n        for element in region_random_list:\n            ActionChains(d) \\\n                .move_to_element(element) \\\n                .click(element) \\\n                .perform()\n    \n        print(f\"{datetime.now()}   Select sectors filters\")\n        sectors_checkbox_list = self.driver.find_elements(By.CSS_SELECTOR, '#flt_sec > li > label.checkbox > span')\n        sectors_random_list = random.sample(sectors_checkbox_list, 2)\n        for element in sectors_random_list:\n            ActionChains(d) \\\n                .move_to_element(element) \\\n                .pause(0.5) \\\n                .click(element) \\\n                .perform()\n    \n        print(f\"{datetime.now()}   Scroll to selected filters\")\n        self.driver.execute_script(\n            'return arguments[0].scrollIntoView({block: \"center\", inline: \"nearest\"});',\n            filters_labels\n        )\n        selected_filters_locator = (By.CSS_SELECTOR, '#flt_labels > span >span.text-ellipsis')\n        time_out = 10\n    \n        print(f\"{datetime.now()}   Check the labels of the selected filters\")\n    \n        while True:\n            try:\n                WebDriverWait(self.driver, time_out).until(\n                    lambda b: len(self.driver.find_elements(*selected_filters_locator)) == 5\n                )\n                break\n            except TimeoutException:\n                return\n    \n        print(f\"{datetime.now()}   Extract the text attribute from the labels of the selected filters\")\n        try:\n            selected_filters_list = self.driver.find_elements(*selected_filters_locator)\n>           self.selected_filters_text_list = [filters.text for filters in selected_filters_list]\n\npages/BugsManual/bug_048.py:105: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:90: in text\n    return self._execute(Command.GET_ELEMENT_TEXT)[\"value\"]\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f7929c7a2a0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: stale elemen...\\\\n#19 0x556f4c96d7f0 \\\\u003Cunknown>\\\\n#20 0x556f4c97cd8c \\\\u003Cunknown>\\\\n#21 0x7feecf894ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found in the current frame\nE         (Session info: chrome=126.0.6478.182); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nE       Stacktrace:\nE       #0 0x556f4c97dc5a <unknown>\nE       #1 0x556f4c660e2c <unknown>\nE       #2 0x556f4c666539 <unknown>\nE       #3 0x556f4c6682e5 <unknown>\nE       #4 0x556f4c66836c <unknown>\nE       #5 0x556f4c6a7822 <unknown>\nE       #6 0x556f4c6d05c2 <unknown>\nE       #7 0x556f4c6a1ad9 <unknown>\nE       #8 0x556f4c6d078e <unknown>\nE       #9 0x556f4c6ef303 <unknown>\nE       #10 0x556f4c6d0363 <unknown>\nE       #11 0x556f4c6a0247 <unknown>\nE       #12 0x556f4c6a0b9e <unknown>\nE       #13 0x556f4c94422b <unknown>\nE       #14 0x556f4c9482d1 <unknown>\nE       #15 0x556f4c92fade <unknown>\nE       #16 0x556f4c948e32 <unknown>\nE       #17 0x556f4c91477f <unknown>\nE       #18 0x556f4c96d618 <unknown>\nE       #19 0x556f4c96d7f0 <unknown>\nE       #20 0x556f4c97cd8c <unknown>\nE       #21 0x7feecf894ac3 <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: StaleElementReferenceException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <US_55-tassobaccato_ReTestsManual_test.TestManualDetectedBugs object at 0x7f79284e6cc0>\nworker_id = 'master'\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"1db029766591aa1156aa1c01315d9b28\")>\ncur_language_2_rnd_from_14 = 'pl', cur_country = 'ua', cur_role = 'NoReg'\ncur_login = 'test001.miketar+1@gmail.com', cur_password = 'Qwer1234-!@#$'\n\n    @allure.step(\"Start retest manual AT_55!00_048 of filters application in the 'Live shares prices' widget\")\n    @pytest.mark.parametrize('cur_country', ['es', 'ua', 'au'])\n    @pytest.mark.parametrize('cur_role', [\"NoReg\", \"Auth\", \"NoAuth\"])\n    @pytest.mark.bug_048\n    def test_048(self, worker_id, d, cur_language_2_rnd_from_14, cur_country, cur_role, cur_login, cur_password):\n        \"\"\"\n        Check: Filters application in the 'Live shares prices' widget\n        Language: All\n        License: CYSEC, SCB, ASIC\n        Author: Kasila\n        \"\"\"\n    \n    \n        bid = build_dynamic_arg_for_us_55(\n            d, worker_id, cur_language_2_rnd_from_14, cur_country, cur_role,\n            \"55\", \"ReTests of Manual Detected Bugs\",\n            \"048\", \"Applied filters 'Region/Sectors' are not displayed after selecting an item from the \"\n                   \"'Most traded' dropdown in the 'Live shares prices'  widget on the 'Shares' page\"\n            )\n    \n        page_conditions = Conditions(d, \"\")\n        link = page_conditions.preconditions(\n            d, CapitalComPageSrc.URL, \"\", cur_language_2_rnd_from_14, cur_country, cur_role, cur_login, cur_password)\n    \n        menu = MenuSection(d, link)\n        cur_item_link = menu.open_shares_market_menu(d, cur_language_2_rnd_from_14, cur_country, link)\n    \n        test_element = AppliedFilters(d, cur_item_link, bid)\n>       test_element.test_(d, cur_language_2_rnd_from_14, cur_country,cur_role, cur_item_link)\n\ntests/US_55_ReTestsManual/tassobaccato/US_55-tassobaccato_ReTestsManual_test.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/BugsManual/bug_048.py:29: in test_\n    self.arrange_v0(d, cur_item_link)\npages/BugsManual/bug_048.py:108: in arrange_v0\n    self.selected_filters_text_list = [filters.text for filters in selected_filters_list]\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:90: in text\n    return self._execute(Command.GET_ELEMENT_TEXT)[\"value\"]\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f7929c7a2a0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: stale elemen...\\\\n#19 0x556f4c96d7f0 \\\\u003Cunknown>\\\\n#20 0x556f4c97cd8c \\\\u003Cunknown>\\\\n#21 0x7feecf894ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found in the current frame\nE         (Session info: chrome=126.0.6478.182); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nE       Stacktrace:\nE       #0 0x556f4c97dc5a <unknown>\nE       #1 0x556f4c660e2c <unknown>\nE       #2 0x556f4c666539 <unknown>\nE       #3 0x556f4c6682e5 <unknown>\nE       #4 0x556f4c66836c <unknown>\nE       #5 0x556f4c6a7822 <unknown>\nE       #6 0x556f4c6d05c2 <unknown>\nE       #7 0x556f4c6a1ad9 <unknown>\nE       #8 0x556f4c6d078e <unknown>\nE       #9 0x556f4c6ef303 <unknown>\nE       #10 0x556f4c6d0363 <unknown>\nE       #11 0x556f4c6a0247 <unknown>\nE       #12 0x556f4c6a0b9e <unknown>\nE       #13 0x556f4c94422b <unknown>\nE       #14 0x556f4c9482d1 <unknown>\nE       #15 0x556f4c92fade <unknown>\nE       #16 0x556f4c948e32 <unknown>\nE       #17 0x556f4c91477f <unknown>\nE       #18 0x556f4c96d618 <unknown>\nE       #19 0x556f4c96d7f0 <unknown>\nE       #20 0x556f4c97cd8c <unknown>\nE       #21 0x7feecf894ac3 <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: StaleElementReferenceException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"d","time":{"start":1722369829348,"stop":1722369829679,"duration":331},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_login","time":{"start":1722369829679,"stop":1722369829679,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"worker_id","time":{"start":1722369829679,"stop":1722369829679,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_password","time":{"start":1722369829680,"stop":1722369829680,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_language_2_rnd_from_14","time":{"start":1722370044898,"stop":1722370044898,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"\n        Check: Filters application in the 'Live shares prices' widget\n        Language: All\n        License: CYSEC, SCB, ASIC\n        Author: Kasila\n        ","status":"broken","statusMessage":"selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found in the current frame\n  (Session info: chrome=126.0.6478.182); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nStacktrace:\n#0 0x556f4c97dc5a <unknown>\n#1 0x556f4c660e2c <unknown>\n#2 0x556f4c666539 <unknown>\n#3 0x556f4c6682e5 <unknown>\n#4 0x556f4c66836c <unknown>\n#5 0x556f4c6a7822 <unknown>\n#6 0x556f4c6d05c2 <unknown>\n#7 0x556f4c6a1ad9 <unknown>\n#8 0x556f4c6d078e <unknown>\n#9 0x556f4c6ef303 <unknown>\n#10 0x556f4c6d0363 <unknown>\n#11 0x556f4c6a0247 <unknown>\n#12 0x556f4c6a0b9e <unknown>\n#13 0x556f4c94422b <unknown>\n#14 0x556f4c9482d1 <unknown>\n#15 0x556f4c92fade <unknown>\n#16 0x556f4c948e32 <unknown>\n#17 0x556f4c91477f <unknown>\n#18 0x556f4c96d618 <unknown>\n#19 0x556f4c96d7f0 <unknown>\n#20 0x556f4c97cd8c <unknown>\n#21 0x7feecf894ac3 <unknown>","statusTrace":"self = <pages.BugsManual.bug_048.AppliedFilters object at 0x7f79283a3800>\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"1db029766591aa1156aa1c01315d9b28\")>\ncur_item_link = 'https://capital.com/pl/aktualne-ceny-akcji'\n\n    def arrange_v0(self, d, cur_item_link):\n        print(f\"\\n{datetime.now()}   1. Arrange_v0\")\n    \n        if not self.current_page_is(cur_item_link):\n            self.link = cur_item_link\n            self.open_page()\n    \n        print(f\"{datetime.now()}   Scroll to the labels\")\n        filters_labels = self.driver.find_element(By.CSS_SELECTOR, '#flt_labels')\n        self.driver.execute_script(\n            'return arguments[0].scrollIntoView({block: \"center\", inline: \"nearest\"});',\n            filters_labels\n        )\n        print(f\"{datetime.now()}   Close the filters if selected\")\n        filter_labels_list = self.driver.find_elements(By.CSS_SELECTOR, 'span.cross-button')\n    \n        for attempt in range(3):\n            try:\n                if len(filter_labels_list) > 0:\n                    for element in filter_labels_list:\n                        element.click()\n                break\n            except StaleElementReferenceException:\n                filter_labels_list = self.driver.find_elements(By.CSS_SELECTOR,\n                                                               '#flt_labels > span > span.cross-button')\n    \n        print(f\"{datetime.now()}   Select region filters\")\n        region_checkbox_list = self.driver.find_elements(By.CSS_SELECTOR, '#flt_reg > li > label.checkbox > span')\n        region_random_list = random.sample(region_checkbox_list, 3)\n        for element in region_random_list:\n            ActionChains(d) \\\n                .move_to_element(element) \\\n                .click(element) \\\n                .perform()\n    \n        print(f\"{datetime.now()}   Select sectors filters\")\n        sectors_checkbox_list = self.driver.find_elements(By.CSS_SELECTOR, '#flt_sec > li > label.checkbox > span')\n        sectors_random_list = random.sample(sectors_checkbox_list, 2)\n        for element in sectors_random_list:\n            ActionChains(d) \\\n                .move_to_element(element) \\\n                .pause(0.5) \\\n                .click(element) \\\n                .perform()\n    \n        print(f\"{datetime.now()}   Scroll to selected filters\")\n        self.driver.execute_script(\n            'return arguments[0].scrollIntoView({block: \"center\", inline: \"nearest\"});',\n            filters_labels\n        )\n        selected_filters_locator = (By.CSS_SELECTOR, '#flt_labels > span >span.text-ellipsis')\n        time_out = 10\n    \n        print(f\"{datetime.now()}   Check the labels of the selected filters\")\n    \n        while True:\n            try:\n                WebDriverWait(self.driver, time_out).until(\n                    lambda b: len(self.driver.find_elements(*selected_filters_locator)) == 5\n                )\n                break\n            except TimeoutException:\n                return\n    \n        print(f\"{datetime.now()}   Extract the text attribute from the labels of the selected filters\")\n        try:\n            selected_filters_list = self.driver.find_elements(*selected_filters_locator)\n>           self.selected_filters_text_list = [filters.text for filters in selected_filters_list]\n\npages/BugsManual/bug_048.py:105: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:90: in text\n    return self._execute(Command.GET_ELEMENT_TEXT)[\"value\"]\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f7929c7a2a0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: stale elemen...\\\\n#19 0x556f4c96d7f0 \\\\u003Cunknown>\\\\n#20 0x556f4c97cd8c \\\\u003Cunknown>\\\\n#21 0x7feecf894ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found in the current frame\nE         (Session info: chrome=126.0.6478.182); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nE       Stacktrace:\nE       #0 0x556f4c97dc5a <unknown>\nE       #1 0x556f4c660e2c <unknown>\nE       #2 0x556f4c666539 <unknown>\nE       #3 0x556f4c6682e5 <unknown>\nE       #4 0x556f4c66836c <unknown>\nE       #5 0x556f4c6a7822 <unknown>\nE       #6 0x556f4c6d05c2 <unknown>\nE       #7 0x556f4c6a1ad9 <unknown>\nE       #8 0x556f4c6d078e <unknown>\nE       #9 0x556f4c6ef303 <unknown>\nE       #10 0x556f4c6d0363 <unknown>\nE       #11 0x556f4c6a0247 <unknown>\nE       #12 0x556f4c6a0b9e <unknown>\nE       #13 0x556f4c94422b <unknown>\nE       #14 0x556f4c9482d1 <unknown>\nE       #15 0x556f4c92fade <unknown>\nE       #16 0x556f4c948e32 <unknown>\nE       #17 0x556f4c91477f <unknown>\nE       #18 0x556f4c96d618 <unknown>\nE       #19 0x556f4c96d7f0 <unknown>\nE       #20 0x556f4c97cd8c <unknown>\nE       #21 0x7feecf894ac3 <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: StaleElementReferenceException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <US_55-tassobaccato_ReTestsManual_test.TestManualDetectedBugs object at 0x7f79284e6cc0>\nworker_id = 'master'\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"1db029766591aa1156aa1c01315d9b28\")>\ncur_language_2_rnd_from_14 = 'pl', cur_country = 'ua', cur_role = 'NoReg'\ncur_login = 'test001.miketar+1@gmail.com', cur_password = 'Qwer1234-!@#$'\n\n    @allure.step(\"Start retest manual AT_55!00_048 of filters application in the 'Live shares prices' widget\")\n    @pytest.mark.parametrize('cur_country', ['es', 'ua', 'au'])\n    @pytest.mark.parametrize('cur_role', [\"NoReg\", \"Auth\", \"NoAuth\"])\n    @pytest.mark.bug_048\n    def test_048(self, worker_id, d, cur_language_2_rnd_from_14, cur_country, cur_role, cur_login, cur_password):\n        \"\"\"\n        Check: Filters application in the 'Live shares prices' widget\n        Language: All\n        License: CYSEC, SCB, ASIC\n        Author: Kasila\n        \"\"\"\n    \n    \n        bid = build_dynamic_arg_for_us_55(\n            d, worker_id, cur_language_2_rnd_from_14, cur_country, cur_role,\n            \"55\", \"ReTests of Manual Detected Bugs\",\n            \"048\", \"Applied filters 'Region/Sectors' are not displayed after selecting an item from the \"\n                   \"'Most traded' dropdown in the 'Live shares prices'  widget on the 'Shares' page\"\n            )\n    \n        page_conditions = Conditions(d, \"\")\n        link = page_conditions.preconditions(\n            d, CapitalComPageSrc.URL, \"\", cur_language_2_rnd_from_14, cur_country, cur_role, cur_login, cur_password)\n    \n        menu = MenuSection(d, link)\n        cur_item_link = menu.open_shares_market_menu(d, cur_language_2_rnd_from_14, cur_country, link)\n    \n        test_element = AppliedFilters(d, cur_item_link, bid)\n>       test_element.test_(d, cur_language_2_rnd_from_14, cur_country,cur_role, cur_item_link)\n\ntests/US_55_ReTestsManual/tassobaccato/US_55-tassobaccato_ReTestsManual_test.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/BugsManual/bug_048.py:29: in test_\n    self.arrange_v0(d, cur_item_link)\npages/BugsManual/bug_048.py:108: in arrange_v0\n    self.selected_filters_text_list = [filters.text for filters in selected_filters_list]\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:90: in text\n    return self._execute(Command.GET_ELEMENT_TEXT)[\"value\"]\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f7929c7a2a0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: stale elemen...\\\\n#19 0x556f4c96d7f0 \\\\u003Cunknown>\\\\n#20 0x556f4c97cd8c \\\\u003Cunknown>\\\\n#21 0x7feecf894ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found in the current frame\nE         (Session info: chrome=126.0.6478.182); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nE       Stacktrace:\nE       #0 0x556f4c97dc5a <unknown>\nE       #1 0x556f4c660e2c <unknown>\nE       #2 0x556f4c666539 <unknown>\nE       #3 0x556f4c6682e5 <unknown>\nE       #4 0x556f4c66836c <unknown>\nE       #5 0x556f4c6a7822 <unknown>\nE       #6 0x556f4c6d05c2 <unknown>\nE       #7 0x556f4c6a1ad9 <unknown>\nE       #8 0x556f4c6d078e <unknown>\nE       #9 0x556f4c6ef303 <unknown>\nE       #10 0x556f4c6d0363 <unknown>\nE       #11 0x556f4c6a0247 <unknown>\nE       #12 0x556f4c6a0b9e <unknown>\nE       #13 0x556f4c94422b <unknown>\nE       #14 0x556f4c9482d1 <unknown>\nE       #15 0x556f4c92fade <unknown>\nE       #16 0x556f4c948e32 <unknown>\nE       #17 0x556f4c91477f <unknown>\nE       #18 0x556f4c96d618 <unknown>\nE       #19 0x556f4c96d7f0 <unknown>\nE       #20 0x556f4c97cd8c <unknown>\nE       #21 0x7feecf894ac3 <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: StaleElementReferenceException","steps":[{"name":"Start retest manual AT_55!00_048 of filters application in the 'Live shares prices' widget","time":{"start":1722370044899,"stop":1722370069688,"duration":24789},"status":"broken","statusMessage":"selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found in the current frame\n  (Session info: chrome=126.0.6478.182); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nStacktrace:\n#0 0x556f4c97dc5a <unknown>\n#1 0x556f4c660e2c <unknown>\n#2 0x556f4c666539 <unknown>\n#3 0x556f4c6682e5 <unknown>\n#4 0x556f4c66836c <unknown>\n#5 0x556f4c6a7822 <unknown>\n#6 0x556f4c6d05c2 <unknown>\n#7 0x556f4c6a1ad9 <unknown>\n#8 0x556f4c6d078e <unknown>\n#9 0x556f4c6ef303 <unknown>\n#10 0x556f4c6d0363 <unknown>\n#11 0x556f4c6a0247 <unknown>\n#12 0x556f4c6a0b9e <unknown>\n#13 0x556f4c94422b <unknown>\n#14 0x556f4c9482d1 <unknown>\n#15 0x556f4c92fade <unknown>\n#16 0x556f4c948e32 <unknown>\n#17 0x556f4c91477f <unknown>\n#18 0x556f4c96d618 <unknown>\n#19 0x556f4c96d7f0 <unknown>\n#20 0x556f4c97cd8c <unknown>\n#21 0x7feecf894ac3 <unknown>\n\n","statusTrace":"  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/tests/US_55_ReTestsManual/tassobaccato/US_55-tassobaccato_ReTestsManual_test.py\", line 80, in test_048\n    test_element.test_(d, cur_language_2_rnd_from_14, cur_country,cur_role, cur_item_link)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/BugsManual/bug_048.py\", line 29, in test_\n    self.arrange_v0(d, cur_item_link)\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/BugsManual/bug_048.py\", line 108, in arrange_v0\n    self.selected_filters_text_list = [filters.text for filters in selected_filters_list]\n                                       ^^^^^^^^^^^^\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py\", line 90, in text\n    return self._execute(Command.GET_ELEMENT_TEXT)[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py\", line 395, in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 354, in execute\n    self.error_handler.check_response(response)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[{"name":"Preconditions","time":{"start":1722370044900,"stop":1722370060689,"duration":15789},"status":"passed","steps":[{"name":"2024-07-30 20:03:49.176071   Start Checking Captcha","time":{"start":1722370046687,"stop":1722370047710,"duration":1023},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"2024-07-30 20:03:49.176071   Start Checking Captcha","time":{"start":1722370050761,"stop":1722370051796,"duration":1035},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Open 'Language and Country' menu section.","time":{"start":1722370051799,"stop":1722370053084,"duration":1285},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"test_language","value":"'pl'"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Set country (licence)","time":{"start":1722370053085,"stop":1722370055685,"duration":2600},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"cur_country","value":"'ua'"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"2024-07-30 20:03:49.176071   Start Checking Captcha","time":{"start":1722370055685,"stop":1722370056693,"duration":1008},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Open 'Language and Country' menu section.","time":{"start":1722370056696,"stop":1722370057984,"duration":1288},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"test_language","value":"'pl'"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Set language","time":{"start":1722370057985,"stop":1722370059645,"duration":1660},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"cur_language","value":"'pl'"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"2024-07-30 20:03:49.176071   Start Checking Captcha","time":{"start":1722370059645,"stop":1722370060686,"duration":1041},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"1db029766591aa1156aa1c01315d9b28\")>"},{"name":"host","value":"'https://capital.com/'"},{"name":"end_point","value":"''"},{"name":"cur_language","value":"'pl'"},{"name":"cur_country","value":"'ua'"},{"name":"cur_role","value":"'NoReg'"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"}],"shouldDisplayMessage":false,"stepsCount":8,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Select \"Markets\" menu, \"Shares\" submenu click","time":{"start":1722370060689,"stop":1722370064362,"duration":3673},"status":"passed","steps":[{"name":"Focus moved to 'Markets' menu","time":{"start":1722370060698,"stop":1722370062498,"duration":1800},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"1db029766591aa1156aa1c01315d9b28\")>"},{"name":"test_language","value":"'pl'"},{"name":"test_country","value":"'ua'"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Focus move to 'Shares' submenu item and click","time":{"start":1722370062498,"stop":1722370064084,"duration":1586},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"1db029766591aa1156aa1c01315d9b28\")>"},{"name":"test_language","value":"'pl'"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"1db029766591aa1156aa1c01315d9b28\")>"},{"name":"cur_language","value":"'pl'"},{"name":"cur_country","value":"'ua'"},{"name":"link","value":"'https://capital.com/pl'"}],"shouldDisplayMessage":false,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"2024-07-30 20:03:49.172537   Start test the display of the applied filters","time":{"start":1722370064362,"stop":1722370069687,"duration":5325},"status":"broken","statusMessage":"selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found in the current frame\n  (Session info: chrome=126.0.6478.182); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nStacktrace:\n#0 0x556f4c97dc5a <unknown>\n#1 0x556f4c660e2c <unknown>\n#2 0x556f4c666539 <unknown>\n#3 0x556f4c6682e5 <unknown>\n#4 0x556f4c66836c <unknown>\n#5 0x556f4c6a7822 <unknown>\n#6 0x556f4c6d05c2 <unknown>\n#7 0x556f4c6a1ad9 <unknown>\n#8 0x556f4c6d078e <unknown>\n#9 0x556f4c6ef303 <unknown>\n#10 0x556f4c6d0363 <unknown>\n#11 0x556f4c6a0247 <unknown>\n#12 0x556f4c6a0b9e <unknown>\n#13 0x556f4c94422b <unknown>\n#14 0x556f4c9482d1 <unknown>\n#15 0x556f4c92fade <unknown>\n#16 0x556f4c948e32 <unknown>\n#17 0x556f4c91477f <unknown>\n#18 0x556f4c96d618 <unknown>\n#19 0x556f4c96d7f0 <unknown>\n#20 0x556f4c97cd8c <unknown>\n#21 0x7feecf894ac3 <unknown>\n\n","statusTrace":"  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/BugsManual/bug_048.py\", line 29, in test_\n    self.arrange_v0(d, cur_item_link)\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/BugsManual/bug_048.py\", line 108, in arrange_v0\n    self.selected_filters_text_list = [filters.text for filters in selected_filters_list]\n                                       ^^^^^^^^^^^^\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py\", line 90, in text\n    return self._execute(Command.GET_ELEMENT_TEXT)[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py\", line 395, in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 354, in execute\n    self.error_handler.check_response(response)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"1db029766591aa1156aa1c01315d9b28\")>"},{"name":"cur_language","value":"'pl'"},{"name":"cur_country","value":"'ua'"},{"name":"cur_role","value":"'NoReg'"},{"name":"cur_item_link","value":"'https://capital.com/pl/aktualne-ceny-akcji'"}],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"worker_id","value":"'master'"},{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"1db029766591aa1156aa1c01315d9b28\")>"},{"name":"cur_language_2_rnd_from_14","value":"'pl'"},{"name":"cur_country","value":"'ua'"},{"name":"cur_role","value":"'NoReg'"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"}],"shouldDisplayMessage":false,"stepsCount":13,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"76d9b9192bc6598b","name":"Screenshot","source":"76d9b9192bc6598b.png","type":"image/png","size":100596},{"uid":"aa894d0ae1b256ff","name":"stdout","source":"aa894d0ae1b256ff.txt","type":"text/plain","size":5143}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":14,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"d::0","time":{"start":1722370623539,"stop":1722370623727,"duration":188},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"epic","value":"TC_55!048 | Applied filters 'Region/Sectors' are not displayed after selecting an item from the 'Most traded' dropdown in the 'Live shares prices'  widget on the 'Shares' page"},{"name":"feature","value":"Role: NoReg"},{"name":"story","value":"Country: ua"},{"name":"tag","value":"bug_048"},{"name":"tag","value":"us_55"},{"name":"parentSuite","value":"tests.US_55_ReTestsManual.tassobaccato"},{"name":"suite","value":"US_55-tassobaccato_ReTestsManual_test"},{"name":"subSuite","value":"TestManualDetectedBugs"},{"name":"host","value":"fv-az520-427"},{"name":"thread","value":"22056-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.US_55_ReTestsManual.tassobaccato.US_55-tassobaccato_ReTestsManual_test"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"cur_country","value":"'ua'"},{"name":"cur_language_2_rnd_from_14","value":"'pl'"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"},{"name":"cur_role","value":"'NoReg'"},{"name":"d","value":"'Chrome'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["us_55","bug_048"]},"source":"4dff58586a565ee5.json","parameterValues":["'ua'","'pl'","'test001.miketar+1@gmail.com'","'Qwer1234-!@#$'","'NoReg'","'Chrome'"]}