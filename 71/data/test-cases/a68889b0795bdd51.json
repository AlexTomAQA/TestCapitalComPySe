{"uid":"a68889b0795bdd51","name":"test_038[Chrome-test001.miketar+1@gmail.com-Qwer1234-!@#$-NoReg-ua-]","fullName":"tests.US_55_ReTestsManual.mila_podchasova.US_55-mila_podchasova_ReTestsManual_test.TestManualDetectedBugs#test_038","historyId":"537e4b7213fb68ec32c5f1260a693091","time":{"start":1722526190282,"stop":1722526190282,"duration":0},"description":"\n         Check: The Trading platform overview page does not open when\n         the button [Platform overview] is pressed on the \"Investmate app\" page\n\n         Author: podchasova11\n         ","descriptionHtml":"<pre><code>     Check: The Trading platform overview page does not open when\n     the button [Platform overview] is pressed on the &quot;Investmate app&quot; page\n\n     Author: podchasova11\n</code></pre>\n","status":"broken","statusMessage":"OSError: [Errno 8] Exec format error: '/home/runner/.wdm/drivers/chromedriver/linux64/127.0.6533.88/chromedriver-linux64/THIRD_PARTY_NOTICES.chromedriver'","statusTrace":"request = <SubRequest 'd' for <Function test_038[Chrome-test001.miketar+1@gmail.com-Qwer1234-!@#$-NoReg-de-]>>\n\n    @pytest.fixture(\n        # scope=\"module\",\n        scope=\"session\",\n        params=[\n            \"Chrome\",\n            # \"Edge\",\n            # \"Firefox\",\n            # \"Safari\",\n        ],\n        autouse=True,\n        # ids=pre_go,\n    )\n    def d(request):\n        \"\"\"WebDriver Initialization\"\"\"\n        print(f'\\n{datetime.now()}   *** autouse fixture {request.param} ***\\n')\n    \n        # проверка аргументов командной строки\n        if request.config.getoption(\"browser_name\"):\n            test_browser = request.config.getoption(\"browser_name\")\n        else:\n            test_browser = request.param\n    \n        d = None\n        if test_browser == \"Chrome\":\n>           d = init_remote_driver_chrome()\n\nconftest.py:278: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nconftest.py:329: in init_remote_driver_chrome\n    driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=chrome_options)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__\n    super().__init__(\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/chromium/webdriver.py:55: in __init__\n    self.service.start()\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/common/service.py:98: in start\n    self._start_process(self._path)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/common/service.py:208: in _start_process\n    self.process = subprocess.Popen(\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/subprocess.py:1026: in __init__\n    self._execute_child(args, executable, preexec_fn, close_fds,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Popen: returncode: 255 args: ['/home/runner/.wdm/drivers/chromedriver/linux...>\nargs = ['/home/runner/.wdm/drivers/chromedriver/linux64/127.0.6533.88/chromedriver-linux64/THIRD_PARTY_NOTICES.chromedriver', '--port=41715']\nexecutable = b'/home/runner/.wdm/drivers/chromedriver/linux64/127.0.6533.88/chromedriver-linux64/THIRD_PARTY_NOTICES.chromedriver'\npreexec_fn = None, close_fds = True, pass_fds = (), cwd = None\nenv = environ({'SELENIUM_JAR_PATH': '/usr/share/java/selenium-server.jar', 'CONDA': '/usr/share/miniconda', 'GITHUB_WORKSPAC...Manual_test.py::TestManualDetectedBugs::test_038[Chrome-test001.miketar+1@gmail.com-Qwer1234-!@#$-NoReg-ua-] (setup)'})\nstartupinfo = None, creationflags = 0, shell = False, p2cread = 11\np2cwrite = 12, c2pread = -1, c2pwrite = 13, errread = -1, errwrite = 13\nrestore_signals = True, gid = None, gids = None, uid = None, umask = -1\nstart_new_session = False, process_group = -1\n\n    def _execute_child(self, args, executable, preexec_fn, close_fds,\n                       pass_fds, cwd, env,\n                       startupinfo, creationflags, shell,\n                       p2cread, p2cwrite,\n                       c2pread, c2pwrite,\n                       errread, errwrite,\n                       restore_signals,\n                       gid, gids, uid, umask,\n                       start_new_session, process_group):\n        \"\"\"Execute program (POSIX version)\"\"\"\n    \n        if isinstance(args, (str, bytes)):\n            args = [args]\n        elif isinstance(args, os.PathLike):\n            if shell:\n                raise TypeError('path-like args is not allowed when '\n                                'shell is true')\n            args = [args]\n        else:\n            args = list(args)\n    \n        if shell:\n            # On Android the default shell is at '/system/bin/sh'.\n            unix_shell = ('/system/bin/sh' if\n                      hasattr(sys, 'getandroidapilevel') else '/bin/sh')\n            args = [unix_shell, \"-c\"] + args\n            if executable:\n                args[0] = executable\n    \n        if executable is None:\n            executable = args[0]\n    \n        sys.audit(\"subprocess.Popen\", executable, args, cwd, env)\n    \n        if (_USE_POSIX_SPAWN\n                and os.path.dirname(executable)\n                and preexec_fn is None\n                and not close_fds\n                and not pass_fds\n                and cwd is None\n                and (p2cread == -1 or p2cread > 2)\n                and (c2pwrite == -1 or c2pwrite > 2)\n                and (errwrite == -1 or errwrite > 2)\n                and not start_new_session\n                and process_group == -1\n                and gid is None\n                and gids is None\n                and uid is None\n                and umask < 0):\n            self._posix_spawn(args, executable, env, restore_signals,\n                              p2cread, p2cwrite,\n                              c2pread, c2pwrite,\n                              errread, errwrite)\n            return\n    \n        orig_executable = executable\n    \n        # For transferring possible exec failure from child to parent.\n        # Data format: \"exception name:hex errno:description\"\n        # Pickle is not used; it is complex and involves memory allocation.\n        errpipe_read, errpipe_write = os.pipe()\n        # errpipe_write must not be in the standard io 0, 1, or 2 fd range.\n        low_fds_to_close = []\n        while errpipe_write < 3:\n            low_fds_to_close.append(errpipe_write)\n            errpipe_write = os.dup(errpipe_write)\n        for low_fd in low_fds_to_close:\n            os.close(low_fd)\n        try:\n            try:\n                # We must avoid complex work that could involve\n                # malloc or free in the child process to avoid\n                # potential deadlocks, thus we do all this here.\n                # and pass it to fork_exec()\n    \n                if env is not None:\n                    env_list = []\n                    for k, v in env.items():\n                        k = os.fsencode(k)\n                        if b'=' in k:\n                            raise ValueError(\"illegal environment variable name\")\n                        env_list.append(k + b'=' + os.fsencode(v))\n                else:\n                    env_list = None  # Use execv instead of execve.\n                executable = os.fsencode(executable)\n                if os.path.dirname(executable):\n                    executable_list = (executable,)\n                else:\n                    # This matches the behavior of os._execvpe().\n                    executable_list = tuple(\n                        os.path.join(os.fsencode(dir), executable)\n                        for dir in os.get_exec_path(env))\n                fds_to_keep = set(pass_fds)\n                fds_to_keep.add(errpipe_write)\n                self.pid = _fork_exec(\n                        args, executable_list,\n                        close_fds, tuple(sorted(map(int, fds_to_keep))),\n                        cwd, env_list,\n                        p2cread, p2cwrite, c2pread, c2pwrite,\n                        errread, errwrite,\n                        errpipe_read, errpipe_write,\n                        restore_signals, start_new_session,\n                        process_group, gid, gids, uid, umask,\n                        preexec_fn, _USE_VFORK)\n                self._child_created = True\n            finally:\n                # be sure the FD is closed no matter what\n                os.close(errpipe_write)\n    \n            self._close_pipe_fds(p2cread, p2cwrite,\n                                 c2pread, c2pwrite,\n                                 errread, errwrite)\n    \n            # Wait for exec to fail or succeed; possibly raising an\n            # exception (limited in size)\n            errpipe_data = bytearray()\n            while True:\n                part = os.read(errpipe_read, 50000)\n                errpipe_data += part\n                if not part or len(errpipe_data) > 50000:\n                    break\n        finally:\n            # be sure the FD is closed no matter what\n            os.close(errpipe_read)\n    \n        if errpipe_data:\n            try:\n                pid, sts = os.waitpid(self.pid, 0)\n                if pid == self.pid:\n                    self._handle_exitstatus(sts)\n                else:\n                    self.returncode = sys.maxsize\n            except ChildProcessError:\n                pass\n    \n            try:\n                exception_name, hex_errno, err_msg = (\n                        errpipe_data.split(b':', 2))\n                # The encoding here should match the encoding\n                # written in by the subprocess implementations\n                # like _posixsubprocess\n                err_msg = err_msg.decode()\n            except ValueError:\n                exception_name = b'SubprocessError'\n                hex_errno = b'0'\n                err_msg = 'Bad exception data from child: {!r}'.format(\n                              bytes(errpipe_data))\n            child_exception_type = getattr(\n                    builtins, exception_name.decode('ascii'),\n                    SubprocessError)\n            if issubclass(child_exception_type, OSError) and hex_errno:\n                errno_num = int(hex_errno, 16)\n                if err_msg == \"noexec:chdir\":\n                    err_msg = \"\"\n                    # The error must be from chdir(cwd).\n                    err_filename = cwd\n                elif err_msg == \"noexec\":\n                    err_msg = \"\"\n                    err_filename = None\n                else:\n                    err_filename = orig_executable\n                if errno_num != 0:\n                    err_msg = os.strerror(errno_num)\n                if err_filename is not None:\n>                   raise child_exception_type(errno_num, err_msg, err_filename)\nE                   OSError: [Errno 8] Exec format error: '/home/runner/.wdm/drivers/chromedriver/linux64/127.0.6533.88/chromedriver-linux64/THIRD_PARTY_NOTICES.chromedriver'\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/subprocess.py:1955: OSError","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"d","time":{"start":1722526190072,"stop":1722526190161,"duration":89},"status":"broken","statusMessage":"OSError: [Errno 8] Exec format error: '/home/runner/.wdm/drivers/chromedriver/linux64/127.0.6533.88/chromedriver-linux64/THIRD_PARTY_NOTICES.chromedriver'\n","statusTrace":"  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/pluggy/_callers.py\", line 167, in _multicall\n    teardown.throw(outcome._exception)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/_pytest/setuponly.py\", line 36, in pytest_fixture_setup\n    return (yield)\n            ^^^^^\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/pluggy/_callers.py\", line 103, in _multicall\n    res = hook_impl.function(*args)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py\", line 1139, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py\", line 890, in call_fixture_func\n    fixture_result = next(generator)\n                     ^^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/conftest.py\", line 278, in d\n    d = init_remote_driver_chrome()\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/conftest.py\", line 329, in init_remote_driver_chrome\n    driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=chrome_options)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/chrome/webdriver.py\", line 45, in __init__\n    super().__init__(\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/chromium/webdriver.py\", line 55, in __init__\n    self.service.start()\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/common/service.py\", line 98, in start\n    self._start_process(self._path)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/common/service.py\", line 208, in _start_process\n    self.process = subprocess.Popen(\n                   ^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/subprocess.py\", line 1026, in __init__\n    self._execute_child(args, executable, preexec_fn, close_fds,\n  File \"/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/subprocess.py\", line 1955, in _execute_child\n    raise child_exception_type(errno_num, err_msg, err_filename)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"tag","value":"bug_038"},{"name":"tag","value":"us_55"},{"name":"parentSuite","value":"tests.US_55_ReTestsManual.mila_podchasova"},{"name":"suite","value":"US_55-mila_podchasova_ReTestsManual_test"},{"name":"subSuite","value":"TestManualDetectedBugs"},{"name":"host","value":"fv-az1022-742"},{"name":"thread","value":"3519-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.US_55_ReTestsManual.mila_podchasova.US_55-mila_podchasova_ReTestsManual_test"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"cur_country","value":"'ua'"},{"name":"cur_language","value":"''"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"},{"name":"cur_role","value":"'NoReg'"},{"name":"d","value":"'Chrome'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":15,"broken":1,"skipped":0,"passed":0,"unknown":0,"total":16},"items":[{"uid":"c4c71bc9262b9489","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/70//#testresult/c4c71bc9262b9489","status":"failed","statusDetails":"AssertionError: Bug#038.Expected result:The Desktop Trading page is opened\nActual result: The Home page is opened","time":{"start":1722460092204,"stop":1722460106581,"duration":14377}},{"uid":"b5444dac355dd583","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/69//#testresult/b5444dac355dd583","status":"failed","statusDetails":"AssertionError: Bug#038.Expected result:The Desktop Trading page is opened\nActual result: The Home page is opened","time":{"start":1722370646790,"stop":1722370661022,"duration":14232}},{"uid":"6aa275d68817b713","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/68//#testresult/6aa275d68817b713","status":"failed","statusDetails":"AssertionError: Bug#038.Expected result:The Desktop Trading page is opened\nActual result: The Home page is opened","time":{"start":1722351775971,"stop":1722351790481,"duration":14510}},{"uid":"7f96cd436e17b355","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/67//#testresult/7f96cd436e17b355","status":"failed","statusDetails":"AssertionError: Bug#038.Expected result:The Desktop Trading page is opened\nActual result: The Home page is opened","time":{"start":1722246386724,"stop":1722246406567,"duration":19843}},{"uid":"1b3bcc0454b4847c","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/66//#testresult/1b3bcc0454b4847c","status":"failed","statusDetails":"AssertionError: Bug#038.Expected result:The Desktop Trading page is opened\nActual result: The Home page is opened","time":{"start":1722005983594,"stop":1722005997884,"duration":14290}},{"uid":"4695dff70af1ba34","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/65//#testresult/4695dff70af1ba34","status":"failed","statusDetails":"AssertionError: Bug#038.Expected result:The Desktop Trading page is opened\nActual result: The Home page is opened","time":{"start":1721894799944,"stop":1721894814243,"duration":14299}},{"uid":"d511106b94c27ccb","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/63//#testresult/d511106b94c27ccb","status":"failed","statusDetails":"AssertionError: Bug#038.Expected result:The Desktop Trading page is opened\nActual result: The Home page is opened","time":{"start":1721846721259,"stop":1721846735808,"duration":14549}},{"uid":"64513fe9ee66b754","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/62//#testresult/64513fe9ee66b754","status":"failed","statusDetails":"AssertionError: Bug#038.Expected result:The Desktop Trading page is opened\nActual result: The Home page is opened","time":{"start":1721792144198,"stop":1721792158471,"duration":14273}},{"uid":"9fd4008e318f6a2c","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/61//#testresult/9fd4008e318f6a2c","status":"failed","statusDetails":"AssertionError: Bug#038.Expected result:The Desktop Trading page is opened\nActual result: The Home page is opened","time":{"start":1721686938301,"stop":1721686952466,"duration":14165}},{"uid":"8012e91e5db06c08","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/60//#testresult/8012e91e5db06c08","status":"failed","statusDetails":"AssertionError: Bug#038.Expected result:The Desktop Trading page is opened\nActual result: The Home page is opened","time":{"start":1721638124073,"stop":1721638138316,"duration":14243}},{"uid":"643feefb5e04b154","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/57//#testresult/643feefb5e04b154","status":"failed","statusDetails":"AssertionError: Bug#038.Expected result:The Desktop Trading page is opened\nActual result: The Home page is opened","time":{"start":1721388025764,"stop":1721388040557,"duration":14793}},{"uid":"3a2d840cb90b47c9","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/56//#testresult/3a2d840cb90b47c9","status":"failed","statusDetails":"AssertionError: Bug#038.Expected result:The Desktop Trading page is opened\nActual result: The Home page is opened","time":{"start":1721315728690,"stop":1721315743447,"duration":14757}},{"uid":"c1c36a9b354bfef1","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/55//#testresult/c1c36a9b354bfef1","status":"failed","statusDetails":"AssertionError: Bug#038.Expected result:The Desktop Trading page is opened\nActual result: The Home page is opened","time":{"start":1721255453507,"stop":1721255469018,"duration":15511}},{"uid":"429abfe0f60412d9","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/54//#testresult/429abfe0f60412d9","status":"failed","statusDetails":"AssertionError: Bug#038.Expected result:The Desktop Trading page is opened\nActual result: The Home page is opened","time":{"start":1721154580027,"stop":1721154594502,"duration":14475}},{"uid":"e77aa2c75e6ccda","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/53//#testresult/e77aa2c75e6ccda","status":"failed","statusDetails":"AssertionError: Bug#038.Expected result:The Desktop Trading page is opened\nActual result: The Home page is opened","time":{"start":1721142517650,"stop":1721142531809,"duration":14159}}]},"tags":["us_55","bug_038"]},"source":"a68889b0795bdd51.json","parameterValues":["'ua'","''","'test001.miketar+1@gmail.com'","'Qwer1234-!@#$'","'NoReg'","'Chrome'"]}