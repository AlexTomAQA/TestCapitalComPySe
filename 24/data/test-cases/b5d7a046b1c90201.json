{"uid":"b5d7a046b1c90201","name":"TC_11.02.02.00_10 | Testing button in block [Vertical banner]. Bid:11.02.02.00_10-ro.ae.NoReg","fullName":"tests.US_11_Education.US_11-02-02_Shares_trading.US_11-02-02-00_Shares_trading_test.TestSharesTrading#test_10_block_vert_banner_button","historyId":"9436f4eb9c98ac0364cc86fa5bec421f","time":{"start":1709832635320,"stop":1709832641818,"duration":6498},"description":"\n                Check the [Button] on the Vertical side banner at the bottom of the page.\n                For \"Authorized user\" role:\n                The trading platform page is opened depend on the banner [type-id]:\n                        Live mode if the banner in the Live mode banners list\n                        Demo mode if the banner in the Demo mode banners list\n                ","descriptionHtml":"<pre><code>            Check the [Button] on the Vertical side banner at the bottom of the page.\n            For &quot;Authorized user&quot; role:\n            The trading platform page is opened depend on the banner [type-id]:\n                    Live mode if the banner in the Live mode banners list\n                    Demo mode if the banner in the Demo mode banners list\n</code></pre>\n","status":"failed","statusMessage":"Failed: Button on Vertical banner not clicked","statusTrace":"self = <pages.Elements.VerticalBannerButton.ButtonOnVerticalBanner object at 0x7f0c63be3650>\n\n    @allure.step(\"Click button [BUTTON_ON_VER_BANNER]\")\n    def element_click(self):\n        print(f\"\\n{datetime.now()}   2. Act\")\n    \n        time_out = 5\n        button_list = self.driver.find_elements(*ButtonOnVerticalBannerLocators.BUTTON_ON_VER_BANNER)\n        web_element = self.element_is_clickable(button_list[0], time_out)\n        if not web_element:\n            print(f\"\\n{datetime.now()}   => Button on Vertical banner not clickable after {time_out} sec.\")\n            pytest.fail(f\"Button on Vertical banner not clickable after {time_out} sec.\")\n        print(f\"\\n{datetime.now()}   => Button on Vertical banner clickable\")\n    \n        data_type = web_element.get_attribute(\"data-type\")\n        data_id = data_type.split('_')[-1]\n        print(f\"\\n{datetime.now()}   data_id = {data_id}\")\n    \n        try:\n            # self.driver.execute_script(\"arguments[0].click();\", web_element)\n>           web_element.click()\n\npages/Elements/VerticalBannerButton.py:100: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f0c66767bf0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x557e2c348683 \\\\u003Cunknown>\\\\n#21 0x557e2c359044 \\\\u003Cunknown>\\\\n#22 0x7fecb2094ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"https://capital.com/trading/signup\" data-link=\"uu\" class=\"button-main rounded-lg __cp_b __cp_bs js-analyticsClick\" data-type=\"b_vert_v0_377\">...</a> is not clickable at point (1078, 322). Other element would receive the click: <div class=\"overlay\" id=\"l_overlay\">...</div>\nE         (Session info: chrome=122.0.6261.94)\nE       Stacktrace:\nE       #0 0x557e2c359e93 <unknown>\nE       #1 0x557e2c051ce6 <unknown>\nE       #2 0x557e2c0a3a73 <unknown>\nE       #3 0x557e2c0a198e <unknown>\nE       #4 0x557e2c09f367 <unknown>\nE       #5 0x557e2c09e732 <unknown>\nE       #6 0x557e2c091d27 <unknown>\nE       #7 0x557e2c0beeb2 <unknown>\nE       #8 0x557e2c0916b8 <unknown>\nE       #9 0x557e2c0bf07e <unknown>\nE       #10 0x557e2c0dd899 <unknown>\nE       #11 0x557e2c0bec53 <unknown>\nE       #12 0x557e2c08fdb3 <unknown>\nE       #13 0x557e2c09077e <unknown>\nE       #14 0x557e2c31f7cb <unknown>\nE       #15 0x557e2c3237e5 <unknown>\nE       #16 0x557e2c30d0e1 <unknown>\nE       #17 0x557e2c324372 <unknown>\nE       #18 0x557e2c2f11bf <unknown>\nE       #19 0x557e2c348488 <unknown>\nE       #20 0x557e2c348683 <unknown>\nE       #21 0x557e2c359044 <unknown>\nE       #22 0x7fecb2094ac3 <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <US_11-02-02-00_Shares_trading_test.TestSharesTrading object at 0x7f0c63e24200>\nworker_id = 'master'\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"347b3e0cb45be937c54ea0e825ef1308\")>\ncur_language = 'ro', cur_country = 'ae', cur_role = 'NoReg'\ncur_login = 'test001.miketar+1@gmail.com', cur_password = 'Qwer1234-!@#$'\n\n    @allure.step(\"Start test of button in block [Vertical banner]\")\n    # @pytest.mark.skip(reason=\"Skipped for debugging\")\n    @pytest.mark.test_10\n    def test_10_block_vert_banner_button(\n            self, worker_id, d, cur_language, cur_country, cur_role, cur_login, cur_password):\n        \"\"\"\n                Check the [Button] on the Vertical side banner at the bottom of the page.\n                For \"Authorized user\" role:\n                The trading platform page is opened depend on the banner [type-id]:\n                        Live mode if the banner in the Live mode banners list\n                        Demo mode if the banner in the Demo mode banners list\n                \"\"\"\n    \n        bid = build_dynamic_arg_v4(\n            d, worker_id, cur_language, cur_country, cur_role,\n            \"11.02.02\", \"Education > Menu item [Shares trading]\",\n            \".00_10\", \"Testing button in block [Vertical banner]\")\n    \n        Common().check_country_in_list_and_skip_if_present(cur_country, [\"gb\"])\n        Common().skip_if_eng_lang_and_fca_license(cur_language, cur_country)\n        check_language(cur_language)\n        if cur_language in [\"\", \"ar\", \"it\", \"cn\"]:\n            Common().skip_test_for_language(cur_language)\n    \n        # test_element.arrange_0()\n        page_conditions = Conditions(d, \"\")\n        main_page_link = page_conditions.preconditions(\n            d, CapitalComPageSrc.URL, \"\", cur_language, cur_country, cur_role, cur_login, cur_password)\n    \n        # банеры должны открываться в Demo mode for US_00\n        banner00_ver_tpd = ['505', '221', '389']\n        # банеры должны открываться в Live mode for US_00\n        banner00_ver_tp = ['166', '196', '292', '377', '388', '425']\n        # банеры должны открываться в Demo mode for US_01\n        banner01_ver_tpd = []\n        # банеры должны открываться в Live mode for US_01\n        banner01_ver_tp = []\n    \n        page_menu = MenuSection(d, main_page_link)\n        cur_menu_link = page_menu.open_education_shares_trading_menu(d, cur_language, cur_country, main_page_link)\n    \n        test_element = ButtonOnVerticalBanner(d, cur_menu_link, bid)\n>       test_element.full_test_with_tpi(d, cur_language, cur_country, cur_role, cur_menu_link, banner00_ver_tpd,\n                                        banner00_ver_tp, banner01_ver_tpd, banner01_ver_tp)\n\ntests/US_11_Education/US_11-02-02_Shares_trading/US_11-02-02-00_Shares_trading_test.py:251: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/Elements/VerticalBannerButton.py:27: in full_test_with_tpi\n    data_id = self.element_click()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.Elements.VerticalBannerButton.ButtonOnVerticalBanner object at 0x7f0c63be3650>\n\n    @allure.step(\"Click button [BUTTON_ON_VER_BANNER]\")\n    def element_click(self):\n        print(f\"\\n{datetime.now()}   2. Act\")\n    \n        time_out = 5\n        button_list = self.driver.find_elements(*ButtonOnVerticalBannerLocators.BUTTON_ON_VER_BANNER)\n        web_element = self.element_is_clickable(button_list[0], time_out)\n        if not web_element:\n            print(f\"\\n{datetime.now()}   => Button on Vertical banner not clickable after {time_out} sec.\")\n            pytest.fail(f\"Button on Vertical banner not clickable after {time_out} sec.\")\n        print(f\"\\n{datetime.now()}   => Button on Vertical banner clickable\")\n    \n        data_type = web_element.get_attribute(\"data-type\")\n        data_id = data_type.split('_')[-1]\n        print(f\"\\n{datetime.now()}   data_id = {data_id}\")\n    \n        try:\n            # self.driver.execute_script(\"arguments[0].click();\", web_element)\n            web_element.click()\n            print(f\"{datetime.now()}   => BUTTON_ON_VER_BANNER clicked!\")\n        except ElementClickInterceptedException:\n            print(f\"{datetime.now()}   => BUTTON_ON_VER_BANNER NOT CLICKED\")\n>           pytest.fail(\"Button on Vertical banner not clicked\")\nE           Failed: Button on Vertical banner not clicked\n\npages/Elements/VerticalBannerButton.py:104: Failed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"d","time":{"start":1709832420521,"stop":1709832420929,"duration":408},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_language","time":{"start":1709832420929,"stop":1709832420929,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"worker_id","time":{"start":1709832420929,"stop":1709832420929,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_country","time":{"start":1709832420929,"stop":1709832420929,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_login","time":{"start":1709832420930,"stop":1709832420930,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_password","time":{"start":1709832420930,"stop":1709832420930,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_role","time":{"start":1709832580930,"stop":1709832580930,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"\n                Check the [Button] on the Vertical side banner at the bottom of the page.\n                For \"Authorized user\" role:\n                The trading platform page is opened depend on the banner [type-id]:\n                        Live mode if the banner in the Live mode banners list\n                        Demo mode if the banner in the Demo mode banners list\n                ","status":"failed","statusMessage":"Failed: Button on Vertical banner not clicked","statusTrace":"self = <pages.Elements.VerticalBannerButton.ButtonOnVerticalBanner object at 0x7f0c63be3650>\n\n    @allure.step(\"Click button [BUTTON_ON_VER_BANNER]\")\n    def element_click(self):\n        print(f\"\\n{datetime.now()}   2. Act\")\n    \n        time_out = 5\n        button_list = self.driver.find_elements(*ButtonOnVerticalBannerLocators.BUTTON_ON_VER_BANNER)\n        web_element = self.element_is_clickable(button_list[0], time_out)\n        if not web_element:\n            print(f\"\\n{datetime.now()}   => Button on Vertical banner not clickable after {time_out} sec.\")\n            pytest.fail(f\"Button on Vertical banner not clickable after {time_out} sec.\")\n        print(f\"\\n{datetime.now()}   => Button on Vertical banner clickable\")\n    \n        data_type = web_element.get_attribute(\"data-type\")\n        data_id = data_type.split('_')[-1]\n        print(f\"\\n{datetime.now()}   data_id = {data_id}\")\n    \n        try:\n            # self.driver.execute_script(\"arguments[0].click();\", web_element)\n>           web_element.click()\n\npages/Elements/VerticalBannerButton.py:100: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f0c66767bf0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x557e2c348683 \\\\u003Cunknown>\\\\n#21 0x557e2c359044 \\\\u003Cunknown>\\\\n#22 0x7fecb2094ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"https://capital.com/trading/signup\" data-link=\"uu\" class=\"button-main rounded-lg __cp_b __cp_bs js-analyticsClick\" data-type=\"b_vert_v0_377\">...</a> is not clickable at point (1078, 322). Other element would receive the click: <div class=\"overlay\" id=\"l_overlay\">...</div>\nE         (Session info: chrome=122.0.6261.94)\nE       Stacktrace:\nE       #0 0x557e2c359e93 <unknown>\nE       #1 0x557e2c051ce6 <unknown>\nE       #2 0x557e2c0a3a73 <unknown>\nE       #3 0x557e2c0a198e <unknown>\nE       #4 0x557e2c09f367 <unknown>\nE       #5 0x557e2c09e732 <unknown>\nE       #6 0x557e2c091d27 <unknown>\nE       #7 0x557e2c0beeb2 <unknown>\nE       #8 0x557e2c0916b8 <unknown>\nE       #9 0x557e2c0bf07e <unknown>\nE       #10 0x557e2c0dd899 <unknown>\nE       #11 0x557e2c0bec53 <unknown>\nE       #12 0x557e2c08fdb3 <unknown>\nE       #13 0x557e2c09077e <unknown>\nE       #14 0x557e2c31f7cb <unknown>\nE       #15 0x557e2c3237e5 <unknown>\nE       #16 0x557e2c30d0e1 <unknown>\nE       #17 0x557e2c324372 <unknown>\nE       #18 0x557e2c2f11bf <unknown>\nE       #19 0x557e2c348488 <unknown>\nE       #20 0x557e2c348683 <unknown>\nE       #21 0x557e2c359044 <unknown>\nE       #22 0x7fecb2094ac3 <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <US_11-02-02-00_Shares_trading_test.TestSharesTrading object at 0x7f0c63e24200>\nworker_id = 'master'\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"347b3e0cb45be937c54ea0e825ef1308\")>\ncur_language = 'ro', cur_country = 'ae', cur_role = 'NoReg'\ncur_login = 'test001.miketar+1@gmail.com', cur_password = 'Qwer1234-!@#$'\n\n    @allure.step(\"Start test of button in block [Vertical banner]\")\n    # @pytest.mark.skip(reason=\"Skipped for debugging\")\n    @pytest.mark.test_10\n    def test_10_block_vert_banner_button(\n            self, worker_id, d, cur_language, cur_country, cur_role, cur_login, cur_password):\n        \"\"\"\n                Check the [Button] on the Vertical side banner at the bottom of the page.\n                For \"Authorized user\" role:\n                The trading platform page is opened depend on the banner [type-id]:\n                        Live mode if the banner in the Live mode banners list\n                        Demo mode if the banner in the Demo mode banners list\n                \"\"\"\n    \n        bid = build_dynamic_arg_v4(\n            d, worker_id, cur_language, cur_country, cur_role,\n            \"11.02.02\", \"Education > Menu item [Shares trading]\",\n            \".00_10\", \"Testing button in block [Vertical banner]\")\n    \n        Common().check_country_in_list_and_skip_if_present(cur_country, [\"gb\"])\n        Common().skip_if_eng_lang_and_fca_license(cur_language, cur_country)\n        check_language(cur_language)\n        if cur_language in [\"\", \"ar\", \"it\", \"cn\"]:\n            Common().skip_test_for_language(cur_language)\n    \n        # test_element.arrange_0()\n        page_conditions = Conditions(d, \"\")\n        main_page_link = page_conditions.preconditions(\n            d, CapitalComPageSrc.URL, \"\", cur_language, cur_country, cur_role, cur_login, cur_password)\n    \n        # банеры должны открываться в Demo mode for US_00\n        banner00_ver_tpd = ['505', '221', '389']\n        # банеры должны открываться в Live mode for US_00\n        banner00_ver_tp = ['166', '196', '292', '377', '388', '425']\n        # банеры должны открываться в Demo mode for US_01\n        banner01_ver_tpd = []\n        # банеры должны открываться в Live mode for US_01\n        banner01_ver_tp = []\n    \n        page_menu = MenuSection(d, main_page_link)\n        cur_menu_link = page_menu.open_education_shares_trading_menu(d, cur_language, cur_country, main_page_link)\n    \n        test_element = ButtonOnVerticalBanner(d, cur_menu_link, bid)\n>       test_element.full_test_with_tpi(d, cur_language, cur_country, cur_role, cur_menu_link, banner00_ver_tpd,\n                                        banner00_ver_tp, banner01_ver_tpd, banner01_ver_tp)\n\ntests/US_11_Education/US_11-02-02_Shares_trading/US_11-02-02-00_Shares_trading_test.py:251: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/Elements/VerticalBannerButton.py:27: in full_test_with_tpi\n    data_id = self.element_click()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.Elements.VerticalBannerButton.ButtonOnVerticalBanner object at 0x7f0c63be3650>\n\n    @allure.step(\"Click button [BUTTON_ON_VER_BANNER]\")\n    def element_click(self):\n        print(f\"\\n{datetime.now()}   2. Act\")\n    \n        time_out = 5\n        button_list = self.driver.find_elements(*ButtonOnVerticalBannerLocators.BUTTON_ON_VER_BANNER)\n        web_element = self.element_is_clickable(button_list[0], time_out)\n        if not web_element:\n            print(f\"\\n{datetime.now()}   => Button on Vertical banner not clickable after {time_out} sec.\")\n            pytest.fail(f\"Button on Vertical banner not clickable after {time_out} sec.\")\n        print(f\"\\n{datetime.now()}   => Button on Vertical banner clickable\")\n    \n        data_type = web_element.get_attribute(\"data-type\")\n        data_id = data_type.split('_')[-1]\n        print(f\"\\n{datetime.now()}   data_id = {data_id}\")\n    \n        try:\n            # self.driver.execute_script(\"arguments[0].click();\", web_element)\n            web_element.click()\n            print(f\"{datetime.now()}   => BUTTON_ON_VER_BANNER clicked!\")\n        except ElementClickInterceptedException:\n            print(f\"{datetime.now()}   => BUTTON_ON_VER_BANNER NOT CLICKED\")\n>           pytest.fail(\"Button on Vertical banner not clicked\")\nE           Failed: Button on Vertical banner not clicked\n\npages/Elements/VerticalBannerButton.py:104: Failed","steps":[{"name":"Start test of button in block [Vertical banner]","time":{"start":1709832635320,"stop":1709832641817,"duration":6497},"status":"failed","statusMessage":"Failed: Button on Vertical banner not clicked\n","statusTrace":"  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/tests/US_11_Education/US_11-02-02_Shares_trading/US_11-02-02-00_Shares_trading_test.py\", line 251, in test_10_block_vert_banner_button\n    test_element.full_test_with_tpi(d, cur_language, cur_country, cur_role, cur_menu_link, banner00_ver_tpd,\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/Elements/VerticalBannerButton.py\", line 27, in full_test_with_tpi\n    data_id = self.element_click()\n              ^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/Elements/VerticalBannerButton.py\", line 104, in element_click\n    pytest.fail(\"Button on Vertical banner not clicked\")\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/_pytest/outcomes.py\", line 188, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n","steps":[{"name":"2024-03-07 17:27:00.500679   Start Building dynamic arguments for allure report generation","time":{"start":1709832635320,"stop":1709832635322,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"347b3e0cb45be937c54ea0e825ef1308\")>"},{"name":"worker_id","value":"'master'"},{"name":"cur_language","value":"'ro'"},{"name":"cur_country","value":"'ae'"},{"name":"cur_role","value":"'NoReg'"},{"name":"us","value":"'11.02.02'"},{"name":"desc_us","value":"'Education > Menu item [Shares trading]'"},{"name":"num_tc","value":"'.00_10'"},{"name":"desc_tc","value":"'Testing button in block [Vertical banner]'"},{"name":"manual","value":"False"},{"name":"new_layout","value":"False"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"2024-03-07 17:27:00.502662   Set preconditions","time":{"start":1709832635322,"stop":1709832636559,"duration":1237},"status":"passed","steps":[{"name":"2024-03-07 17:27:00.501576   Start Checking Captcha","time":{"start":1709832635530,"stop":1709832636556,"duration":1026},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"347b3e0cb45be937c54ea0e825ef1308\")>"},{"name":"host","value":"'https://capital.com'"},{"name":"end_point","value":"''"},{"name":"cur_language","value":"'ro'"},{"name":"cur_country","value":"'ae'"},{"name":"cur_role","value":"'NoReg'"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"}],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"2024-03-07 17:27:00.499984.   Focus moved to 'Education' menu","time":{"start":1709832636565,"stop":1709832638348,"duration":1783},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"347b3e0cb45be937c54ea0e825ef1308\")>"},{"name":"test_language","value":"'ro'"},{"name":"test_country","value":"'ae'"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"2024-03-07 17:27:00.500270.   Click 'Shares trading' submenu.","time":{"start":1709832638348,"stop":1709832639139,"duration":791},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"347b3e0cb45be937c54ea0e825ef1308\")>"},{"name":"test_language","value":"'ro'"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"2024-03-07 17:27:00.494009   Check that form [Sign up] opened","time":{"start":1709832639190,"stop":1709832640712,"duration":1522},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"timeout","value":"1"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Click button [BUTTON_ON_VER_BANNER]","time":{"start":1709832640712,"stop":1709832641817,"duration":1105},"status":"failed","statusMessage":"Failed: Button on Vertical banner not clicked\n","statusTrace":"  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/Elements/VerticalBannerButton.py\", line 104, in element_click\n    pytest.fail(\"Button on Vertical banner not clicked\")\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/_pytest/outcomes.py\", line 188, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"worker_id","value":"'master'"},{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"347b3e0cb45be937c54ea0e825ef1308\")>"},{"name":"cur_language","value":"'ro'"},{"name":"cur_country","value":"'ae'"},{"name":"cur_role","value":"'NoReg'"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"}],"shouldDisplayMessage":false,"stepsCount":7,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"17d7323c649c71f","name":"Screenshot","source":"17d7323c649c71f.png","type":"image/png","size":117774},{"uid":"4900763fb87c476","name":"log","source":"4900763fb87c476.txt","type":"text/plain","size":1389},{"uid":"54109105805de9be","name":"stdout","source":"54109105805de9be.txt","type":"text/plain","size":2366}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":8,"attachmentsCount":3,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"d::0","time":{"start":1709832642032,"stop":1709832642163,"duration":131},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"epic","value":"US_11.02.02 | Education > Menu item [Shares trading]"},{"name":"feature","value":"Language: ro"},{"name":"story","value":"Country: ae / Role: NoReg"},{"name":"tag","value":"test_10"},{"name":"tag","value":"us_11_02_02"},{"name":"parentSuite","value":"tests.US_11_Education.US_11-02-02_Shares_trading"},{"name":"suite","value":"US_11-02-02-00_Shares_trading_test"},{"name":"subSuite","value":"TestSharesTrading"},{"name":"host","value":"fv-az801-462"},{"name":"thread","value":"15473-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.US_11_Education.US_11-02-02_Shares_trading.US_11-02-02-00_Shares_trading_test"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"cur_country","value":"'ae'"},{"name":"cur_language","value":"'ro'"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"},{"name":"cur_role","value":"'NoReg'"},{"name":"d","value":"'Chrome'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["test_10","us_11_02_02"]},"source":"b5d7a046b1c90201.json","parameterValues":["'ae'","'ro'","'test001.miketar+1@gmail.com'","'Qwer1234-!@#$'","'NoReg'","'Chrome'"]}