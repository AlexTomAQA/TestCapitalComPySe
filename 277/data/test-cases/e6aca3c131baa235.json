{"uid":"e6aca3c131baa235","name":"TC_55!621 (Lang: en) | Bid:55!621-en.eu.Auth","fullName":"tests.US_55_ReTestsManual.artemdashkov.US_55-artemdashkov_ReTestsManual_test.TestManualDetected#test_621_start_test_of_reopen_demo_trading_page","historyId":"5f512e5b649e4fb7ebafe8736f0df551","time":{"start":1735861721844,"stop":1735861722872,"duration":1028},"description":"\n        Check:  Click the Menu section [Trading] >\n                Click Menu item [Demo trading] >\n                Click the Menu section [Trading] >\n                Click Menu item [Demo trading] >\n        Language: All\n        License/Country:  ASIC, SCA, CYSEC, FCA\n        Role: NoReg, NoAuth, Auth\n        Author: Artem Dashkov\n        ","descriptionHtml":"<pre><code>    Check:  Click the Menu section [Trading] &gt;\n            Click Menu item [Demo trading] &gt;\n            Click the Menu section [Trading] &gt;\n            Click Menu item [Demo trading] &gt;\n    Language: All\n    License/Country:  ASIC, SCA, CYSEC, FCA\n    Role: NoReg, NoAuth, Auth\n    Author: Artem Dashkov\n</code></pre>\n","status":"broken","statusMessage":"selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: 'url' must be a string\n  (Session info: chrome=131.0.6778.139)\nStacktrace:\n#0 0x564ada7d08fa <unknown>\n#1 0x564ada2e1d20 <unknown>\n#2 0x564ada374273 <unknown>\n#3 0x564ada354af2 <unknown>\n#4 0x564ada373560 <unknown>\n#5 0x564ada354893 <unknown>\n#6 0x564ada32330d <unknown>\n#7 0x564ada32432e <unknown>\n#8 0x564ada79d00b <unknown>\n#9 0x564ada7a0f97 <unknown>\n#10 0x564ada78971c <unknown>\n#11 0x564ada7a1b17 <unknown>\n#12 0x564ada76e6cf <unknown>\n#13 0x564ada7bf6b8 <unknown>\n#14 0x564ada7bf880 <unknown>\n#15 0x564ada7cf776 <unknown>\n#16 0x7f24b7c9ca94 <unknown>\n#17 0x7f24b7d29c3c <unknown>","statusTrace":"self = <US_55-artemdashkov_ReTestsManual_test.TestManualDetected object at 0x7f453ef2ed20>\nworker_id = 'master'\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"adb7e5551cb6f6b89834cdc1d30feffa\")>\ncur_language_country_for_fca_sca_asic_cysec_2_rnd = ['', 'eu']\ncur_role = 'Auth', cur_login = 'test001.miketar+1@gmail.com'\ncur_password = 'Qwer1234-!@#$'\n\n    @allure.step(\"Start test of reopen 'Demo trading' page\")\n    @pytest.mark.parametrize('cur_role', [\"NoReg\", \"Auth\", \"NoAuth\"])\n    @pytest.mark.bug_621\n    def test_621_start_test_of_reopen_demo_trading_page(\n            self, worker_id, d, cur_language_country_for_fca_sca_asic_cysec_2_rnd, cur_role, cur_login, cur_password):\n        \"\"\"\n        Check:  Click the Menu section [Trading] >\n                Click Menu item [Demo trading] >\n                Click the Menu section [Trading] >\n                Click Menu item [Demo trading] >\n        Language: All\n        License/Country:  ASIC, SCA, CYSEC, FCA\n        Role: NoReg, NoAuth, Auth\n        Author: Artem Dashkov\n        \"\"\"\n    \n        bid = build_dynamic_arg_for_us_55(\n            d, worker_id, cur_language_country_for_fca_sca_asic_cysec_2_rnd[0],\n            cur_language_country_for_fca_sca_asic_cysec_2_rnd[1], cur_role,\n            \"55\", \"ReTests of Manual Detected Bugs\",\n            \"621\",\n            \"Click the Menu section [Trading] > \"\n            \"Click Menu item [Demo trading] > \"\n            \"Click the Menu section [Trading] > \"\n            \"Click Menu item [Demo trading].\",\n            False, True\n        )\n        # Arrange\n        # pytest.skip(\"Промежуточная версия\")\n        cur_item_link = apply_preconditions_to_link(d, cur_language_country_for_fca_sca_asic_cysec_2_rnd[0],\n                                                    cur_language_country_for_fca_sca_asic_cysec_2_rnd[1], cur_role, cur_login, cur_password)\n    \n        page_menu = from_trading_menu_open_demo.MenuNewDemo(d, cur_item_link)\n>       link = page_menu.from_trading_menu_open_demo(d, cur_language_country_for_fca_sca_asic_cysec_2_rnd[0],\n                                                     cur_language_country_for_fca_sca_asic_cysec_2_rnd[1], cur_item_link)\n\ntests/US_55_ReTestsManual/artemdashkov/US_55-artemdashkov_ReTestsManual_test.py:1599: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/Menu/New/from_trading_menu_open_demo.py:42: in from_trading_menu_open_demo\n    answer = MenuBase(d, link).move_focus_menu_pause_move_focus_to_submenu_and_click(\npages/Menu/New/menu_new_base.py:26: in move_focus_menu_pause_move_focus_to_submenu_and_click\n    self.open_page()\npages/base_page.py:151: in open_page\n    self.driver.get(link)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:389: in get\n    self.execute(Command.GET, {\"url\": url})\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:380: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f453ef2f680>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"invalid argument: \\'url\\' must be a string\\\\...\\\\n#15 0x564ada7cf776 \\\\u003Cunknown>\\\\n#16 0x7f24b7c9ca94 \\\\u003Cunknown>\\\\n#17 0x7f24b7d29c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: 'url' must be a string\nE         (Session info: chrome=131.0.6778.139)\nE       Stacktrace:\nE       #0 0x564ada7d08fa <unknown>\nE       #1 0x564ada2e1d20 <unknown>\nE       #2 0x564ada374273 <unknown>\nE       #3 0x564ada354af2 <unknown>\nE       #4 0x564ada373560 <unknown>\nE       #5 0x564ada354893 <unknown>\nE       #6 0x564ada32330d <unknown>\nE       #7 0x564ada32432e <unknown>\nE       #8 0x564ada79d00b <unknown>\nE       #9 0x564ada7a0f97 <unknown>\nE       #10 0x564ada78971c <unknown>\nE       #11 0x564ada7a1b17 <unknown>\nE       #12 0x564ada76e6cf <unknown>\nE       #13 0x564ada7bf6b8 <unknown>\nE       #14 0x564ada7bf880 <unknown>\nE       #15 0x564ada7cf776 <unknown>\nE       #16 0x7f24b7c9ca94 <unknown>\nE       #17 0x7f24b7d29c3c <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: InvalidArgumentException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"d","time":{"start":1735857326552,"stop":1735857327186,"duration":634},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"worker_id","time":{"start":1735857327186,"stop":1735857327186,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_password","time":{"start":1735857327186,"stop":1735857327186,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_login","time":{"start":1735857327186,"stop":1735857327186,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_language_country_for_fca_sca_asic_cysec_2_rnd","time":{"start":1735861721843,"stop":1735861721843,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"\n        Check:  Click the Menu section [Trading] >\n                Click Menu item [Demo trading] >\n                Click the Menu section [Trading] >\n                Click Menu item [Demo trading] >\n        Language: All\n        License/Country:  ASIC, SCA, CYSEC, FCA\n        Role: NoReg, NoAuth, Auth\n        Author: Artem Dashkov\n        ","status":"broken","statusMessage":"selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: 'url' must be a string\n  (Session info: chrome=131.0.6778.139)\nStacktrace:\n#0 0x564ada7d08fa <unknown>\n#1 0x564ada2e1d20 <unknown>\n#2 0x564ada374273 <unknown>\n#3 0x564ada354af2 <unknown>\n#4 0x564ada373560 <unknown>\n#5 0x564ada354893 <unknown>\n#6 0x564ada32330d <unknown>\n#7 0x564ada32432e <unknown>\n#8 0x564ada79d00b <unknown>\n#9 0x564ada7a0f97 <unknown>\n#10 0x564ada78971c <unknown>\n#11 0x564ada7a1b17 <unknown>\n#12 0x564ada76e6cf <unknown>\n#13 0x564ada7bf6b8 <unknown>\n#14 0x564ada7bf880 <unknown>\n#15 0x564ada7cf776 <unknown>\n#16 0x7f24b7c9ca94 <unknown>\n#17 0x7f24b7d29c3c <unknown>","statusTrace":"self = <US_55-artemdashkov_ReTestsManual_test.TestManualDetected object at 0x7f453ef2ed20>\nworker_id = 'master'\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"adb7e5551cb6f6b89834cdc1d30feffa\")>\ncur_language_country_for_fca_sca_asic_cysec_2_rnd = ['', 'eu']\ncur_role = 'Auth', cur_login = 'test001.miketar+1@gmail.com'\ncur_password = 'Qwer1234-!@#$'\n\n    @allure.step(\"Start test of reopen 'Demo trading' page\")\n    @pytest.mark.parametrize('cur_role', [\"NoReg\", \"Auth\", \"NoAuth\"])\n    @pytest.mark.bug_621\n    def test_621_start_test_of_reopen_demo_trading_page(\n            self, worker_id, d, cur_language_country_for_fca_sca_asic_cysec_2_rnd, cur_role, cur_login, cur_password):\n        \"\"\"\n        Check:  Click the Menu section [Trading] >\n                Click Menu item [Demo trading] >\n                Click the Menu section [Trading] >\n                Click Menu item [Demo trading] >\n        Language: All\n        License/Country:  ASIC, SCA, CYSEC, FCA\n        Role: NoReg, NoAuth, Auth\n        Author: Artem Dashkov\n        \"\"\"\n    \n        bid = build_dynamic_arg_for_us_55(\n            d, worker_id, cur_language_country_for_fca_sca_asic_cysec_2_rnd[0],\n            cur_language_country_for_fca_sca_asic_cysec_2_rnd[1], cur_role,\n            \"55\", \"ReTests of Manual Detected Bugs\",\n            \"621\",\n            \"Click the Menu section [Trading] > \"\n            \"Click Menu item [Demo trading] > \"\n            \"Click the Menu section [Trading] > \"\n            \"Click Menu item [Demo trading].\",\n            False, True\n        )\n        # Arrange\n        # pytest.skip(\"Промежуточная версия\")\n        cur_item_link = apply_preconditions_to_link(d, cur_language_country_for_fca_sca_asic_cysec_2_rnd[0],\n                                                    cur_language_country_for_fca_sca_asic_cysec_2_rnd[1], cur_role, cur_login, cur_password)\n    \n        page_menu = from_trading_menu_open_demo.MenuNewDemo(d, cur_item_link)\n>       link = page_menu.from_trading_menu_open_demo(d, cur_language_country_for_fca_sca_asic_cysec_2_rnd[0],\n                                                     cur_language_country_for_fca_sca_asic_cysec_2_rnd[1], cur_item_link)\n\ntests/US_55_ReTestsManual/artemdashkov/US_55-artemdashkov_ReTestsManual_test.py:1599: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/Menu/New/from_trading_menu_open_demo.py:42: in from_trading_menu_open_demo\n    answer = MenuBase(d, link).move_focus_menu_pause_move_focus_to_submenu_and_click(\npages/Menu/New/menu_new_base.py:26: in move_focus_menu_pause_move_focus_to_submenu_and_click\n    self.open_page()\npages/base_page.py:151: in open_page\n    self.driver.get(link)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:389: in get\n    self.execute(Command.GET, {\"url\": url})\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:380: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f453ef2f680>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"invalid argument: \\'url\\' must be a string\\\\...\\\\n#15 0x564ada7cf776 \\\\u003Cunknown>\\\\n#16 0x7f24b7c9ca94 \\\\u003Cunknown>\\\\n#17 0x7f24b7d29c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: 'url' must be a string\nE         (Session info: chrome=131.0.6778.139)\nE       Stacktrace:\nE       #0 0x564ada7d08fa <unknown>\nE       #1 0x564ada2e1d20 <unknown>\nE       #2 0x564ada374273 <unknown>\nE       #3 0x564ada354af2 <unknown>\nE       #4 0x564ada373560 <unknown>\nE       #5 0x564ada354893 <unknown>\nE       #6 0x564ada32330d <unknown>\nE       #7 0x564ada32432e <unknown>\nE       #8 0x564ada79d00b <unknown>\nE       #9 0x564ada7a0f97 <unknown>\nE       #10 0x564ada78971c <unknown>\nE       #11 0x564ada7a1b17 <unknown>\nE       #12 0x564ada76e6cf <unknown>\nE       #13 0x564ada7bf6b8 <unknown>\nE       #14 0x564ada7bf880 <unknown>\nE       #15 0x564ada7cf776 <unknown>\nE       #16 0x7f24b7c9ca94 <unknown>\nE       #17 0x7f24b7d29c3c <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: InvalidArgumentException","steps":[{"name":"Start test of reopen 'Demo trading' page","time":{"start":1735861721844,"stop":1735861722872,"duration":1028},"status":"broken","statusMessage":"selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: 'url' must be a string\n  (Session info: chrome=131.0.6778.139)\nStacktrace:\n#0 0x564ada7d08fa <unknown>\n#1 0x564ada2e1d20 <unknown>\n#2 0x564ada374273 <unknown>\n#3 0x564ada354af2 <unknown>\n#4 0x564ada373560 <unknown>\n#5 0x564ada354893 <unknown>\n#6 0x564ada32330d <unknown>\n#7 0x564ada32432e <unknown>\n#8 0x564ada79d00b <unknown>\n#9 0x564ada7a0f97 <unknown>\n#10 0x564ada78971c <unknown>\n#11 0x564ada7a1b17 <unknown>\n#12 0x564ada76e6cf <unknown>\n#13 0x564ada7bf6b8 <unknown>\n#14 0x564ada7bf880 <unknown>\n#15 0x564ada7cf776 <unknown>\n#16 0x7f24b7c9ca94 <unknown>\n#17 0x7f24b7d29c3c <unknown>\n\n","statusTrace":"  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/tests/US_55_ReTestsManual/artemdashkov/US_55-artemdashkov_ReTestsManual_test.py\", line 1599, in test_621_start_test_of_reopen_demo_trading_page\n    link = page_menu.from_trading_menu_open_demo(d, cur_language_country_for_fca_sca_asic_cysec_2_rnd[0],\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/Menu/New/from_trading_menu_open_demo.py\", line 42, in from_trading_menu_open_demo\n    answer = MenuBase(d, link).move_focus_menu_pause_move_focus_to_submenu_and_click(\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/Menu/New/menu_new_base.py\", line 26, in move_focus_menu_pause_move_focus_to_submenu_and_click\n    self.open_page()\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/base_page.py\", line 151, in open_page\n    self.driver.get(link)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 389, in get\n    self.execute(Command.GET, {\"url\": url})\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 380, in execute\n    self.error_handler.check_response(response)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[{"name":"Build dynamic argument for TCs of US_55","time":{"start":1735861721844,"stop":1735861721846,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"adb7e5551cb6f6b89834cdc1d30feffa\")>"},{"name":"worker_id","value":"'master'"},{"name":"cur_language","value":"''"},{"name":"cur_country","value":"'eu'"},{"name":"cur_role","value":"'Auth'"},{"name":"us","value":"'55'"},{"name":"desc_us","value":"'ReTests of Manual Detected Bugs'"},{"name":"num_tc","value":"'621'"},{"name":"desc_tc","value":"'Click the Menu section [Trading] > Click Menu item [Demo trading] > Click the Menu section [Trading] > Click Menu item [Demo trading].'"},{"name":"manual","value":"False"},{"name":"new_layout","value":"True"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Select 'Trading' menu 'Demo' submenu","time":{"start":1735861721846,"stop":1735861722871,"duration":1025},"status":"broken","statusMessage":"selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: 'url' must be a string\n  (Session info: chrome=131.0.6778.139)\nStacktrace:\n#0 0x564ada7d08fa <unknown>\n#1 0x564ada2e1d20 <unknown>\n#2 0x564ada374273 <unknown>\n#3 0x564ada354af2 <unknown>\n#4 0x564ada373560 <unknown>\n#5 0x564ada354893 <unknown>\n#6 0x564ada32330d <unknown>\n#7 0x564ada32432e <unknown>\n#8 0x564ada79d00b <unknown>\n#9 0x564ada7a0f97 <unknown>\n#10 0x564ada78971c <unknown>\n#11 0x564ada7a1b17 <unknown>\n#12 0x564ada76e6cf <unknown>\n#13 0x564ada7bf6b8 <unknown>\n#14 0x564ada7bf880 <unknown>\n#15 0x564ada7cf776 <unknown>\n#16 0x7f24b7c9ca94 <unknown>\n#17 0x7f24b7d29c3c <unknown>\n\n","statusTrace":"  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/Menu/New/from_trading_menu_open_demo.py\", line 42, in from_trading_menu_open_demo\n    answer = MenuBase(d, link).move_focus_menu_pause_move_focus_to_submenu_and_click(\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/Menu/New/menu_new_base.py\", line 26, in move_focus_menu_pause_move_focus_to_submenu_and_click\n    self.open_page()\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/base_page.py\", line 151, in open_page\n    self.driver.get(link)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 389, in get\n    self.execute(Command.GET, {\"url\": url})\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 380, in execute\n    self.error_handler.check_response(response)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"adb7e5551cb6f6b89834cdc1d30feffa\")>"},{"name":"cur_language","value":"''"},{"name":"cur_country","value":"'eu'"},{"name":"link","value":"None"}],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"worker_id","value":"'master'"},{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"adb7e5551cb6f6b89834cdc1d30feffa\")>"},{"name":"cur_language_country_for_fca_sca_asic_cysec_2_rnd","value":"['', 'eu']"},{"name":"cur_role","value":"'Auth'"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"}],"shouldDisplayMessage":false,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"d8b3f0f46d52cacc","name":"Screenshot","source":"d8b3f0f46d52cacc.png","type":"image/png","size":201396},{"uid":"c3979a91c0c4d6cb","name":"stdout","source":"c3979a91c0c4d6cb.txt","type":"text/plain","size":734}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":3,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"d::0","time":{"start":1735861724475,"stop":1735861724975,"duration":500},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"epic","value":"TC_55!621 | Click the Menu section [Trading] > Click Menu item [Demo trading] > Click the Menu section [Trading] > Click Menu item [Demo trading]."},{"name":"feature","value":"Role: Auth"},{"name":"story","value":"Country: eu"},{"name":"tag","value":"bug_621"},{"name":"tag","value":"us_55"},{"name":"parentSuite","value":"tests.US_55_ReTestsManual.artemdashkov"},{"name":"suite","value":"US_55-artemdashkov_ReTestsManual_test"},{"name":"subSuite","value":"TestManualDetected"},{"name":"host","value":"fv-az1074-840"},{"name":"thread","value":"6301-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.US_55_ReTestsManual.artemdashkov.US_55-artemdashkov_ReTestsManual_test"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"cur_language_country_for_fca_sca_asic_cysec_2_rnd","value":"['', 'eu']"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"},{"name":"cur_role","value":"'Auth'"},{"name":"d","value":"'Chrome'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["us_55","bug_621"]},"source":"e6aca3c131baa235.json","parameterValues":["['', 'eu']","'test001.miketar+1@gmail.com'","'Qwer1234-!@#$'","'Auth'","'Chrome'"]}