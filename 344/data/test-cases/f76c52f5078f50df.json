{"uid":"f76c52f5078f50df","name":"TC_55!634 (Lang: en) | Bid:55!634-en.au.NoReg","fullName":"tests.US_55_ReTestsManual.K_Alex_N.US_55_K_Alex_N_ReTestsManual_test.TestForFixedBugs#test_634","historyId":"6ce097adf5fc294e84176f6c071d0d30","time":{"start":1741665986640,"stop":1741666037407,"duration":50767},"description":"\n         Check: Menu section [Markets] > \n                Menu item [Markets analysis] > \n                Article \"Gold price predictions for the next..\" > \n                Click on [Trade now] link > \n                Click on [Close] button\n         Language: EN\n         License: SCA, FCA, CYSEC or ASIC\n         Author: Aleksei Kurochkin\n         ","descriptionHtml":"<pre><code>     Check: Menu section [Markets] &gt; \n            Menu item [Markets analysis] &gt; \n            Article &quot;Gold price predictions for the next..&quot; &gt; \n            Click on [Trade now] link &gt; \n            Click on [Close] button\n     Language: EN\n     License: SCA, FCA, CYSEC or ASIC\n     Author: Aleksei Kurochkin\n</code></pre>\n","status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <b class=\"\">...</b> is not clickable at point (817, 10). Other element would receive the click: <span class=\"text-accord\">...</span>\n  (Session info: chrome=133.0.6943.141)\nStacktrace:\n#0 0x5585d63d014a <unknown>\n#1 0x5585d5e6db80 <unknown>\n#2 0x5585d5ec5eac <unknown>\n#3 0x5585d5ec3d15 <unknown>\n#4 0x5585d5ec13b2 <unknown>\n#5 0x5585d5ec058a <unknown>\n#6 0x5585d5eb30ad <unknown>\n#7 0x5585d5ee4ed2 <unknown>\n#8 0x5585d5eb2a2a <unknown>\n#9 0x5585d5ee509e <unknown>\n#10 0x5585d5f0b14a <unknown>\n#11 0x5585d5ee4ca3 <unknown>\n#12 0x5585d5eb0f08 <unknown>\n#13 0x5585d5eb2071 <unknown>\n#14 0x5585d6399b5b <unknown>\n#15 0x5585d639dae2 <unknown>\n#16 0x5585d6385967 <unknown>\n#17 0x5585d639e6d4 <unknown>\n#18 0x5585d6369c7f <unknown>\n#19 0x5585d63becd8 <unknown>\n#20 0x5585d63beea9 <unknown>\n#21 0x5585d63cefc6 <unknown>\n#22 0x7fab59a9caa4 <unknown>\n#23 0x7fab59b29c3c <unknown>","statusTrace":"self = <US_55_K_Alex_N_ReTestsManual_test.TestForFixedBugs object at 0x7f2b89ef0bc0>\nworker_id = 'master'\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"39eb720aefbc3bc6fd8b996cf3050873\")>\ncur_language = '', cur_country = 'au', cur_role = 'NoReg'\ncur_login = 'test001.miketar+1@gmail.com', cur_password = 'Qwer1234-!@#$'\n\n    @pytest.mark.parametrize('cur_language', [''])\n    @pytest.mark.parametrize('cur_country', ['gb', 'ae', 'au', 'de'])\n    @pytest.mark.parametrize('cur_role', random.sample(['NoAuth', 'NoReg'], 1))\n    def test_634(self, worker_id, d, cur_language, cur_country, cur_role, cur_login, cur_password):\n        \"\"\"\n         Check: Menu section [Markets] >\n                Menu item [Markets analysis] >\n                Article \"Gold price predictions for the next..\" >\n                Click on [Trade now] link >\n                Click on [Close] button\n         Language: EN\n         License: SCA, FCA, CYSEC or ASIC\n         Author: Aleksei Kurochkin\n         \"\"\"\n        test = self\n        self.cur_language = cur_language\n        self.cur_country = cur_country\n        self.driver = d\n    \n        self.bid = build_dynamic_arg_for_us_55(\n            d, worker_id, cur_language, cur_country, cur_role,\n            \"55\", \"ReTests of Manual Detected Bugs\",\n            \"634\",\n            'The loading spinner is displayed continuously on the page \"Gold price '\n            'predictions for the next...\" after click on [Trade now]',\n            False,\n            False\n        )\n    \n        # Arrange\n        self.link = apply_preconditions_to_link(d, cur_language, cur_country, cur_role, cur_login, cur_password)\n        self.bug = Bug634(test)\n        self.bug.open_market_analysis_page(test)\n>       MyCommon.search_and_open_an_article_in_market_analysis_page(d, \"Gold price predictions for the next\")\n\ntests/US_55_ReTestsManual/K_Alex_N/US_55_K_Alex_N_ReTestsManual_test.py:109: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/US_55_ReTestsManual/K_Alex_N/MyCommon.py:50: in search_and_open_an_article_in_market_analysis_page\n    open_the_article()\ntests/US_55_ReTestsManual/K_Alex_N/MyCommon.py:41: in open_the_article\n    driver.find_element(*ARTICLE_LOCATOR).click()\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:380: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f2b89f1ce30>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#21 0x5585d63cefc6 \\\\u003Cunknown>\\\\n#22 0x7fab59a9caa4 \\\\u003Cunknown>\\\\n#23 0x7fab59b29c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <b class=\"\">...</b> is not clickable at point (817, 10). Other element would receive the click: <span class=\"text-accord\">...</span>\nE         (Session info: chrome=133.0.6943.141)\nE       Stacktrace:\nE       #0 0x5585d63d014a <unknown>\nE       #1 0x5585d5e6db80 <unknown>\nE       #2 0x5585d5ec5eac <unknown>\nE       #3 0x5585d5ec3d15 <unknown>\nE       #4 0x5585d5ec13b2 <unknown>\nE       #5 0x5585d5ec058a <unknown>\nE       #6 0x5585d5eb30ad <unknown>\nE       #7 0x5585d5ee4ed2 <unknown>\nE       #8 0x5585d5eb2a2a <unknown>\nE       #9 0x5585d5ee509e <unknown>\nE       #10 0x5585d5f0b14a <unknown>\nE       #11 0x5585d5ee4ca3 <unknown>\nE       #12 0x5585d5eb0f08 <unknown>\nE       #13 0x5585d5eb2071 <unknown>\nE       #14 0x5585d6399b5b <unknown>\nE       #15 0x5585d639dae2 <unknown>\nE       #16 0x5585d6385967 <unknown>\nE       #17 0x5585d639e6d4 <unknown>\nE       #18 0x5585d6369c7f <unknown>\nE       #19 0x5585d63becd8 <unknown>\nE       #20 0x5585d63beea9 <unknown>\nE       #21 0x5585d63cefc6 <unknown>\nE       #22 0x7fab59a9caa4 <unknown>\nE       #23 0x7fab59b29c3c <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"d","time":{"start":1741665816299,"stop":1741665817073,"duration":774},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_password","time":{"start":1741665817074,"stop":1741665817074,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_login","time":{"start":1741665817074,"stop":1741665817074,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"worker_id","time":{"start":1741665817074,"stop":1741665817074,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"\n         Check: Menu section [Markets] > \n                Menu item [Markets analysis] > \n                Article \"Gold price predictions for the next..\" > \n                Click on [Trade now] link > \n                Click on [Close] button\n         Language: EN\n         License: SCA, FCA, CYSEC or ASIC\n         Author: Aleksei Kurochkin\n         ","status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <b class=\"\">...</b> is not clickable at point (817, 10). Other element would receive the click: <span class=\"text-accord\">...</span>\n  (Session info: chrome=133.0.6943.141)\nStacktrace:\n#0 0x5585d63d014a <unknown>\n#1 0x5585d5e6db80 <unknown>\n#2 0x5585d5ec5eac <unknown>\n#3 0x5585d5ec3d15 <unknown>\n#4 0x5585d5ec13b2 <unknown>\n#5 0x5585d5ec058a <unknown>\n#6 0x5585d5eb30ad <unknown>\n#7 0x5585d5ee4ed2 <unknown>\n#8 0x5585d5eb2a2a <unknown>\n#9 0x5585d5ee509e <unknown>\n#10 0x5585d5f0b14a <unknown>\n#11 0x5585d5ee4ca3 <unknown>\n#12 0x5585d5eb0f08 <unknown>\n#13 0x5585d5eb2071 <unknown>\n#14 0x5585d6399b5b <unknown>\n#15 0x5585d639dae2 <unknown>\n#16 0x5585d6385967 <unknown>\n#17 0x5585d639e6d4 <unknown>\n#18 0x5585d6369c7f <unknown>\n#19 0x5585d63becd8 <unknown>\n#20 0x5585d63beea9 <unknown>\n#21 0x5585d63cefc6 <unknown>\n#22 0x7fab59a9caa4 <unknown>\n#23 0x7fab59b29c3c <unknown>","statusTrace":"self = <US_55_K_Alex_N_ReTestsManual_test.TestForFixedBugs object at 0x7f2b89ef0bc0>\nworker_id = 'master'\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"39eb720aefbc3bc6fd8b996cf3050873\")>\ncur_language = '', cur_country = 'au', cur_role = 'NoReg'\ncur_login = 'test001.miketar+1@gmail.com', cur_password = 'Qwer1234-!@#$'\n\n    @pytest.mark.parametrize('cur_language', [''])\n    @pytest.mark.parametrize('cur_country', ['gb', 'ae', 'au', 'de'])\n    @pytest.mark.parametrize('cur_role', random.sample(['NoAuth', 'NoReg'], 1))\n    def test_634(self, worker_id, d, cur_language, cur_country, cur_role, cur_login, cur_password):\n        \"\"\"\n         Check: Menu section [Markets] >\n                Menu item [Markets analysis] >\n                Article \"Gold price predictions for the next..\" >\n                Click on [Trade now] link >\n                Click on [Close] button\n         Language: EN\n         License: SCA, FCA, CYSEC or ASIC\n         Author: Aleksei Kurochkin\n         \"\"\"\n        test = self\n        self.cur_language = cur_language\n        self.cur_country = cur_country\n        self.driver = d\n    \n        self.bid = build_dynamic_arg_for_us_55(\n            d, worker_id, cur_language, cur_country, cur_role,\n            \"55\", \"ReTests of Manual Detected Bugs\",\n            \"634\",\n            'The loading spinner is displayed continuously on the page \"Gold price '\n            'predictions for the next...\" after click on [Trade now]',\n            False,\n            False\n        )\n    \n        # Arrange\n        self.link = apply_preconditions_to_link(d, cur_language, cur_country, cur_role, cur_login, cur_password)\n        self.bug = Bug634(test)\n        self.bug.open_market_analysis_page(test)\n>       MyCommon.search_and_open_an_article_in_market_analysis_page(d, \"Gold price predictions for the next\")\n\ntests/US_55_ReTestsManual/K_Alex_N/US_55_K_Alex_N_ReTestsManual_test.py:109: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/US_55_ReTestsManual/K_Alex_N/MyCommon.py:50: in search_and_open_an_article_in_market_analysis_page\n    open_the_article()\ntests/US_55_ReTestsManual/K_Alex_N/MyCommon.py:41: in open_the_article\n    driver.find_element(*ARTICLE_LOCATOR).click()\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:380: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f2b89f1ce30>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#21 0x5585d63cefc6 \\\\u003Cunknown>\\\\n#22 0x7fab59a9caa4 \\\\u003Cunknown>\\\\n#23 0x7fab59b29c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <b class=\"\">...</b> is not clickable at point (817, 10). Other element would receive the click: <span class=\"text-accord\">...</span>\nE         (Session info: chrome=133.0.6943.141)\nE       Stacktrace:\nE       #0 0x5585d63d014a <unknown>\nE       #1 0x5585d5e6db80 <unknown>\nE       #2 0x5585d5ec5eac <unknown>\nE       #3 0x5585d5ec3d15 <unknown>\nE       #4 0x5585d5ec13b2 <unknown>\nE       #5 0x5585d5ec058a <unknown>\nE       #6 0x5585d5eb30ad <unknown>\nE       #7 0x5585d5ee4ed2 <unknown>\nE       #8 0x5585d5eb2a2a <unknown>\nE       #9 0x5585d5ee509e <unknown>\nE       #10 0x5585d5f0b14a <unknown>\nE       #11 0x5585d5ee4ca3 <unknown>\nE       #12 0x5585d5eb0f08 <unknown>\nE       #13 0x5585d5eb2071 <unknown>\nE       #14 0x5585d6399b5b <unknown>\nE       #15 0x5585d639dae2 <unknown>\nE       #16 0x5585d6385967 <unknown>\nE       #17 0x5585d639e6d4 <unknown>\nE       #18 0x5585d6369c7f <unknown>\nE       #19 0x5585d63becd8 <unknown>\nE       #20 0x5585d63beea9 <unknown>\nE       #21 0x5585d63cefc6 <unknown>\nE       #22 0x7fab59a9caa4 <unknown>\nE       #23 0x7fab59b29c3c <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","steps":[{"name":"Build dynamic argument for TCs of US_55","time":{"start":1741665986640,"stop":1741665986641,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"39eb720aefbc3bc6fd8b996cf3050873\")>"},{"name":"worker_id","value":"'master'"},{"name":"cur_language","value":"''"},{"name":"cur_country","value":"'au'"},{"name":"cur_role","value":"'NoReg'"},{"name":"us","value":"'55'"},{"name":"desc_us","value":"'ReTests of Manual Detected Bugs'"},{"name":"num_tc","value":"'634'"},{"name":"desc_tc","value":"'The loading spinner is displayed continuously on the page \"Gold price predictions for the next...\" after click on [Trade now]'"},{"name":"manual","value":"False"},{"name":"new_layout","value":"False"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"   Set New preconditions","time":{"start":1741665986642,"stop":1741665991951,"duration":5309},"status":"passed","steps":[{"name":"2025-03-11 04:03:36.281369   Set language and country","time":{"start":1741665989196,"stop":1741665991946,"duration":2750},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"39eb720aefbc3bc6fd8b996cf3050873\")>"},{"name":"cur_language","value":"'en'"},{"name":"cur_country","value":"'au'"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"39eb720aefbc3bc6fd8b996cf3050873\")>"},{"name":"host","value":"'https://capital.com/en-gb'"},{"name":"end_point","value":"''"},{"name":"cur_language","value":"''"},{"name":"cur_country","value":"'au'"},{"name":"cur_role","value":"'NoReg'"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"}],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Select \"Markets\" menu, \"Market analysis\" submenu","time":{"start":1741665991951,"stop":1741666000361,"duration":8410},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"39eb720aefbc3bc6fd8b996cf3050873\")>"},{"name":"cur_language","value":"''"},{"name":"cur_country","value":"'au'"},{"name":"link","value":"'https://capital.com/en-au'"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"b1767682d0e737d5","name":"Screenshot","source":"b1767682d0e737d5.png","type":"image/png","size":345099},{"uid":"fd9c14ea84a3660f","name":"stdout","source":"fd9c14ea84a3660f.txt","type":"text/plain","size":2940}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"d::0","time":{"start":1741666487520,"stop":1741666487764,"duration":244},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"epic","value":"TC_55!634 | The loading spinner is displayed continuously on the page \"Gold price predictions for the next...\" after click on [Trade now]"},{"name":"feature","value":"Role: NoReg"},{"name":"story","value":"Country: au"},{"name":"tag","value":"us_55"},{"name":"parentSuite","value":"tests.US_55_ReTestsManual.K_Alex_N"},{"name":"suite","value":"US_55_K_Alex_N_ReTestsManual_test"},{"name":"subSuite","value":"TestForFixedBugs"},{"name":"host","value":"fv-az1940-808"},{"name":"thread","value":"46055-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.US_55_ReTestsManual.K_Alex_N.US_55_K_Alex_N_ReTestsManual_test"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"cur_country","value":"'au'"},{"name":"cur_language","value":"''"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"},{"name":"cur_role","value":"'NoReg'"},{"name":"d","value":"'Chrome'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["us_55"]},"source":"f76c52f5078f50df.json","parameterValues":["'au'","''","'test001.miketar+1@gmail.com'","'Qwer1234-!@#$'","'NoReg'","'Chrome'"]}