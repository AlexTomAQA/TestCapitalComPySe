{"uid":"ec0803122105c1c0","name":"TC_55!359a (Lang: en) | Bid:55!359a-en.ae.NoAuth","fullName":"tests.US_55_ReTestsManual.saii-d3v.US_55-saii-d3v_ReTestsManual_test.TestManualDetectedBugs#test_359a","historyId":"d3b7645a0308573450624b4133eb9028","time":{"start":1743206409447,"stop":1743206415233,"duration":5786},"description":"\n         Check: Error message is displayed after clicking the link “NASDAQ stock exchange”\n         in the block “GOOGL Company profile” on the page “Trade Alphabet Inc - A - GOOGL CFD”\n         Language: EN.\n         License: FCA.\n         Author: Sergey Aiidzhanov\n         ","descriptionHtml":"<pre><code>     Check: Error message is displayed after clicking the link “NASDAQ stock exchange”\n     in the block “GOOGL Company profile” on the page “Trade Alphabet Inc - A - GOOGL CFD”\n     Language: EN.\n     License: FCA.\n     Author: Sergey Aiidzhanov\n</code></pre>\n","status":"failed","statusMessage":"Failed: Bug! 'Login' button is not clicked","statusTrace":"self = <pages.conditions_v2.NewConditions object at 0x7ff90edb0a10>\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"e0870788d4e2475219628d3792ef4893\")>\nlink = 'https://capital.com/en-gb', login = 'test001.miketar+1@gmail.com'\npassword = 'Qwer1234-!@#$', cur_role = 'NoAuth'\n\n    @allure.step(f\"{datetime.now()}   Start Authorization\")\n    # @profile(precision=3)\n    def to_do_authorisation_new(self, d, link, login, password, cur_role):\n        \"\"\"Authorization\"\"\"\n        print(f\"\\n\" f\"{datetime.now()}   Start Authorization\")\n    \n        # Setup wait for later\n        menu = MainMenu(d, link)\n        assert login != \"\", \"Авторизация невозможна. Не указан e-mail\"\n        assert password != \"\", \"Авторизация невозможна. Не указан пароль\"\n    \n        # нажать в хедере на кнопку \"Log in\"\n        try:\n>           menu.element_is_clickable(menu.MENU_LOGIN).click()\n\npages/conditions_v2.py:237: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:380: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7ff90eeaad20>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#21 0x55b68d161e76 \\\\u003Cunknown>\\\\n#22 0x7f3fce49caa4 \\\\u003Cunknown>\\\\n#23 0x7f3fce529c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button class=\"accountBtns_btn__vOcCs accountBtns_btnEmpty__TCWRE helpers_showLg__UPEqH js-analyticsClick js-analyticsVisible\" data-type=\"btn_header_login\" data-testid=\"login_btn\">...</button> is not clickable at point (1385, 121). Other element would receive the click: <div class=\"modal_overlay__f_YlZ modal_mobileBottomAttached__cTOIu\">...</div>\nE         (Session info: chrome=134.0.6998.165)\nE       Stacktrace:\nE       #0 0x55b68d162ffa <unknown>\nE       #1 0x55b68cc21970 <unknown>\nE       #2 0x55b68cc7a1ec <unknown>\nE       #3 0x55b68cc78055 <unknown>\nE       #4 0x55b68cc756f2 <unknown>\nE       #5 0x55b68cc748ca <unknown>\nE       #6 0x55b68cc674cd <unknown>\nE       #7 0x55b68cc99292 <unknown>\nE       #8 0x55b68cc66e4a <unknown>\nE       #9 0x55b68cc9945e <unknown>\nE       #10 0x55b68ccbf70c <unknown>\nE       #11 0x55b68cc99063 <unknown>\nE       #12 0x55b68cc65328 <unknown>\nE       #13 0x55b68cc66491 <unknown>\nE       #14 0x55b68d12a42b <unknown>\nE       #15 0x55b68d12e2ec <unknown>\nE       #16 0x55b68d111a22 <unknown>\nE       #17 0x55b68d12ee64 <unknown>\nE       #18 0x55b68d0f5bef <unknown>\nE       #19 0x55b68d151558 <unknown>\nE       #20 0x55b68d151736 <unknown>\nE       #21 0x55b68d161e76 <unknown>\nE       #22 0x7f3fce49caa4 <unknown>\nE       #23 0x7f3fce529c3c <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <US_55-saii-d3v_ReTestsManual_test.TestManualDetectedBugs object at 0x7ff90ee3bf20>\nworker_id = 'master'\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"e0870788d4e2475219628d3792ef4893\")>\ncur_language = '', cur_country = 'ae', cur_role = 'NoAuth'\ncur_login = 'test001.miketar+1@gmail.com', cur_password = 'Qwer1234-!@#$'\n\n    @allure.step(\n        'Start retest manual TC_55!359a | Error message is displayed after clicking the link “NASDAQ stock exchange” '\n        'in the block “GOOGL Company profile” on the page “Trade Alphabet Inc - A - GOOGL CFD”')\n    @pytest.mark.parametrize('cur_language', [''])\n    @pytest.mark.parametrize('cur_country', ['ae'])\n    @pytest.mark.parametrize('cur_role', ['Auth', 'NoAuth', 'NoReg'])\n    @pytest.mark.bug_359a\n    def test_359a(self, worker_id, d, cur_language, cur_country, cur_role, cur_login, cur_password):\n        \"\"\"\n         Check: Error message is displayed after clicking the link “NASDAQ stock exchange”\n         in the block “GOOGL Company profile” on the page “Trade Alphabet Inc - A - GOOGL CFD”\n         Language: EN.\n         License: FCA.\n         Author: Sergey Aiidzhanov\n         \"\"\"\n        bid = build_dynamic_arg_for_us_55(\n            d, worker_id, cur_language, cur_country, cur_role,\n            \"55\", \"ReTests of Manual Detected Bugs\",\n            \"359a\",\n            'Error message is displayed after clicking the link “NASDAQ stock exchange” '\n            'in the block “GOOGL Company profile” on the page “Trade Alphabet Inc - A - GOOGL CFD”',\n            False,\n            False\n        )\n    \n        # Arrange\n>       link = apply_preconditions_to_link(d, cur_language, cur_country, cur_role, cur_login, cur_password)\n\ntests/US_55_ReTestsManual/saii-d3v/US_55-saii-d3v_ReTestsManual_test.py:969: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/conditions_v2.py:78: in apply_preconditions_to_link\n    return cond.preconditions(d, CapitalComPageSrc.URL_NEW, '', cur_language, cur_country, cur_role,\npages/conditions_v2.py:154: in preconditions\n    self.to_do_authorisation_new(d, host, cur_login, cur_password, cur_role)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.conditions_v2.NewConditions object at 0x7ff90edb0a10>\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"e0870788d4e2475219628d3792ef4893\")>\nlink = 'https://capital.com/en-gb', login = 'test001.miketar+1@gmail.com'\npassword = 'Qwer1234-!@#$', cur_role = 'NoAuth'\n\n    @allure.step(f\"{datetime.now()}   Start Authorization\")\n    # @profile(precision=3)\n    def to_do_authorisation_new(self, d, link, login, password, cur_role):\n        \"\"\"Authorization\"\"\"\n        print(f\"\\n\" f\"{datetime.now()}   Start Authorization\")\n    \n        # Setup wait for later\n        menu = MainMenu(d, link)\n        assert login != \"\", \"Авторизация невозможна. Не указан e-mail\"\n        assert password != \"\", \"Авторизация невозможна. Не указан пароль\"\n    \n        # нажать в хедере на кнопку \"Log in\"\n        try:\n            menu.element_is_clickable(menu.MENU_LOGIN).click()\n        except:\n>           pytest.fail(\"Bug! 'Login' button is not clicked\")\nE           Failed: Bug! 'Login' button is not clicked\n\npages/conditions_v2.py:239: Failed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"d","time":{"start":1743204479933,"stop":1743204480709,"duration":776},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"worker_id","time":{"start":1743204480709,"stop":1743204480709,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_password","time":{"start":1743204480709,"stop":1743204480709,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_login","time":{"start":1743204480709,"stop":1743204480709,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"\n         Check: Error message is displayed after clicking the link “NASDAQ stock exchange”\n         in the block “GOOGL Company profile” on the page “Trade Alphabet Inc - A - GOOGL CFD”\n         Language: EN.\n         License: FCA.\n         Author: Sergey Aiidzhanov\n         ","status":"failed","statusMessage":"Failed: Bug! 'Login' button is not clicked","statusTrace":"self = <pages.conditions_v2.NewConditions object at 0x7ff90edb0a10>\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"e0870788d4e2475219628d3792ef4893\")>\nlink = 'https://capital.com/en-gb', login = 'test001.miketar+1@gmail.com'\npassword = 'Qwer1234-!@#$', cur_role = 'NoAuth'\n\n    @allure.step(f\"{datetime.now()}   Start Authorization\")\n    # @profile(precision=3)\n    def to_do_authorisation_new(self, d, link, login, password, cur_role):\n        \"\"\"Authorization\"\"\"\n        print(f\"\\n\" f\"{datetime.now()}   Start Authorization\")\n    \n        # Setup wait for later\n        menu = MainMenu(d, link)\n        assert login != \"\", \"Авторизация невозможна. Не указан e-mail\"\n        assert password != \"\", \"Авторизация невозможна. Не указан пароль\"\n    \n        # нажать в хедере на кнопку \"Log in\"\n        try:\n>           menu.element_is_clickable(menu.MENU_LOGIN).click()\n\npages/conditions_v2.py:237: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:380: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7ff90eeaad20>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#21 0x55b68d161e76 \\\\u003Cunknown>\\\\n#22 0x7f3fce49caa4 \\\\u003Cunknown>\\\\n#23 0x7f3fce529c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button class=\"accountBtns_btn__vOcCs accountBtns_btnEmpty__TCWRE helpers_showLg__UPEqH js-analyticsClick js-analyticsVisible\" data-type=\"btn_header_login\" data-testid=\"login_btn\">...</button> is not clickable at point (1385, 121). Other element would receive the click: <div class=\"modal_overlay__f_YlZ modal_mobileBottomAttached__cTOIu\">...</div>\nE         (Session info: chrome=134.0.6998.165)\nE       Stacktrace:\nE       #0 0x55b68d162ffa <unknown>\nE       #1 0x55b68cc21970 <unknown>\nE       #2 0x55b68cc7a1ec <unknown>\nE       #3 0x55b68cc78055 <unknown>\nE       #4 0x55b68cc756f2 <unknown>\nE       #5 0x55b68cc748ca <unknown>\nE       #6 0x55b68cc674cd <unknown>\nE       #7 0x55b68cc99292 <unknown>\nE       #8 0x55b68cc66e4a <unknown>\nE       #9 0x55b68cc9945e <unknown>\nE       #10 0x55b68ccbf70c <unknown>\nE       #11 0x55b68cc99063 <unknown>\nE       #12 0x55b68cc65328 <unknown>\nE       #13 0x55b68cc66491 <unknown>\nE       #14 0x55b68d12a42b <unknown>\nE       #15 0x55b68d12e2ec <unknown>\nE       #16 0x55b68d111a22 <unknown>\nE       #17 0x55b68d12ee64 <unknown>\nE       #18 0x55b68d0f5bef <unknown>\nE       #19 0x55b68d151558 <unknown>\nE       #20 0x55b68d151736 <unknown>\nE       #21 0x55b68d161e76 <unknown>\nE       #22 0x7f3fce49caa4 <unknown>\nE       #23 0x7f3fce529c3c <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <US_55-saii-d3v_ReTestsManual_test.TestManualDetectedBugs object at 0x7ff90ee3bf20>\nworker_id = 'master'\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"e0870788d4e2475219628d3792ef4893\")>\ncur_language = '', cur_country = 'ae', cur_role = 'NoAuth'\ncur_login = 'test001.miketar+1@gmail.com', cur_password = 'Qwer1234-!@#$'\n\n    @allure.step(\n        'Start retest manual TC_55!359a | Error message is displayed after clicking the link “NASDAQ stock exchange” '\n        'in the block “GOOGL Company profile” on the page “Trade Alphabet Inc - A - GOOGL CFD”')\n    @pytest.mark.parametrize('cur_language', [''])\n    @pytest.mark.parametrize('cur_country', ['ae'])\n    @pytest.mark.parametrize('cur_role', ['Auth', 'NoAuth', 'NoReg'])\n    @pytest.mark.bug_359a\n    def test_359a(self, worker_id, d, cur_language, cur_country, cur_role, cur_login, cur_password):\n        \"\"\"\n         Check: Error message is displayed after clicking the link “NASDAQ stock exchange”\n         in the block “GOOGL Company profile” on the page “Trade Alphabet Inc - A - GOOGL CFD”\n         Language: EN.\n         License: FCA.\n         Author: Sergey Aiidzhanov\n         \"\"\"\n        bid = build_dynamic_arg_for_us_55(\n            d, worker_id, cur_language, cur_country, cur_role,\n            \"55\", \"ReTests of Manual Detected Bugs\",\n            \"359a\",\n            'Error message is displayed after clicking the link “NASDAQ stock exchange” '\n            'in the block “GOOGL Company profile” on the page “Trade Alphabet Inc - A - GOOGL CFD”',\n            False,\n            False\n        )\n    \n        # Arrange\n>       link = apply_preconditions_to_link(d, cur_language, cur_country, cur_role, cur_login, cur_password)\n\ntests/US_55_ReTestsManual/saii-d3v/US_55-saii-d3v_ReTestsManual_test.py:969: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/conditions_v2.py:78: in apply_preconditions_to_link\n    return cond.preconditions(d, CapitalComPageSrc.URL_NEW, '', cur_language, cur_country, cur_role,\npages/conditions_v2.py:154: in preconditions\n    self.to_do_authorisation_new(d, host, cur_login, cur_password, cur_role)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.conditions_v2.NewConditions object at 0x7ff90edb0a10>\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"e0870788d4e2475219628d3792ef4893\")>\nlink = 'https://capital.com/en-gb', login = 'test001.miketar+1@gmail.com'\npassword = 'Qwer1234-!@#$', cur_role = 'NoAuth'\n\n    @allure.step(f\"{datetime.now()}   Start Authorization\")\n    # @profile(precision=3)\n    def to_do_authorisation_new(self, d, link, login, password, cur_role):\n        \"\"\"Authorization\"\"\"\n        print(f\"\\n\" f\"{datetime.now()}   Start Authorization\")\n    \n        # Setup wait for later\n        menu = MainMenu(d, link)\n        assert login != \"\", \"Авторизация невозможна. Не указан e-mail\"\n        assert password != \"\", \"Авторизация невозможна. Не указан пароль\"\n    \n        # нажать в хедере на кнопку \"Log in\"\n        try:\n            menu.element_is_clickable(menu.MENU_LOGIN).click()\n        except:\n>           pytest.fail(\"Bug! 'Login' button is not clicked\")\nE           Failed: Bug! 'Login' button is not clicked\n\npages/conditions_v2.py:239: Failed","steps":[{"name":"Start retest manual TC_55!359a | Error message is displayed after clicking the link “NASDAQ stock exchange” in the block “GOOGL Company profile” on the page “Trade Alphabet Inc - A - GOOGL CFD”","time":{"start":1743206409447,"stop":1743206415232,"duration":5785},"status":"failed","statusMessage":"Failed: Bug! 'Login' button is not clicked\n","statusTrace":"  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/tests/US_55_ReTestsManual/saii-d3v/US_55-saii-d3v_ReTestsManual_test.py\", line 969, in test_359a\n    link = apply_preconditions_to_link(d, cur_language, cur_country, cur_role, cur_login, cur_password)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/conditions_v2.py\", line 78, in apply_preconditions_to_link\n    return cond.preconditions(d, CapitalComPageSrc.URL_NEW, '', cur_language, cur_country, cur_role,\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/conditions_v2.py\", line 154, in preconditions\n    self.to_do_authorisation_new(d, host, cur_login, cur_password, cur_role)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/conditions_v2.py\", line 239, in to_do_authorisation_new\n    pytest.fail(\"Bug! 'Login' button is not clicked\")\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/_pytest/outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n","steps":[{"name":"Build dynamic argument for TCs of US_55","time":{"start":1743206409447,"stop":1743206409449,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"e0870788d4e2475219628d3792ef4893\")>"},{"name":"worker_id","value":"'master'"},{"name":"cur_language","value":"''"},{"name":"cur_country","value":"'ae'"},{"name":"cur_role","value":"'NoAuth'"},{"name":"us","value":"'55'"},{"name":"desc_us","value":"'ReTests of Manual Detected Bugs'"},{"name":"num_tc","value":"'359a'"},{"name":"desc_tc","value":"'Error message is displayed after clicking the link “NASDAQ stock exchange” in the block “GOOGL Company profile” on the page “Trade Alphabet Inc - A - GOOGL CFD”'"},{"name":"manual","value":"False"},{"name":"new_layout","value":"False"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"   Set New preconditions","time":{"start":1743206409449,"stop":1743206415232,"duration":5783},"status":"failed","statusMessage":"Failed: Bug! 'Login' button is not clicked\n","statusTrace":"  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/conditions_v2.py\", line 154, in preconditions\n    self.to_do_authorisation_new(d, host, cur_login, cur_password, cur_role)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/conditions_v2.py\", line 239, in to_do_authorisation_new\n    pytest.fail(\"Bug! 'Login' button is not clicked\")\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/_pytest/outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n","steps":[{"name":"2025-03-28 23:27:59.867169   Start Authorization","time":{"start":1743206414165,"stop":1743206415231,"duration":1066},"status":"failed","statusMessage":"Failed: Bug! 'Login' button is not clicked\n","statusTrace":"  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/conditions_v2.py\", line 239, in to_do_authorisation_new\n    pytest.fail(\"Bug! 'Login' button is not clicked\")\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/_pytest/outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"e0870788d4e2475219628d3792ef4893\")>"},{"name":"link","value":"'https://capital.com/en-gb'"},{"name":"login","value":"'test001.miketar+1@gmail.com'"},{"name":"password","value":"'Qwer1234-!@#$'"},{"name":"cur_role","value":"'NoAuth'"}],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"e0870788d4e2475219628d3792ef4893\")>"},{"name":"host","value":"'https://capital.com/en-gb'"},{"name":"end_point","value":"''"},{"name":"cur_language","value":"''"},{"name":"cur_country","value":"'ae'"},{"name":"cur_role","value":"'NoAuth'"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"}],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"worker_id","value":"'master'"},{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"e0870788d4e2475219628d3792ef4893\")>"},{"name":"cur_language","value":"''"},{"name":"cur_country","value":"'ae'"},{"name":"cur_role","value":"'NoAuth'"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"}],"shouldDisplayMessage":false,"stepsCount":3,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"daec62f90e325caa","name":"Screenshot","source":"daec62f90e325caa.png","type":"image/png","size":611008},{"uid":"f58519f5ce295ba8","name":"stdout","source":"f58519f5ce295ba8.txt","type":"text/plain","size":1962}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"d::0","time":{"start":1743207145556,"stop":1743207145954,"duration":398},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"epic","value":"TC_55!359a | Error message is displayed after clicking the link “NASDAQ stock exchange” in the block “GOOGL Company profile” on the page “Trade Alphabet Inc - A - GOOGL CFD”"},{"name":"feature","value":"Role: NoAuth"},{"name":"story","value":"Country: ae"},{"name":"tag","value":"bug_359a"},{"name":"tag","value":"us_55"},{"name":"parentSuite","value":"tests.US_55_ReTestsManual.saii-d3v"},{"name":"suite","value":"US_55-saii-d3v_ReTestsManual_test"},{"name":"subSuite","value":"TestManualDetectedBugs"},{"name":"host","value":"fv-az1912-887"},{"name":"thread","value":"20882-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.US_55_ReTestsManual.saii-d3v.US_55-saii-d3v_ReTestsManual_test"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"cur_country","value":"'ae'"},{"name":"cur_language","value":"''"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"},{"name":"cur_role","value":"'NoAuth'"},{"name":"d","value":"'Chrome'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":19,"broken":2,"skipped":0,"passed":0,"unknown":0,"total":21},"items":[{"uid":"beb1297259a33480","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/361//#testresult/beb1297259a33480","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1743120059523,"stop":1743120065589,"duration":6066}},{"uid":"969a8eac022b2e67","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/360//#testresult/969a8eac022b2e67","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1743032855700,"stop":1743032862090,"duration":6390}},{"uid":"ab53853b58b1f28a","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/359//#testresult/ab53853b58b1f28a","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742946447677,"stop":1742946453669,"duration":5992}},{"uid":"b889f7df247e5712","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/358//#testresult/b889f7df247e5712","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742859756479,"stop":1742859762358,"duration":5879}},{"uid":"99890f9edc0b5dcd","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/357//#testresult/99890f9edc0b5dcd","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742773653325,"stop":1742773659112,"duration":5787}},{"uid":"f60270dd3b2bd6a6","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/356//#testresult/f60270dd3b2bd6a6","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742687930630,"stop":1742687936533,"duration":5903}},{"uid":"5b59660340049bf2","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/355//#testresult/5b59660340049bf2","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742601497550,"stop":1742601503409,"duration":5859}},{"uid":"b1779376b25ea01e","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/354//#testresult/b1779376b25ea01e","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742514063730,"stop":1742514069599,"duration":5869}},{"uid":"897b78de650bed29","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/353//#testresult/897b78de650bed29","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742427744419,"stop":1742427750268,"duration":5849}},{"uid":"7391978068dda689","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/352//#testresult/7391978068dda689","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742340826682,"stop":1742340832580,"duration":5898}},{"uid":"5cc99d6288c27b2e","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/351//#testresult/5cc99d6288c27b2e","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742255913522,"stop":1742255919330,"duration":5808}},{"uid":"b91b5dc39e06d0b4","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/350//#testresult/b91b5dc39e06d0b4","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742169432600,"stop":1742169438526,"duration":5926}},{"uid":"ea887c0151449328","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/349//#testresult/ea887c0151449328","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742083232796,"stop":1742083238733,"duration":5937}},{"uid":"51029f39bec878e7","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/348//#testresult/51029f39bec878e7","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1741995797987,"stop":1741995803814,"duration":5827}},{"uid":"cd3c5b45050d705b","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/347//#testresult/cd3c5b45050d705b","status":"failed","statusDetails":"Failed: Bug # 55!359a The ERROR page is opened","time":{"start":1741912385048,"stop":1741912418852,"duration":33804}},{"uid":"e837dafef1a36d45","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/346//#testresult/e837dafef1a36d45","status":"failed","statusDetails":"Failed: Bug # 55!359a The ERROR page is opened","time":{"start":1741825255370,"stop":1741825288973,"duration":33603}},{"uid":"b4d015bc898f57f5","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/345//#testresult/b4d015bc898f57f5","status":"broken","statusDetails":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x55b8c973214a <unknown>\n#1 0x55b8c91cfb80 <unknown>\n#2 0x55b8c92210e9 <unknown>\n#3 0x55b8c9221271 <unknown>\n#4 0x55b8c926fde4 <unknown>\n#5 0x55b8c9246efd <unknown>\n#6 0x55b8c926d14a <unknown>\n#7 0x55b8c9246ca3 <unknown>\n#8 0x55b8c9212f08 <unknown>\n#9 0x55b8c9214071 <unknown>\n#10 0x55b8c96fbb5b <unknown>\n#11 0x55b8c96ffae2 <unknown>\n#12 0x55b8c96e7967 <unknown>\n#13 0x55b8c97006d4 <unknown>\n#14 0x55b8c96cbc7f <unknown>\n#15 0x55b8c9720cd8 <unknown>\n#16 0x55b8c9720ea9 <unknown>\n#17 0x55b8c9730fc6 <unknown>\n#18 0x7f346149caa4 <unknown>\n#19 0x7f3461529c3c <unknown>","time":{"start":1741740947836,"stop":1741743032717,"duration":2084881}},{"uid":"d7e7969bea764e82","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/344//#testresult/d7e7969bea764e82","status":"broken","statusDetails":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x5586b95fe14a <unknown>\n#1 0x5586b909bb80 <unknown>\n#2 0x5586b90ed0e9 <unknown>\n#3 0x5586b90ed271 <unknown>\n#4 0x5586b913bde4 <unknown>\n#5 0x5586b9112efd <unknown>\n#6 0x5586b913914a <unknown>\n#7 0x5586b9112ca3 <unknown>\n#8 0x5586b90def08 <unknown>\n#9 0x5586b90e0071 <unknown>\n#10 0x5586b95c7b5b <unknown>\n#11 0x5586b95cbae2 <unknown>\n#12 0x5586b95b3967 <unknown>\n#13 0x5586b95cc6d4 <unknown>\n#14 0x5586b9597c7f <unknown>\n#15 0x5586b95eccd8 <unknown>\n#16 0x5586b95ecea9 <unknown>\n#17 0x5586b95fcfc6 <unknown>\n#18 0x7fda4749caa4 <unknown>\n#19 0x7fda47529c3c <unknown>","time":{"start":1741655177799,"stop":1741657260665,"duration":2082866}},{"uid":"25e5ce6a0a3981db","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/343//#testresult/25e5ce6a0a3981db","status":"failed","statusDetails":"Failed: Bug # 55!359a The ERROR page is opened","time":{"start":1741566516042,"stop":1741566544717,"duration":28675}},{"uid":"c2041604efb44901","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/342//#testresult/c2041604efb44901","status":"failed","statusDetails":"Failed: Bug # 55!359a The ERROR page is opened","time":{"start":1741479283016,"stop":1741479310662,"duration":27646}}]},"tags":["bug_359a","us_55"]},"source":"ec0803122105c1c0.json","parameterValues":["'ae'","''","'test001.miketar+1@gmail.com'","'Qwer1234-!@#$'","'NoAuth'","'Chrome'"]}