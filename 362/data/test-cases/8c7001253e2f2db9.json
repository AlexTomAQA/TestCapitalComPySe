{"uid":"8c7001253e2f2db9","name":"TC_55!383 (Lang: en) | Bid:55!383-en.ae.NoAuth","fullName":"tests.US_55_ReTestsManual.artemdashkov.US_55-artemdashkov_ReTestsManual_test.TestManualDetected#test_383_link_daniela_hathorn_on_the_page_ecb_preview_does_not_open","historyId":"50d39a37b609baa7d765478dfa606643","time":{"start":1743203790420,"stop":1743203796340,"duration":5920},"description":"\n        Check:  Menu section [Markets] > Menu item [Market analysis] >\n                Find and click article link “ECB Preview: Higher CPI expected to keep Lagarde on a hawkish path” >\n                Click the link 'Daniela Hathorn'\n        Language: EN\n        License/Country: SCA\n        Role: NoReg, NoAuth, Auth\n        Author: Artem Dashkov\n        ","descriptionHtml":"<pre><code>    Check:  Menu section [Markets] &gt; Menu item [Market analysis] &gt;\n            Find and click article link “ECB Preview: Higher CPI expected to keep Lagarde on a hawkish path” &gt;\n            Click the link 'Daniela Hathorn'\n    Language: EN\n    License/Country: SCA\n    Role: NoReg, NoAuth, Auth\n    Author: Artem Dashkov\n</code></pre>\n","status":"failed","statusMessage":"Failed: Bug! 'Login' button is not clicked","statusTrace":"self = <pages.conditions_v2.NewConditions object at 0x7fbf62c1cf20>\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"2a139520e8c5257a49334e41eabdba71\")>\nlink = 'https://capital.com/en-gb', login = 'test001.miketar+1@gmail.com'\npassword = 'Qwer1234-!@#$', cur_role = 'NoAuth'\n\n    @allure.step(f\"{datetime.now()}   Start Authorization\")\n    # @profile(precision=3)\n    def to_do_authorisation_new(self, d, link, login, password, cur_role):\n        \"\"\"Authorization\"\"\"\n        print(f\"\\n\" f\"{datetime.now()}   Start Authorization\")\n    \n        # Setup wait for later\n        menu = MainMenu(d, link)\n        assert login != \"\", \"Авторизация невозможна. Не указан e-mail\"\n        assert password != \"\", \"Авторизация невозможна. Не указан пароль\"\n    \n        # нажать в хедере на кнопку \"Log in\"\n        try:\n>           menu.element_is_clickable(menu.MENU_LOGIN).click()\n\npages/conditions_v2.py:237: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:380: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fbf6408ee40>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#21 0x55581a26fe76 \\\\u003Cunknown>\\\\n#22 0x7f989b69caa4 \\\\u003Cunknown>\\\\n#23 0x7f989b729c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button class=\"accountBtns_btn__vOcCs accountBtns_btnEmpty__TCWRE helpers_showLg__UPEqH js-analyticsClick js-analyticsVisible\" data-type=\"btn_header_login\" data-testid=\"login_btn\">...</button> is not clickable at point (1385, 121). Other element would receive the click: <div class=\"modal_overlay__f_YlZ modal_mobileBottomAttached__cTOIu\">...</div>\nE         (Session info: chrome=134.0.6998.165)\nE       Stacktrace:\nE       #0 0x55581a270ffa <unknown>\nE       #1 0x555819d2f970 <unknown>\nE       #2 0x555819d881ec <unknown>\nE       #3 0x555819d86055 <unknown>\nE       #4 0x555819d836f2 <unknown>\nE       #5 0x555819d828ca <unknown>\nE       #6 0x555819d754cd <unknown>\nE       #7 0x555819da7292 <unknown>\nE       #8 0x555819d74e4a <unknown>\nE       #9 0x555819da745e <unknown>\nE       #10 0x555819dcd70c <unknown>\nE       #11 0x555819da7063 <unknown>\nE       #12 0x555819d73328 <unknown>\nE       #13 0x555819d74491 <unknown>\nE       #14 0x55581a23842b <unknown>\nE       #15 0x55581a23c2ec <unknown>\nE       #16 0x55581a21fa22 <unknown>\nE       #17 0x55581a23ce64 <unknown>\nE       #18 0x55581a203bef <unknown>\nE       #19 0x55581a25f558 <unknown>\nE       #20 0x55581a25f736 <unknown>\nE       #21 0x55581a26fe76 <unknown>\nE       #22 0x7f989b69caa4 <unknown>\nE       #23 0x7f989b729c3c <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <US_55-artemdashkov_ReTestsManual_test.TestManualDetected object at 0x7fbf64244230>\nworker_id = 'master'\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"2a139520e8c5257a49334e41eabdba71\")>\ncur_language = '', cur_country = 'ae', cur_role = 'NoAuth'\ncur_login = 'test001.miketar+1@gmail.com', cur_password = 'Qwer1234-!@#$'\n\n    @allure.step(\"Start test of link 'Daniela Hathorn' on page 'ECB Preview…'\")\n    @pytest.mark.parametrize('cur_language', [\"\"])\n    @pytest.mark.parametrize('cur_country', ['ae'])\n    @pytest.mark.parametrize('cur_role', [\"NoReg\", \"Auth\", \"NoAuth\"])\n    @pytest.mark.bug_383\n    def test_383_link_daniela_hathorn_on_the_page_ecb_preview_does_not_open(\n            self, worker_id, d, cur_language, cur_country, cur_role, cur_login, cur_password):\n        \"\"\"\n        Check:  Menu section [Markets] > Menu item [Market analysis] >\n                Find and click article link “ECB Preview: Higher CPI expected to keep Lagarde on a hawkish path” >\n                Click the link 'Daniela Hathorn'\n        Language: EN\n        License/Country: SCA\n        Role: NoReg, NoAuth, Auth\n        Author: Artem Dashkov\n        \"\"\"\n    \n        bid = build_dynamic_arg_for_us_55(\n            d, worker_id, cur_language, cur_country, cur_role,\n            \"55\", \"ReTests of Manual Detected Bugs\",\n            \"383\",\n            \"Menu section [Markets] > Menu item [Market analysis] > \"\n            \"Find and click article link 'ECB Preview: Higher CPI expected to keep Lagarde on a hawkish path' > \"\n            \"Click the link 'Daniela Hathorn'\",\n            False, True\n        )\n        # pytest.skip(\"Промежуточная версия\")\n        # Arrange\n>       cur_item_link = apply_preconditions_to_link(d, cur_language, cur_country,\n                                                    cur_role, cur_login, cur_password)\n\ntests/US_55_ReTestsManual/artemdashkov/US_55-artemdashkov_ReTestsManual_test.py:1064: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/conditions_v2.py:78: in apply_preconditions_to_link\n    return cond.preconditions(d, CapitalComPageSrc.URL_NEW, '', cur_language, cur_country, cur_role,\npages/conditions_v2.py:154: in preconditions\n    self.to_do_authorisation_new(d, host, cur_login, cur_password, cur_role)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.conditions_v2.NewConditions object at 0x7fbf62c1cf20>\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"2a139520e8c5257a49334e41eabdba71\")>\nlink = 'https://capital.com/en-gb', login = 'test001.miketar+1@gmail.com'\npassword = 'Qwer1234-!@#$', cur_role = 'NoAuth'\n\n    @allure.step(f\"{datetime.now()}   Start Authorization\")\n    # @profile(precision=3)\n    def to_do_authorisation_new(self, d, link, login, password, cur_role):\n        \"\"\"Authorization\"\"\"\n        print(f\"\\n\" f\"{datetime.now()}   Start Authorization\")\n    \n        # Setup wait for later\n        menu = MainMenu(d, link)\n        assert login != \"\", \"Авторизация невозможна. Не указан e-mail\"\n        assert password != \"\", \"Авторизация невозможна. Не указан пароль\"\n    \n        # нажать в хедере на кнопку \"Log in\"\n        try:\n            menu.element_is_clickable(menu.MENU_LOGIN).click()\n        except:\n>           pytest.fail(\"Bug! 'Login' button is not clicked\")\nE           Failed: Bug! 'Login' button is not clicked\n\npages/conditions_v2.py:239: Failed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"d","time":{"start":1743201141858,"stop":1743201142640,"duration":782},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"worker_id","time":{"start":1743201142640,"stop":1743201142640,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_login","time":{"start":1743201142640,"stop":1743201142641,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_password","time":{"start":1743201142641,"stop":1743201142641,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"\n        Check:  Menu section [Markets] > Menu item [Market analysis] >\n                Find and click article link “ECB Preview: Higher CPI expected to keep Lagarde on a hawkish path” >\n                Click the link 'Daniela Hathorn'\n        Language: EN\n        License/Country: SCA\n        Role: NoReg, NoAuth, Auth\n        Author: Artem Dashkov\n        ","status":"failed","statusMessage":"Failed: Bug! 'Login' button is not clicked","statusTrace":"self = <pages.conditions_v2.NewConditions object at 0x7fbf62c1cf20>\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"2a139520e8c5257a49334e41eabdba71\")>\nlink = 'https://capital.com/en-gb', login = 'test001.miketar+1@gmail.com'\npassword = 'Qwer1234-!@#$', cur_role = 'NoAuth'\n\n    @allure.step(f\"{datetime.now()}   Start Authorization\")\n    # @profile(precision=3)\n    def to_do_authorisation_new(self, d, link, login, password, cur_role):\n        \"\"\"Authorization\"\"\"\n        print(f\"\\n\" f\"{datetime.now()}   Start Authorization\")\n    \n        # Setup wait for later\n        menu = MainMenu(d, link)\n        assert login != \"\", \"Авторизация невозможна. Не указан e-mail\"\n        assert password != \"\", \"Авторизация невозможна. Не указан пароль\"\n    \n        # нажать в хедере на кнопку \"Log in\"\n        try:\n>           menu.element_is_clickable(menu.MENU_LOGIN).click()\n\npages/conditions_v2.py:237: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:380: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fbf6408ee40>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#21 0x55581a26fe76 \\\\u003Cunknown>\\\\n#22 0x7f989b69caa4 \\\\u003Cunknown>\\\\n#23 0x7f989b729c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button class=\"accountBtns_btn__vOcCs accountBtns_btnEmpty__TCWRE helpers_showLg__UPEqH js-analyticsClick js-analyticsVisible\" data-type=\"btn_header_login\" data-testid=\"login_btn\">...</button> is not clickable at point (1385, 121). Other element would receive the click: <div class=\"modal_overlay__f_YlZ modal_mobileBottomAttached__cTOIu\">...</div>\nE         (Session info: chrome=134.0.6998.165)\nE       Stacktrace:\nE       #0 0x55581a270ffa <unknown>\nE       #1 0x555819d2f970 <unknown>\nE       #2 0x555819d881ec <unknown>\nE       #3 0x555819d86055 <unknown>\nE       #4 0x555819d836f2 <unknown>\nE       #5 0x555819d828ca <unknown>\nE       #6 0x555819d754cd <unknown>\nE       #7 0x555819da7292 <unknown>\nE       #8 0x555819d74e4a <unknown>\nE       #9 0x555819da745e <unknown>\nE       #10 0x555819dcd70c <unknown>\nE       #11 0x555819da7063 <unknown>\nE       #12 0x555819d73328 <unknown>\nE       #13 0x555819d74491 <unknown>\nE       #14 0x55581a23842b <unknown>\nE       #15 0x55581a23c2ec <unknown>\nE       #16 0x55581a21fa22 <unknown>\nE       #17 0x55581a23ce64 <unknown>\nE       #18 0x55581a203bef <unknown>\nE       #19 0x55581a25f558 <unknown>\nE       #20 0x55581a25f736 <unknown>\nE       #21 0x55581a26fe76 <unknown>\nE       #22 0x7f989b69caa4 <unknown>\nE       #23 0x7f989b729c3c <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <US_55-artemdashkov_ReTestsManual_test.TestManualDetected object at 0x7fbf64244230>\nworker_id = 'master'\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"2a139520e8c5257a49334e41eabdba71\")>\ncur_language = '', cur_country = 'ae', cur_role = 'NoAuth'\ncur_login = 'test001.miketar+1@gmail.com', cur_password = 'Qwer1234-!@#$'\n\n    @allure.step(\"Start test of link 'Daniela Hathorn' on page 'ECB Preview…'\")\n    @pytest.mark.parametrize('cur_language', [\"\"])\n    @pytest.mark.parametrize('cur_country', ['ae'])\n    @pytest.mark.parametrize('cur_role', [\"NoReg\", \"Auth\", \"NoAuth\"])\n    @pytest.mark.bug_383\n    def test_383_link_daniela_hathorn_on_the_page_ecb_preview_does_not_open(\n            self, worker_id, d, cur_language, cur_country, cur_role, cur_login, cur_password):\n        \"\"\"\n        Check:  Menu section [Markets] > Menu item [Market analysis] >\n                Find and click article link “ECB Preview: Higher CPI expected to keep Lagarde on a hawkish path” >\n                Click the link 'Daniela Hathorn'\n        Language: EN\n        License/Country: SCA\n        Role: NoReg, NoAuth, Auth\n        Author: Artem Dashkov\n        \"\"\"\n    \n        bid = build_dynamic_arg_for_us_55(\n            d, worker_id, cur_language, cur_country, cur_role,\n            \"55\", \"ReTests of Manual Detected Bugs\",\n            \"383\",\n            \"Menu section [Markets] > Menu item [Market analysis] > \"\n            \"Find and click article link 'ECB Preview: Higher CPI expected to keep Lagarde on a hawkish path' > \"\n            \"Click the link 'Daniela Hathorn'\",\n            False, True\n        )\n        # pytest.skip(\"Промежуточная версия\")\n        # Arrange\n>       cur_item_link = apply_preconditions_to_link(d, cur_language, cur_country,\n                                                    cur_role, cur_login, cur_password)\n\ntests/US_55_ReTestsManual/artemdashkov/US_55-artemdashkov_ReTestsManual_test.py:1064: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/conditions_v2.py:78: in apply_preconditions_to_link\n    return cond.preconditions(d, CapitalComPageSrc.URL_NEW, '', cur_language, cur_country, cur_role,\npages/conditions_v2.py:154: in preconditions\n    self.to_do_authorisation_new(d, host, cur_login, cur_password, cur_role)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.conditions_v2.NewConditions object at 0x7fbf62c1cf20>\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"2a139520e8c5257a49334e41eabdba71\")>\nlink = 'https://capital.com/en-gb', login = 'test001.miketar+1@gmail.com'\npassword = 'Qwer1234-!@#$', cur_role = 'NoAuth'\n\n    @allure.step(f\"{datetime.now()}   Start Authorization\")\n    # @profile(precision=3)\n    def to_do_authorisation_new(self, d, link, login, password, cur_role):\n        \"\"\"Authorization\"\"\"\n        print(f\"\\n\" f\"{datetime.now()}   Start Authorization\")\n    \n        # Setup wait for later\n        menu = MainMenu(d, link)\n        assert login != \"\", \"Авторизация невозможна. Не указан e-mail\"\n        assert password != \"\", \"Авторизация невозможна. Не указан пароль\"\n    \n        # нажать в хедере на кнопку \"Log in\"\n        try:\n            menu.element_is_clickable(menu.MENU_LOGIN).click()\n        except:\n>           pytest.fail(\"Bug! 'Login' button is not clicked\")\nE           Failed: Bug! 'Login' button is not clicked\n\npages/conditions_v2.py:239: Failed","steps":[{"name":"Start test of link 'Daniela Hathorn' on page 'ECB Preview…'","time":{"start":1743203790420,"stop":1743203796340,"duration":5920},"status":"failed","statusMessage":"Failed: Bug! 'Login' button is not clicked\n","statusTrace":"  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/tests/US_55_ReTestsManual/artemdashkov/US_55-artemdashkov_ReTestsManual_test.py\", line 1064, in test_383_link_daniela_hathorn_on_the_page_ecb_preview_does_not_open\n    cur_item_link = apply_preconditions_to_link(d, cur_language, cur_country,\n                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/conditions_v2.py\", line 78, in apply_preconditions_to_link\n    return cond.preconditions(d, CapitalComPageSrc.URL_NEW, '', cur_language, cur_country, cur_role,\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/conditions_v2.py\", line 154, in preconditions\n    self.to_do_authorisation_new(d, host, cur_login, cur_password, cur_role)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/conditions_v2.py\", line 239, in to_do_authorisation_new\n    pytest.fail(\"Bug! 'Login' button is not clicked\")\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/_pytest/outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n","steps":[{"name":"Build dynamic argument for TCs of US_55","time":{"start":1743203790420,"stop":1743203790423,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"2a139520e8c5257a49334e41eabdba71\")>"},{"name":"worker_id","value":"'master'"},{"name":"cur_language","value":"''"},{"name":"cur_country","value":"'ae'"},{"name":"cur_role","value":"'NoAuth'"},{"name":"us","value":"'55'"},{"name":"desc_us","value":"'ReTests of Manual Detected Bugs'"},{"name":"num_tc","value":"'383'"},{"name":"desc_tc","value":"'Menu section [Markets] > Menu item [Market analysis] > Find and click article link 'ECB Preview: Higher CPI expected to keep Lagarde on a hawkish path' > Click the link 'Daniela Hathorn''"},{"name":"manual","value":"False"},{"name":"new_layout","value":"True"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"   Set New preconditions","time":{"start":1743203790423,"stop":1743203796339,"duration":5916},"status":"failed","statusMessage":"Failed: Bug! 'Login' button is not clicked\n","statusTrace":"  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/conditions_v2.py\", line 154, in preconditions\n    self.to_do_authorisation_new(d, host, cur_login, cur_password, cur_role)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/conditions_v2.py\", line 239, in to_do_authorisation_new\n    pytest.fail(\"Bug! 'Login' button is not clicked\")\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/_pytest/outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n","steps":[{"name":"2025-03-28 22:32:21.801633   Start Authorization","time":{"start":1743203795263,"stop":1743203796339,"duration":1076},"status":"failed","statusMessage":"Failed: Bug! 'Login' button is not clicked\n","statusTrace":"  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/conditions_v2.py\", line 239, in to_do_authorisation_new\n    pytest.fail(\"Bug! 'Login' button is not clicked\")\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/_pytest/outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"2a139520e8c5257a49334e41eabdba71\")>"},{"name":"link","value":"'https://capital.com/en-gb'"},{"name":"login","value":"'test001.miketar+1@gmail.com'"},{"name":"password","value":"'Qwer1234-!@#$'"},{"name":"cur_role","value":"'NoAuth'"}],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"2a139520e8c5257a49334e41eabdba71\")>"},{"name":"host","value":"'https://capital.com/en-gb'"},{"name":"end_point","value":"''"},{"name":"cur_language","value":"''"},{"name":"cur_country","value":"'ae'"},{"name":"cur_role","value":"'NoAuth'"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"}],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"worker_id","value":"'master'"},{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"2a139520e8c5257a49334e41eabdba71\")>"},{"name":"cur_language","value":"''"},{"name":"cur_country","value":"'ae'"},{"name":"cur_role","value":"'NoAuth'"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"}],"shouldDisplayMessage":false,"stepsCount":3,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"1f2bd9f8f326f3b0","name":"Screenshot","source":"1f2bd9f8f326f3b0.png","type":"image/png","size":611008},{"uid":"36f9972029943439","name":"stdout","source":"36f9972029943439.txt","type":"text/plain","size":1962}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"d::0","time":{"start":1743204478315,"stop":1743204478726,"duration":411},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"epic","value":"TC_55!383 | Menu section [Markets] > Menu item [Market analysis] > Find and click article link 'ECB Preview: Higher CPI expected to keep Lagarde on a hawkish path' > Click the link 'Daniela Hathorn'"},{"name":"feature","value":"Role: NoAuth"},{"name":"story","value":"Country: ae"},{"name":"tag","value":"bug_383"},{"name":"tag","value":"us_55"},{"name":"parentSuite","value":"tests.US_55_ReTestsManual.artemdashkov"},{"name":"suite","value":"US_55-artemdashkov_ReTestsManual_test"},{"name":"subSuite","value":"TestManualDetected"},{"name":"host","value":"fv-az1912-887"},{"name":"thread","value":"5519-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.US_55_ReTestsManual.artemdashkov.US_55-artemdashkov_ReTestsManual_test"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"cur_country","value":"'ae'"},{"name":"cur_language","value":"''"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"},{"name":"cur_role","value":"'NoAuth'"},{"name":"d","value":"'Chrome'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":21,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":21},"items":[{"uid":"5539e26478fec5b5","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/361//#testresult/5539e26478fec5b5","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1743117317580,"stop":1743117323505,"duration":5925}},{"uid":"8fa0dd949cb1685","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/360//#testresult/8fa0dd949cb1685","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1743030193372,"stop":1743030199417,"duration":6045}},{"uid":"9b48082091a8a95c","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/359//#testresult/9b48082091a8a95c","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742943716636,"stop":1742943722583,"duration":5947}},{"uid":"5385c3263193353","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/358//#testresult/5385c3263193353","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742857228051,"stop":1742857234090,"duration":6039}},{"uid":"bbd3c1b207b65b9d","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/357//#testresult/bbd3c1b207b65b9d","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742771158268,"stop":1742771164034,"duration":5766}},{"uid":"c35b81f3b1f75484","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/356//#testresult/c35b81f3b1f75484","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742685101907,"stop":1742685108001,"duration":6094}},{"uid":"c762d0a1d886eff3","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/355//#testresult/c762d0a1d886eff3","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742598821974,"stop":1742598827888,"duration":5914}},{"uid":"b6d64a5cd69fa556","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/354//#testresult/b6d64a5cd69fa556","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742511413935,"stop":1742511419922,"duration":5987}},{"uid":"7b4efd8727117ac","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/353//#testresult/7b4efd8727117ac","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742424939794,"stop":1742424945644,"duration":5850}},{"uid":"430308d4f91faab7","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/352//#testresult/430308d4f91faab7","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742338085812,"stop":1742338091817,"duration":6005}},{"uid":"a0deb31942bccee3","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/351//#testresult/a0deb31942bccee3","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742253426585,"stop":1742253432455,"duration":5870}},{"uid":"797d7d80f2673ff","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/350//#testresult/797d7d80f2673ff","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742166801054,"stop":1742166806906,"duration":5852}},{"uid":"eba98fefaaff1544","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/349//#testresult/eba98fefaaff1544","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742080689883,"stop":1742080695742,"duration":5859}},{"uid":"4d2bd513a404682a","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/348//#testresult/4d2bd513a404682a","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1741993182593,"stop":1741993188441,"duration":5848}},{"uid":"bf7de41c980ca962","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/347//#testresult/bf7de41c980ca962","status":"failed","statusDetails":"Failed: Bug # 383 Target article don't visible","time":{"start":1741908208972,"stop":1741908271226,"duration":62254}},{"uid":"a0d91e18ac9006","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/346//#testresult/a0d91e18ac9006","status":"failed","statusDetails":"Failed: Bug # 383 Target article don't visible","time":{"start":1741821222720,"stop":1741821286396,"duration":63676}},{"uid":"28d4f52f6d42ca93","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/345//#testresult/28d4f52f6d42ca93","status":"failed","statusDetails":"Failed: Bug # 383 Target article don't visible","time":{"start":1741734478202,"stop":1741734543766,"duration":65564}},{"uid":"ab9e7b2317ae201b","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/344//#testresult/ab9e7b2317ae201b","status":"failed","statusDetails":"Failed: Bug # 383 Target article don't visible","time":{"start":1741648622017,"stop":1741648686177,"duration":64160}},{"uid":"10a2a6528eadc98a","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/343//#testresult/10a2a6528eadc98a","status":"failed","statusDetails":"Failed: Bug # 383 Target article don't visible","time":{"start":1741562523390,"stop":1741562586249,"duration":62859}},{"uid":"dbbe9b44f389ad81","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/342//#testresult/dbbe9b44f389ad81","status":"failed","statusDetails":"Failed: Bug # 383 Target article don't visible","time":{"start":1741475033393,"stop":1741475096020,"duration":62627}}]},"tags":["bug_383","us_55"]},"source":"8c7001253e2f2db9.json","parameterValues":["'ae'","''","'test001.miketar+1@gmail.com'","'Qwer1234-!@#$'","'NoAuth'","'Chrome'"]}