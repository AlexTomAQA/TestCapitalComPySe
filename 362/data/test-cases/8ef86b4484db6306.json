{"uid":"8ef86b4484db6306","name":"TC_55!503 (Lang: en) | Bid:55!503-en.gb.NoAuth","fullName":"tests.US_55_ReTestsManual.artemdashkov.US_55-artemdashkov_ReTestsManual_test.TestManualDetected#test_503_link_risk_management_on_the_client_vulnerability_page","historyId":"51360234194134753b35cfbf68025d90","time":{"start":1743204056070,"stop":1743204061858,"duration":5788},"description":"\n        Check:  Menu section [About] >\n                Menu item [Client vulnerability] >\n                Scroll down to the block “Vulnerability: what to be aware of?” >\n                Try to click link \"risk-management\"\n        Language: EN\n        License/Country: FCA\n        Role: NoReg, NoAuth, Auth\n        Author: Artem Dashkov\n        ","descriptionHtml":"<pre><code>    Check:  Menu section [About] &gt;\n            Menu item [Client vulnerability] &gt;\n            Scroll down to the block “Vulnerability: what to be aware of?” &gt;\n            Try to click link &quot;risk-management&quot;\n    Language: EN\n    License/Country: FCA\n    Role: NoReg, NoAuth, Auth\n    Author: Artem Dashkov\n</code></pre>\n","status":"failed","statusMessage":"Failed: Bug! 'Login' button is not clicked","statusTrace":"self = <pages.conditions_v2.NewConditions object at 0x7fbf62ec2180>\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"2a139520e8c5257a49334e41eabdba71\")>\nlink = 'https://capital.com/en-gb', login = 'test001.miketar+1@gmail.com'\npassword = 'Qwer1234-!@#$', cur_role = 'NoAuth'\n\n    @allure.step(f\"{datetime.now()}   Start Authorization\")\n    # @profile(precision=3)\n    def to_do_authorisation_new(self, d, link, login, password, cur_role):\n        \"\"\"Authorization\"\"\"\n        print(f\"\\n\" f\"{datetime.now()}   Start Authorization\")\n    \n        # Setup wait for later\n        menu = MainMenu(d, link)\n        assert login != \"\", \"Авторизация невозможна. Не указан e-mail\"\n        assert password != \"\", \"Авторизация невозможна. Не указан пароль\"\n    \n        # нажать в хедере на кнопку \"Log in\"\n        try:\n>           menu.element_is_clickable(menu.MENU_LOGIN).click()\n\npages/conditions_v2.py:237: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:380: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fbf6408ee40>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#21 0x55581a26fe76 \\\\u003Cunknown>\\\\n#22 0x7f989b69caa4 \\\\u003Cunknown>\\\\n#23 0x7f989b729c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button class=\"accountBtns_btn__vOcCs accountBtns_btnEmpty__TCWRE helpers_showLg__UPEqH js-analyticsClick js-analyticsVisible\" data-type=\"btn_header_login\" data-testid=\"login_btn\">...</button> is not clickable at point (1385, 121). Other element would receive the click: <div class=\"modal_overlay__f_YlZ modal_mobileBottomAttached__cTOIu\">...</div>\nE         (Session info: chrome=134.0.6998.165)\nE       Stacktrace:\nE       #0 0x55581a270ffa <unknown>\nE       #1 0x555819d2f970 <unknown>\nE       #2 0x555819d881ec <unknown>\nE       #3 0x555819d86055 <unknown>\nE       #4 0x555819d836f2 <unknown>\nE       #5 0x555819d828ca <unknown>\nE       #6 0x555819d754cd <unknown>\nE       #7 0x555819da7292 <unknown>\nE       #8 0x555819d74e4a <unknown>\nE       #9 0x555819da745e <unknown>\nE       #10 0x555819dcd70c <unknown>\nE       #11 0x555819da7063 <unknown>\nE       #12 0x555819d73328 <unknown>\nE       #13 0x555819d74491 <unknown>\nE       #14 0x55581a23842b <unknown>\nE       #15 0x55581a23c2ec <unknown>\nE       #16 0x55581a21fa22 <unknown>\nE       #17 0x55581a23ce64 <unknown>\nE       #18 0x55581a203bef <unknown>\nE       #19 0x55581a25f558 <unknown>\nE       #20 0x55581a25f736 <unknown>\nE       #21 0x55581a26fe76 <unknown>\nE       #22 0x7f989b69caa4 <unknown>\nE       #23 0x7f989b729c3c <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <US_55-artemdashkov_ReTestsManual_test.TestManualDetected object at 0x7fbf64247aa0>\nworker_id = 'master'\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"2a139520e8c5257a49334e41eabdba71\")>\ncur_language = '', cur_country = 'gb', cur_role = 'NoAuth'\ncur_login = 'test001.miketar+1@gmail.com', cur_password = 'Qwer1234-!@#$'\n\n    @allure.step(\"Start test of link 'risk-management' on the 'Client vulnerability' Page\")\n    @pytest.mark.parametrize('cur_language', [\"\"])\n    @pytest.mark.parametrize('cur_country', [\"gb\"])\n    @pytest.mark.parametrize('cur_role', [\"NoReg\", \"Auth\", \"NoAuth\"])\n    @pytest.mark.bug_503\n    def test_503_link_risk_management_on_the_client_vulnerability_page(\n            self, worker_id, d, cur_language, cur_country, cur_role, cur_login, cur_password):\n        \"\"\"\n        Check:  Menu section [About] >\n                Menu item [Client vulnerability] >\n                Scroll down to the block “Vulnerability: what to be aware of?” >\n                Try to click link \"risk-management\"\n        Language: EN\n        License/Country: FCA\n        Role: NoReg, NoAuth, Auth\n        Author: Artem Dashkov\n        \"\"\"\n    \n        bid = build_dynamic_arg_for_us_55(\n            d, worker_id, cur_language, cur_country, cur_role,\n            \"55\", \"ReTests of Manual Detected Bugs\",\n            \"503\",\n            \"'Client vulnerability' Page >\"\n            \"Scroll down to the block 'Vulnerability: what to be aware of?' >\"\n            \"Click link 'risk-management'\",\n            False, True\n        )\n        # Arrange\n>       cur_item_link = apply_preconditions_to_link(d, cur_language, cur_country, cur_role, cur_login, cur_password)\n\ntests/US_55_ReTestsManual/artemdashkov/US_55-artemdashkov_ReTestsManual_test.py:1389: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/conditions_v2.py:78: in apply_preconditions_to_link\n    return cond.preconditions(d, CapitalComPageSrc.URL_NEW, '', cur_language, cur_country, cur_role,\npages/conditions_v2.py:154: in preconditions\n    self.to_do_authorisation_new(d, host, cur_login, cur_password, cur_role)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.conditions_v2.NewConditions object at 0x7fbf62ec2180>\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"2a139520e8c5257a49334e41eabdba71\")>\nlink = 'https://capital.com/en-gb', login = 'test001.miketar+1@gmail.com'\npassword = 'Qwer1234-!@#$', cur_role = 'NoAuth'\n\n    @allure.step(f\"{datetime.now()}   Start Authorization\")\n    # @profile(precision=3)\n    def to_do_authorisation_new(self, d, link, login, password, cur_role):\n        \"\"\"Authorization\"\"\"\n        print(f\"\\n\" f\"{datetime.now()}   Start Authorization\")\n    \n        # Setup wait for later\n        menu = MainMenu(d, link)\n        assert login != \"\", \"Авторизация невозможна. Не указан e-mail\"\n        assert password != \"\", \"Авторизация невозможна. Не указан пароль\"\n    \n        # нажать в хедере на кнопку \"Log in\"\n        try:\n            menu.element_is_clickable(menu.MENU_LOGIN).click()\n        except:\n>           pytest.fail(\"Bug! 'Login' button is not clicked\")\nE           Failed: Bug! 'Login' button is not clicked\n\npages/conditions_v2.py:239: Failed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"d","time":{"start":1743201141858,"stop":1743201142640,"duration":782},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"worker_id","time":{"start":1743201142640,"stop":1743201142640,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_login","time":{"start":1743201142640,"stop":1743201142641,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_password","time":{"start":1743201142641,"stop":1743201142641,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"\n        Check:  Menu section [About] >\n                Menu item [Client vulnerability] >\n                Scroll down to the block “Vulnerability: what to be aware of?” >\n                Try to click link \"risk-management\"\n        Language: EN\n        License/Country: FCA\n        Role: NoReg, NoAuth, Auth\n        Author: Artem Dashkov\n        ","status":"failed","statusMessage":"Failed: Bug! 'Login' button is not clicked","statusTrace":"self = <pages.conditions_v2.NewConditions object at 0x7fbf62ec2180>\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"2a139520e8c5257a49334e41eabdba71\")>\nlink = 'https://capital.com/en-gb', login = 'test001.miketar+1@gmail.com'\npassword = 'Qwer1234-!@#$', cur_role = 'NoAuth'\n\n    @allure.step(f\"{datetime.now()}   Start Authorization\")\n    # @profile(precision=3)\n    def to_do_authorisation_new(self, d, link, login, password, cur_role):\n        \"\"\"Authorization\"\"\"\n        print(f\"\\n\" f\"{datetime.now()}   Start Authorization\")\n    \n        # Setup wait for later\n        menu = MainMenu(d, link)\n        assert login != \"\", \"Авторизация невозможна. Не указан e-mail\"\n        assert password != \"\", \"Авторизация невозможна. Не указан пароль\"\n    \n        # нажать в хедере на кнопку \"Log in\"\n        try:\n>           menu.element_is_clickable(menu.MENU_LOGIN).click()\n\npages/conditions_v2.py:237: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:380: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fbf6408ee40>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#21 0x55581a26fe76 \\\\u003Cunknown>\\\\n#22 0x7f989b69caa4 \\\\u003Cunknown>\\\\n#23 0x7f989b729c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button class=\"accountBtns_btn__vOcCs accountBtns_btnEmpty__TCWRE helpers_showLg__UPEqH js-analyticsClick js-analyticsVisible\" data-type=\"btn_header_login\" data-testid=\"login_btn\">...</button> is not clickable at point (1385, 121). Other element would receive the click: <div class=\"modal_overlay__f_YlZ modal_mobileBottomAttached__cTOIu\">...</div>\nE         (Session info: chrome=134.0.6998.165)\nE       Stacktrace:\nE       #0 0x55581a270ffa <unknown>\nE       #1 0x555819d2f970 <unknown>\nE       #2 0x555819d881ec <unknown>\nE       #3 0x555819d86055 <unknown>\nE       #4 0x555819d836f2 <unknown>\nE       #5 0x555819d828ca <unknown>\nE       #6 0x555819d754cd <unknown>\nE       #7 0x555819da7292 <unknown>\nE       #8 0x555819d74e4a <unknown>\nE       #9 0x555819da745e <unknown>\nE       #10 0x555819dcd70c <unknown>\nE       #11 0x555819da7063 <unknown>\nE       #12 0x555819d73328 <unknown>\nE       #13 0x555819d74491 <unknown>\nE       #14 0x55581a23842b <unknown>\nE       #15 0x55581a23c2ec <unknown>\nE       #16 0x55581a21fa22 <unknown>\nE       #17 0x55581a23ce64 <unknown>\nE       #18 0x55581a203bef <unknown>\nE       #19 0x55581a25f558 <unknown>\nE       #20 0x55581a25f736 <unknown>\nE       #21 0x55581a26fe76 <unknown>\nE       #22 0x7f989b69caa4 <unknown>\nE       #23 0x7f989b729c3c <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <US_55-artemdashkov_ReTestsManual_test.TestManualDetected object at 0x7fbf64247aa0>\nworker_id = 'master'\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"2a139520e8c5257a49334e41eabdba71\")>\ncur_language = '', cur_country = 'gb', cur_role = 'NoAuth'\ncur_login = 'test001.miketar+1@gmail.com', cur_password = 'Qwer1234-!@#$'\n\n    @allure.step(\"Start test of link 'risk-management' on the 'Client vulnerability' Page\")\n    @pytest.mark.parametrize('cur_language', [\"\"])\n    @pytest.mark.parametrize('cur_country', [\"gb\"])\n    @pytest.mark.parametrize('cur_role', [\"NoReg\", \"Auth\", \"NoAuth\"])\n    @pytest.mark.bug_503\n    def test_503_link_risk_management_on_the_client_vulnerability_page(\n            self, worker_id, d, cur_language, cur_country, cur_role, cur_login, cur_password):\n        \"\"\"\n        Check:  Menu section [About] >\n                Menu item [Client vulnerability] >\n                Scroll down to the block “Vulnerability: what to be aware of?” >\n                Try to click link \"risk-management\"\n        Language: EN\n        License/Country: FCA\n        Role: NoReg, NoAuth, Auth\n        Author: Artem Dashkov\n        \"\"\"\n    \n        bid = build_dynamic_arg_for_us_55(\n            d, worker_id, cur_language, cur_country, cur_role,\n            \"55\", \"ReTests of Manual Detected Bugs\",\n            \"503\",\n            \"'Client vulnerability' Page >\"\n            \"Scroll down to the block 'Vulnerability: what to be aware of?' >\"\n            \"Click link 'risk-management'\",\n            False, True\n        )\n        # Arrange\n>       cur_item_link = apply_preconditions_to_link(d, cur_language, cur_country, cur_role, cur_login, cur_password)\n\ntests/US_55_ReTestsManual/artemdashkov/US_55-artemdashkov_ReTestsManual_test.py:1389: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/conditions_v2.py:78: in apply_preconditions_to_link\n    return cond.preconditions(d, CapitalComPageSrc.URL_NEW, '', cur_language, cur_country, cur_role,\npages/conditions_v2.py:154: in preconditions\n    self.to_do_authorisation_new(d, host, cur_login, cur_password, cur_role)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.conditions_v2.NewConditions object at 0x7fbf62ec2180>\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"2a139520e8c5257a49334e41eabdba71\")>\nlink = 'https://capital.com/en-gb', login = 'test001.miketar+1@gmail.com'\npassword = 'Qwer1234-!@#$', cur_role = 'NoAuth'\n\n    @allure.step(f\"{datetime.now()}   Start Authorization\")\n    # @profile(precision=3)\n    def to_do_authorisation_new(self, d, link, login, password, cur_role):\n        \"\"\"Authorization\"\"\"\n        print(f\"\\n\" f\"{datetime.now()}   Start Authorization\")\n    \n        # Setup wait for later\n        menu = MainMenu(d, link)\n        assert login != \"\", \"Авторизация невозможна. Не указан e-mail\"\n        assert password != \"\", \"Авторизация невозможна. Не указан пароль\"\n    \n        # нажать в хедере на кнопку \"Log in\"\n        try:\n            menu.element_is_clickable(menu.MENU_LOGIN).click()\n        except:\n>           pytest.fail(\"Bug! 'Login' button is not clicked\")\nE           Failed: Bug! 'Login' button is not clicked\n\npages/conditions_v2.py:239: Failed","steps":[{"name":"Start test of link 'risk-management' on the 'Client vulnerability' Page","time":{"start":1743204056070,"stop":1743204061857,"duration":5787},"status":"failed","statusMessage":"Failed: Bug! 'Login' button is not clicked\n","statusTrace":"  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/tests/US_55_ReTestsManual/artemdashkov/US_55-artemdashkov_ReTestsManual_test.py\", line 1389, in test_503_link_risk_management_on_the_client_vulnerability_page\n    cur_item_link = apply_preconditions_to_link(d, cur_language, cur_country, cur_role, cur_login, cur_password)\n                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/conditions_v2.py\", line 78, in apply_preconditions_to_link\n    return cond.preconditions(d, CapitalComPageSrc.URL_NEW, '', cur_language, cur_country, cur_role,\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/conditions_v2.py\", line 154, in preconditions\n    self.to_do_authorisation_new(d, host, cur_login, cur_password, cur_role)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/conditions_v2.py\", line 239, in to_do_authorisation_new\n    pytest.fail(\"Bug! 'Login' button is not clicked\")\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/_pytest/outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n","steps":[{"name":"Build dynamic argument for TCs of US_55","time":{"start":1743204056071,"stop":1743204056072,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"2a139520e8c5257a49334e41eabdba71\")>"},{"name":"worker_id","value":"'master'"},{"name":"cur_language","value":"''"},{"name":"cur_country","value":"'gb'"},{"name":"cur_role","value":"'NoAuth'"},{"name":"us","value":"'55'"},{"name":"desc_us","value":"'ReTests of Manual Detected Bugs'"},{"name":"num_tc","value":"'503'"},{"name":"desc_tc","value":"''Client vulnerability' Page >Scroll down to the block 'Vulnerability: what to be aware of?' >Click link 'risk-management''"},{"name":"manual","value":"False"},{"name":"new_layout","value":"True"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"   Set New preconditions","time":{"start":1743204056072,"stop":1743204061856,"duration":5784},"status":"failed","statusMessage":"Failed: Bug! 'Login' button is not clicked\n","statusTrace":"  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/conditions_v2.py\", line 154, in preconditions\n    self.to_do_authorisation_new(d, host, cur_login, cur_password, cur_role)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/conditions_v2.py\", line 239, in to_do_authorisation_new\n    pytest.fail(\"Bug! 'Login' button is not clicked\")\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/_pytest/outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n","steps":[{"name":"2025-03-28 22:32:21.801633   Start Authorization","time":{"start":1743204060776,"stop":1743204061856,"duration":1080},"status":"failed","statusMessage":"Failed: Bug! 'Login' button is not clicked\n","statusTrace":"  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/conditions_v2.py\", line 239, in to_do_authorisation_new\n    pytest.fail(\"Bug! 'Login' button is not clicked\")\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/_pytest/outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"2a139520e8c5257a49334e41eabdba71\")>"},{"name":"link","value":"'https://capital.com/en-gb'"},{"name":"login","value":"'test001.miketar+1@gmail.com'"},{"name":"password","value":"'Qwer1234-!@#$'"},{"name":"cur_role","value":"'NoAuth'"}],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"2a139520e8c5257a49334e41eabdba71\")>"},{"name":"host","value":"'https://capital.com/en-gb'"},{"name":"end_point","value":"''"},{"name":"cur_language","value":"''"},{"name":"cur_country","value":"'gb'"},{"name":"cur_role","value":"'NoAuth'"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"}],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"worker_id","value":"'master'"},{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"2a139520e8c5257a49334e41eabdba71\")>"},{"name":"cur_language","value":"''"},{"name":"cur_country","value":"'gb'"},{"name":"cur_role","value":"'NoAuth'"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"}],"shouldDisplayMessage":false,"stepsCount":3,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"af857bba2f405ae4","name":"Screenshot","source":"af857bba2f405ae4.png","type":"image/png","size":611008},{"uid":"47d40663e51e67cb","name":"stdout","source":"47d40663e51e67cb.txt","type":"text/plain","size":1962}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"d::0","time":{"start":1743204478315,"stop":1743204478726,"duration":411},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"epic","value":"TC_55!503 | 'Client vulnerability' Page >Scroll down to the block 'Vulnerability: what to be aware of?' >Click link 'risk-management'"},{"name":"feature","value":"Role: NoAuth"},{"name":"story","value":"Country: gb"},{"name":"tag","value":"bug_503"},{"name":"tag","value":"us_55"},{"name":"parentSuite","value":"tests.US_55_ReTestsManual.artemdashkov"},{"name":"suite","value":"US_55-artemdashkov_ReTestsManual_test"},{"name":"subSuite","value":"TestManualDetected"},{"name":"host","value":"fv-az1912-887"},{"name":"thread","value":"5519-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.US_55_ReTestsManual.artemdashkov.US_55-artemdashkov_ReTestsManual_test"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"cur_country","value":"'gb'"},{"name":"cur_language","value":"''"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"},{"name":"cur_role","value":"'NoAuth'"},{"name":"d","value":"'Chrome'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":21,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":21},"items":[{"uid":"74330057161ca6ae","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/361//#testresult/74330057161ca6ae","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1743117589180,"stop":1743117595124,"duration":5944}},{"uid":"28f288d48f5f124b","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/360//#testresult/28f288d48f5f124b","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1743030467746,"stop":1743030473652,"duration":5906}},{"uid":"424b70b5aa923f4f","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/359//#testresult/424b70b5aa923f4f","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742943983995,"stop":1742943989843,"duration":5848}},{"uid":"855bd2c4d487e4ef","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/358//#testresult/855bd2c4d487e4ef","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742857501183,"stop":1742857507108,"duration":5925}},{"uid":"d7bb6cc1bcd1e52e","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/357//#testresult/d7bb6cc1bcd1e52e","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742771425327,"stop":1742771431240,"duration":5913}},{"uid":"3347a2d5a376f879","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/356//#testresult/3347a2d5a376f879","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742685376831,"stop":1742685382726,"duration":5895}},{"uid":"40180fc02d69bb9","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/355//#testresult/40180fc02d69bb9","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742599093494,"stop":1742599099396,"duration":5902}},{"uid":"9d298744632da500","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/354//#testresult/9d298744632da500","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742511683272,"stop":1742511689211,"duration":5939}},{"uid":"5f10ec04b38b274e","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/353//#testresult/5f10ec04b38b274e","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742425208303,"stop":1742425214165,"duration":5862}},{"uid":"8d8d5ff3697480a","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/352//#testresult/8d8d5ff3697480a","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742338360050,"stop":1742338365997,"duration":5947}},{"uid":"1f3eda677e11cea7","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/351//#testresult/1f3eda677e11cea7","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742253695027,"stop":1742253700884,"duration":5857}},{"uid":"f526a273ecfed94f","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/350//#testresult/f526a273ecfed94f","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742167070845,"stop":1742167076785,"duration":5940}},{"uid":"d64322e981c75849","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/349//#testresult/d64322e981c75849","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742080958702,"stop":1742080964537,"duration":5835}},{"uid":"eabf25597d371103","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/348//#testresult/eabf25597d371103","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1741993452463,"stop":1741993458330,"duration":5867}},{"uid":"baae73b9a906e934","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/347//#testresult/baae73b9a906e934","status":"failed","statusDetails":"Failed: Page don't have link 'risk-management' in DOM","time":{"start":1741908877142,"stop":1741908904348,"duration":27206}},{"uid":"ef54e116bda25f8f","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/346//#testresult/ef54e116bda25f8f","status":"failed","statusDetails":"Failed: Page don't have link 'risk-management' in DOM","time":{"start":1741821891129,"stop":1741821919470,"duration":28341}},{"uid":"461307e7d5e5c136","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/345//#testresult/461307e7d5e5c136","status":"failed","statusDetails":"Failed: Page don't have link 'risk-management' in DOM","time":{"start":1741735184800,"stop":1741735212555,"duration":27755}},{"uid":"bd64f53f4889c152","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/344//#testresult/bd64f53f4889c152","status":"failed","statusDetails":"Failed: Page don't have link 'risk-management' in DOM","time":{"start":1741649320942,"stop":1741649348493,"duration":27551}},{"uid":"927101ae5cec0315","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/343//#testresult/927101ae5cec0315","status":"failed","statusDetails":"Failed: Page don't have link 'risk-management' in DOM","time":{"start":1741563188498,"stop":1741563215429,"duration":26931}},{"uid":"8378b26c3a402e98","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/342//#testresult/8378b26c3a402e98","status":"failed","statusDetails":"Failed: Page don't have link 'risk-management' in DOM","time":{"start":1741475690147,"stop":1741475716547,"duration":26400}}]},"tags":["us_55","bug_503"]},"source":"8ef86b4484db6306.json","parameterValues":["'gb'","''","'test001.miketar+1@gmail.com'","'Qwer1234-!@#$'","'NoAuth'","'Chrome'"]}