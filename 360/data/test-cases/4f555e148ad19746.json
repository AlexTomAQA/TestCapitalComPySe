{"uid":"4f555e148ad19746","name":"TC_55!362 (Lang: ar) | Bid:55!362-ar.ae.Auth","fullName":"tests.US_55_ReTestsManual.artemdashkov.US_55-artemdashkov_ReTestsManual_test.TestManualDetected#test_362_selected_country_in_dropdown_country_and_language_is_not_displayed","historyId":"2e8b4edd9bb1044ada419510c87d948e","time":{"start":1743030107679,"stop":1743030116194,"duration":8515},"description":"\n        Check:  Click to the dropdown [Regional settings] > Click to the dropdown [Countries] >\n                Scroll down to the \"Honk Kong & Taiwan\" > Select \"Honk Kong & Taiwan\" > Click the button [Apply]\n                > Check country in Dropdown [Country & Language]\n        Language: EN - FCA, SCA; AR - SCA\n        License/Country: FCA, SCA\n        Role: NoReg, NoAuth, Auth\n        Author: Artem Dashkov\n        ","descriptionHtml":"<pre><code>    Check:  Click to the dropdown [Regional settings] &gt; Click to the dropdown [Countries] &gt;\n            Scroll down to the &quot;Honk Kong &amp; Taiwan&quot; &gt; Select &quot;Honk Kong &amp; Taiwan&quot; &gt; Click the button [Apply]\n            &gt; Check country in Dropdown [Country &amp; Language]\n    Language: EN - FCA, SCA; AR - SCA\n    License/Country: FCA, SCA\n    Role: NoReg, NoAuth, Auth\n    Author: Artem Dashkov\n</code></pre>\n","status":"failed","statusMessage":"Failed: Bug! 'Login' button is not clicked","statusTrace":"self = <pages.conditions_v2.NewConditions object at 0x7f1b029f55b0>\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"28057b7f7a8de605e767b42146fbbbaa\")>\nlink = 'https://capital.com/en-gb', login = 'test001.miketar+1@gmail.com'\npassword = 'Qwer1234-!@#$', cur_role = 'Auth'\n\n    @allure.step(f\"{datetime.now()}   Start Authorization\")\n    # @profile(precision=3)\n    def to_do_authorisation_new(self, d, link, login, password, cur_role):\n        \"\"\"Authorization\"\"\"\n        print(f\"\\n\" f\"{datetime.now()}   Start Authorization\")\n    \n        # Setup wait for later\n        menu = MainMenu(d, link)\n        assert login != \"\", \"Авторизация невозможна. Не указан e-mail\"\n        assert password != \"\", \"Авторизация невозможна. Не указан пароль\"\n    \n        # нажать в хедере на кнопку \"Log in\"\n        try:\n>           menu.element_is_clickable(menu.MENU_LOGIN).click()\n\npages/conditions_v2.py:237: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:380: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f1b02e495b0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#21 0x55bb712bbe76 \\\\u003Cunknown>\\\\n#22 0x7fe88549caa4 \\\\u003Cunknown>\\\\n#23 0x7fe885529c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button class=\"accountBtns_btn__vOcCs accountBtns_btnEmpty__TCWRE helpers_showLg__UPEqH js-analyticsClick js-analyticsVisible\" data-type=\"btn_header_login\" data-testid=\"login_btn\">...</button> is not clickable at point (1385, 121). Other element would receive the click: <div class=\"modal_overlay__f_YlZ modal_mobileBottomAttached__cTOIu\">...</div>\nE         (Session info: chrome=134.0.6998.88)\nE       Stacktrace:\nE       #0 0x55bb712bcffa <unknown>\nE       #1 0x55bb70d7b970 <unknown>\nE       #2 0x55bb70dd41ec <unknown>\nE       #3 0x55bb70dd2055 <unknown>\nE       #4 0x55bb70dcf6f2 <unknown>\nE       #5 0x55bb70dce8ca <unknown>\nE       #6 0x55bb70dc14cd <unknown>\nE       #7 0x55bb70df3292 <unknown>\nE       #8 0x55bb70dc0e4a <unknown>\nE       #9 0x55bb70df345e <unknown>\nE       #10 0x55bb70e1970c <unknown>\nE       #11 0x55bb70df3063 <unknown>\nE       #12 0x55bb70dbf328 <unknown>\nE       #13 0x55bb70dc0491 <unknown>\nE       #14 0x55bb7128442b <unknown>\nE       #15 0x55bb712882ec <unknown>\nE       #16 0x55bb7126ba22 <unknown>\nE       #17 0x55bb71288e64 <unknown>\nE       #18 0x55bb7124fbef <unknown>\nE       #19 0x55bb712ab558 <unknown>\nE       #20 0x55bb712ab736 <unknown>\nE       #21 0x55bb712bbe76 <unknown>\nE       #22 0x7fe88549caa4 <unknown>\nE       #23 0x7fe885529c3c <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <US_55-artemdashkov_ReTestsManual_test.TestManualDetected object at 0x7f1b02d173b0>\nworker_id = 'master'\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"28057b7f7a8de605e767b42146fbbbaa\")>\ncur_language_country_for_fca_and_sca = ['ar', 'ae'], cur_role = 'Auth'\ncur_login = 'test001.miketar+1@gmail.com', cur_password = 'Qwer1234-!@#$'\n\n    @allure.step(\"Start test of check selected country in Dropdown [Country & Language]\")\n    @pytest.mark.parametrize('cur_role', [\"NoReg\", \"Auth\", \"NoAuth\"])\n    @pytest.mark.bug_362\n    def test_362_selected_country_in_dropdown_country_and_language_is_not_displayed(\n            self, worker_id, d, cur_language_country_for_fca_and_sca, cur_role, cur_login, cur_password):\n        \"\"\"\n        Check:  Click to the dropdown [Regional settings] > Click to the dropdown [Countries] >\n                Scroll down to the \"Honk Kong & Taiwan\" > Select \"Honk Kong & Taiwan\" > Click the button [Apply]\n                > Check country in Dropdown [Country & Language]\n        Language: EN - FCA, SCA; AR - SCA\n        License/Country: FCA, SCA\n        Role: NoReg, NoAuth, Auth\n        Author: Artem Dashkov\n        \"\"\"\n    \n        bid = build_dynamic_arg_for_us_55(\n            d, worker_id, cur_language_country_for_fca_and_sca[0],\n            cur_language_country_for_fca_and_sca[1], cur_role,\n            \"55\", \"ReTests of Manual Detected Bugs\",\n            \"362\",\n            \"Click to the dropdown [Regional settings] > Click to the dropdown [Countries] > \"\n            \"Scroll down to the 'Honk Kong & Taiwan' > Select 'Honk Kong & Taiwan' > Click the button [Apply]\",\n            False, True\n        )\n        # Arrange\n>       cur_item_link = apply_preconditions_to_link(d, cur_language_country_for_fca_and_sca[0],\n                                                    cur_language_country_for_fca_and_sca[1],\n                                                    cur_role, cur_login, cur_password)\n\ntests/US_55_ReTestsManual/artemdashkov/US_55-artemdashkov_ReTestsManual_test.py:938: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/conditions_v2.py:78: in apply_preconditions_to_link\n    return cond.preconditions(d, CapitalComPageSrc.URL_NEW, '', cur_language, cur_country, cur_role,\npages/conditions_v2.py:152: in preconditions\n    self.to_do_authorisation_new(d, host, cur_login, cur_password, cur_role)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.conditions_v2.NewConditions object at 0x7f1b029f55b0>\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"28057b7f7a8de605e767b42146fbbbaa\")>\nlink = 'https://capital.com/en-gb', login = 'test001.miketar+1@gmail.com'\npassword = 'Qwer1234-!@#$', cur_role = 'Auth'\n\n    @allure.step(f\"{datetime.now()}   Start Authorization\")\n    # @profile(precision=3)\n    def to_do_authorisation_new(self, d, link, login, password, cur_role):\n        \"\"\"Authorization\"\"\"\n        print(f\"\\n\" f\"{datetime.now()}   Start Authorization\")\n    \n        # Setup wait for later\n        menu = MainMenu(d, link)\n        assert login != \"\", \"Авторизация невозможна. Не указан e-mail\"\n        assert password != \"\", \"Авторизация невозможна. Не указан пароль\"\n    \n        # нажать в хедере на кнопку \"Log in\"\n        try:\n            menu.element_is_clickable(menu.MENU_LOGIN).click()\n        except:\n>           pytest.fail(\"Bug! 'Login' button is not clicked\")\nE           Failed: Bug! 'Login' button is not clicked\n\npages/conditions_v2.py:239: Failed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"d","time":{"start":1743028462596,"stop":1743028463375,"duration":779},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"worker_id","time":{"start":1743028463375,"stop":1743028463376,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_password","time":{"start":1743028463376,"stop":1743028463376,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_login","time":{"start":1743028463376,"stop":1743028463376,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_language_country_for_fca_and_sca","time":{"start":1743030107678,"stop":1743030107678,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"\n        Check:  Click to the dropdown [Regional settings] > Click to the dropdown [Countries] >\n                Scroll down to the \"Honk Kong & Taiwan\" > Select \"Honk Kong & Taiwan\" > Click the button [Apply]\n                > Check country in Dropdown [Country & Language]\n        Language: EN - FCA, SCA; AR - SCA\n        License/Country: FCA, SCA\n        Role: NoReg, NoAuth, Auth\n        Author: Artem Dashkov\n        ","status":"failed","statusMessage":"Failed: Bug! 'Login' button is not clicked","statusTrace":"self = <pages.conditions_v2.NewConditions object at 0x7f1b029f55b0>\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"28057b7f7a8de605e767b42146fbbbaa\")>\nlink = 'https://capital.com/en-gb', login = 'test001.miketar+1@gmail.com'\npassword = 'Qwer1234-!@#$', cur_role = 'Auth'\n\n    @allure.step(f\"{datetime.now()}   Start Authorization\")\n    # @profile(precision=3)\n    def to_do_authorisation_new(self, d, link, login, password, cur_role):\n        \"\"\"Authorization\"\"\"\n        print(f\"\\n\" f\"{datetime.now()}   Start Authorization\")\n    \n        # Setup wait for later\n        menu = MainMenu(d, link)\n        assert login != \"\", \"Авторизация невозможна. Не указан e-mail\"\n        assert password != \"\", \"Авторизация невозможна. Не указан пароль\"\n    \n        # нажать в хедере на кнопку \"Log in\"\n        try:\n>           menu.element_is_clickable(menu.MENU_LOGIN).click()\n\npages/conditions_v2.py:237: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:380: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f1b02e495b0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#21 0x55bb712bbe76 \\\\u003Cunknown>\\\\n#22 0x7fe88549caa4 \\\\u003Cunknown>\\\\n#23 0x7fe885529c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button class=\"accountBtns_btn__vOcCs accountBtns_btnEmpty__TCWRE helpers_showLg__UPEqH js-analyticsClick js-analyticsVisible\" data-type=\"btn_header_login\" data-testid=\"login_btn\">...</button> is not clickable at point (1385, 121). Other element would receive the click: <div class=\"modal_overlay__f_YlZ modal_mobileBottomAttached__cTOIu\">...</div>\nE         (Session info: chrome=134.0.6998.88)\nE       Stacktrace:\nE       #0 0x55bb712bcffa <unknown>\nE       #1 0x55bb70d7b970 <unknown>\nE       #2 0x55bb70dd41ec <unknown>\nE       #3 0x55bb70dd2055 <unknown>\nE       #4 0x55bb70dcf6f2 <unknown>\nE       #5 0x55bb70dce8ca <unknown>\nE       #6 0x55bb70dc14cd <unknown>\nE       #7 0x55bb70df3292 <unknown>\nE       #8 0x55bb70dc0e4a <unknown>\nE       #9 0x55bb70df345e <unknown>\nE       #10 0x55bb70e1970c <unknown>\nE       #11 0x55bb70df3063 <unknown>\nE       #12 0x55bb70dbf328 <unknown>\nE       #13 0x55bb70dc0491 <unknown>\nE       #14 0x55bb7128442b <unknown>\nE       #15 0x55bb712882ec <unknown>\nE       #16 0x55bb7126ba22 <unknown>\nE       #17 0x55bb71288e64 <unknown>\nE       #18 0x55bb7124fbef <unknown>\nE       #19 0x55bb712ab558 <unknown>\nE       #20 0x55bb712ab736 <unknown>\nE       #21 0x55bb712bbe76 <unknown>\nE       #22 0x7fe88549caa4 <unknown>\nE       #23 0x7fe885529c3c <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <US_55-artemdashkov_ReTestsManual_test.TestManualDetected object at 0x7f1b02d173b0>\nworker_id = 'master'\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"28057b7f7a8de605e767b42146fbbbaa\")>\ncur_language_country_for_fca_and_sca = ['ar', 'ae'], cur_role = 'Auth'\ncur_login = 'test001.miketar+1@gmail.com', cur_password = 'Qwer1234-!@#$'\n\n    @allure.step(\"Start test of check selected country in Dropdown [Country & Language]\")\n    @pytest.mark.parametrize('cur_role', [\"NoReg\", \"Auth\", \"NoAuth\"])\n    @pytest.mark.bug_362\n    def test_362_selected_country_in_dropdown_country_and_language_is_not_displayed(\n            self, worker_id, d, cur_language_country_for_fca_and_sca, cur_role, cur_login, cur_password):\n        \"\"\"\n        Check:  Click to the dropdown [Regional settings] > Click to the dropdown [Countries] >\n                Scroll down to the \"Honk Kong & Taiwan\" > Select \"Honk Kong & Taiwan\" > Click the button [Apply]\n                > Check country in Dropdown [Country & Language]\n        Language: EN - FCA, SCA; AR - SCA\n        License/Country: FCA, SCA\n        Role: NoReg, NoAuth, Auth\n        Author: Artem Dashkov\n        \"\"\"\n    \n        bid = build_dynamic_arg_for_us_55(\n            d, worker_id, cur_language_country_for_fca_and_sca[0],\n            cur_language_country_for_fca_and_sca[1], cur_role,\n            \"55\", \"ReTests of Manual Detected Bugs\",\n            \"362\",\n            \"Click to the dropdown [Regional settings] > Click to the dropdown [Countries] > \"\n            \"Scroll down to the 'Honk Kong & Taiwan' > Select 'Honk Kong & Taiwan' > Click the button [Apply]\",\n            False, True\n        )\n        # Arrange\n>       cur_item_link = apply_preconditions_to_link(d, cur_language_country_for_fca_and_sca[0],\n                                                    cur_language_country_for_fca_and_sca[1],\n                                                    cur_role, cur_login, cur_password)\n\ntests/US_55_ReTestsManual/artemdashkov/US_55-artemdashkov_ReTestsManual_test.py:938: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/conditions_v2.py:78: in apply_preconditions_to_link\n    return cond.preconditions(d, CapitalComPageSrc.URL_NEW, '', cur_language, cur_country, cur_role,\npages/conditions_v2.py:152: in preconditions\n    self.to_do_authorisation_new(d, host, cur_login, cur_password, cur_role)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.conditions_v2.NewConditions object at 0x7f1b029f55b0>\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"28057b7f7a8de605e767b42146fbbbaa\")>\nlink = 'https://capital.com/en-gb', login = 'test001.miketar+1@gmail.com'\npassword = 'Qwer1234-!@#$', cur_role = 'Auth'\n\n    @allure.step(f\"{datetime.now()}   Start Authorization\")\n    # @profile(precision=3)\n    def to_do_authorisation_new(self, d, link, login, password, cur_role):\n        \"\"\"Authorization\"\"\"\n        print(f\"\\n\" f\"{datetime.now()}   Start Authorization\")\n    \n        # Setup wait for later\n        menu = MainMenu(d, link)\n        assert login != \"\", \"Авторизация невозможна. Не указан e-mail\"\n        assert password != \"\", \"Авторизация невозможна. Не указан пароль\"\n    \n        # нажать в хедере на кнопку \"Log in\"\n        try:\n            menu.element_is_clickable(menu.MENU_LOGIN).click()\n        except:\n>           pytest.fail(\"Bug! 'Login' button is not clicked\")\nE           Failed: Bug! 'Login' button is not clicked\n\npages/conditions_v2.py:239: Failed","steps":[{"name":"Start test of check selected country in Dropdown [Country & Language]","time":{"start":1743030107679,"stop":1743030116194,"duration":8515},"status":"failed","statusMessage":"Failed: Bug! 'Login' button is not clicked\n","statusTrace":"  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/tests/US_55_ReTestsManual/artemdashkov/US_55-artemdashkov_ReTestsManual_test.py\", line 938, in test_362_selected_country_in_dropdown_country_and_language_is_not_displayed\n    cur_item_link = apply_preconditions_to_link(d, cur_language_country_for_fca_and_sca[0],\n                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/conditions_v2.py\", line 78, in apply_preconditions_to_link\n    return cond.preconditions(d, CapitalComPageSrc.URL_NEW, '', cur_language, cur_country, cur_role,\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/conditions_v2.py\", line 152, in preconditions\n    self.to_do_authorisation_new(d, host, cur_login, cur_password, cur_role)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/conditions_v2.py\", line 239, in to_do_authorisation_new\n    pytest.fail(\"Bug! 'Login' button is not clicked\")\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/_pytest/outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n","steps":[{"name":"Build dynamic argument for TCs of US_55","time":{"start":1743030107679,"stop":1743030107681,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"28057b7f7a8de605e767b42146fbbbaa\")>"},{"name":"worker_id","value":"'master'"},{"name":"cur_language","value":"'ar'"},{"name":"cur_country","value":"'ae'"},{"name":"cur_role","value":"'Auth'"},{"name":"us","value":"'55'"},{"name":"desc_us","value":"'ReTests of Manual Detected Bugs'"},{"name":"num_tc","value":"'362'"},{"name":"desc_tc","value":"'Click to the dropdown [Regional settings] > Click to the dropdown [Countries] > Scroll down to the 'Honk Kong & Taiwan' > Select 'Honk Kong & Taiwan' > Click the button [Apply]'"},{"name":"manual","value":"False"},{"name":"new_layout","value":"True"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"   Set New preconditions","time":{"start":1743030107681,"stop":1743030116193,"duration":8512},"status":"failed","statusMessage":"Failed: Bug! 'Login' button is not clicked\n","statusTrace":"  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/conditions_v2.py\", line 152, in preconditions\n    self.to_do_authorisation_new(d, host, cur_login, cur_password, cur_role)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/conditions_v2.py\", line 239, in to_do_authorisation_new\n    pytest.fail(\"Bug! 'Login' button is not clicked\")\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/_pytest/outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n","steps":[{"name":"2025-03-26 22:34:22.539074   Start Authorization","time":{"start":1743030115100,"stop":1743030116193,"duration":1093},"status":"failed","statusMessage":"Failed: Bug! 'Login' button is not clicked\n","statusTrace":"  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/conditions_v2.py\", line 239, in to_do_authorisation_new\n    pytest.fail(\"Bug! 'Login' button is not clicked\")\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/_pytest/outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"28057b7f7a8de605e767b42146fbbbaa\")>"},{"name":"link","value":"'https://capital.com/en-gb'"},{"name":"login","value":"'test001.miketar+1@gmail.com'"},{"name":"password","value":"'Qwer1234-!@#$'"},{"name":"cur_role","value":"'Auth'"}],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"28057b7f7a8de605e767b42146fbbbaa\")>"},{"name":"host","value":"'https://capital.com/en-gb'"},{"name":"end_point","value":"''"},{"name":"cur_language","value":"'ar'"},{"name":"cur_country","value":"'ae'"},{"name":"cur_role","value":"'Auth'"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"}],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"worker_id","value":"'master'"},{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"28057b7f7a8de605e767b42146fbbbaa\")>"},{"name":"cur_language_country_for_fca_and_sca","value":"['ar', 'ae']"},{"name":"cur_role","value":"'Auth'"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"}],"shouldDisplayMessage":false,"stepsCount":3,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"1b8999fae1473c83","name":"Screenshot","source":"1b8999fae1473c83.png","type":"image/png","size":611012},{"uid":"30361be92d203a2b","name":"stdout","source":"30361be92d203a2b.txt","type":"text/plain","size":2273}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"d::0","time":{"start":1743030902912,"stop":1743030903285,"duration":373},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"epic","value":"TC_55!362 | Click to the dropdown [Regional settings] > Click to the dropdown [Countries] > Scroll down to the 'Honk Kong & Taiwan' > Select 'Honk Kong & Taiwan' > Click the button [Apply]"},{"name":"feature","value":"Role: Auth"},{"name":"story","value":"Country: ae"},{"name":"tag","value":"bug_362"},{"name":"tag","value":"us_55"},{"name":"parentSuite","value":"tests.US_55_ReTestsManual.artemdashkov"},{"name":"suite","value":"US_55-artemdashkov_ReTestsManual_test"},{"name":"subSuite","value":"TestManualDetected"},{"name":"host","value":"fv-az1991-467"},{"name":"thread","value":"5493-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.US_55_ReTestsManual.artemdashkov.US_55-artemdashkov_ReTestsManual_test"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"cur_language_country_for_fca_and_sca","value":"['ar', 'ae']"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"},{"name":"cur_role","value":"'Auth'"},{"name":"d","value":"'Chrome'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":19,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":19},"items":[{"uid":"1f8eb5de93ff26fe","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/359//#testresult/1f8eb5de93ff26fe","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742943632907,"stop":1742943641034,"duration":8127}},{"uid":"2cce77acd7d8a4b5","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/358//#testresult/2cce77acd7d8a4b5","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742857136719,"stop":1742857145093,"duration":8374}},{"uid":"e76b4d65eec75c60","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/357//#testresult/e76b4d65eec75c60","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742771074169,"stop":1742771082265,"duration":8096}},{"uid":"88cb207522df5c4b","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/356//#testresult/88cb207522df5c4b","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742685007115,"stop":1742685015520,"duration":8405}},{"uid":"5470f82ec2986fb3","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/355//#testresult/5470f82ec2986fb3","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742598736509,"stop":1742598744859,"duration":8350}},{"uid":"a88954cce5f07805","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/354//#testresult/a88954cce5f07805","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742511329870,"stop":1742511338083,"duration":8213}},{"uid":"dc93d1647c55467f","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/353//#testresult/dc93d1647c55467f","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742424794468,"stop":1742424802949,"duration":8481}},{"uid":"308bc3bd10aacba3","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/352//#testresult/308bc3bd10aacba3","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742337999132,"stop":1742338007731,"duration":8599}},{"uid":"1dd7fdc2e88debfb","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/351//#testresult/1dd7fdc2e88debfb","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742253341417,"stop":1742253349991,"duration":8574}},{"uid":"c704297bf3d60f2c","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/350//#testresult/c704297bf3d60f2c","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742166715543,"stop":1742166723802,"duration":8259}},{"uid":"69fd0a29648ee643","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/349//#testresult/69fd0a29648ee643","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742080603962,"stop":1742080612573,"duration":8611}},{"uid":"961fa52ac2be025c","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/348//#testresult/961fa52ac2be025c","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1741993098027,"stop":1741993106423,"duration":8396}},{"uid":"72b79e4ab99ffbc6","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/347//#testresult/72b79e4ab99ffbc6","status":"failed","statusDetails":"Failed: Bug # 362 The main page don't have link country to open dropdown [Regional settings] in DOM","time":{"start":1741907929280,"stop":1741907947365,"duration":18085}},{"uid":"3c080b5ea9e87a60","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/346//#testresult/3c080b5ea9e87a60","status":"failed","statusDetails":"Failed: Bug # 362 The main page don't have link country to open dropdown [Regional settings] in DOM","time":{"start":1741820940129,"stop":1741820957789,"duration":17660}},{"uid":"b19d7ddcd3346493","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/345//#testresult/b19d7ddcd3346493","status":"failed","statusDetails":"Failed: Bug # 362 The main page don't have link country to open dropdown [Regional settings] in DOM","time":{"start":1741734187148,"stop":1741734206995,"duration":19847}},{"uid":"b70dae514c509335","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/344//#testresult/b70dae514c509335","status":"failed","statusDetails":"Failed: Bug # 362 The main page don't have link country to open dropdown [Regional settings] in DOM","time":{"start":1741648333278,"stop":1741648351724,"duration":18446}},{"uid":"cd8852769673a6e7","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/343//#testresult/cd8852769673a6e7","status":"failed","statusDetails":"Failed: Bug # 362 The main page don't have link country to open dropdown [Regional settings] in DOM","time":{"start":1741562258149,"stop":1741562275429,"duration":17280}},{"uid":"9f5ee3942084bd09","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/342//#testresult/9f5ee3942084bd09","status":"failed","statusDetails":"Failed: Bug # 362 The main page don't have link country to open dropdown [Regional settings] in DOM","time":{"start":1741474756535,"stop":1741474774217,"duration":17682}}]},"tags":["bug_362","us_55"]},"source":"4f555e148ad19746.json","parameterValues":["['ar', 'ae']","'test001.miketar+1@gmail.com'","'Qwer1234-!@#$'","'Auth'","'Chrome'"]}