{"uid":"47596bb64a377a08","name":"TC_55!634 (Lang: en) | Bid:55!634-en.au.NoReg","fullName":"tests.US_55_ReTestsManual.K_Alex_N.US_55_K_Alex_N_ReTestsManual_test.TestForFixedBugs#test_634","historyId":"6ce097adf5fc294e84176f6c071d0d30","time":{"start":1736647120809,"stop":1736647145766,"duration":24957},"description":"\n         Check: Menu section [Markets] > \n                Menu item [Markets analysis] > \n                Article \"Gold price predictions for the next..\" > \n                Click on [Trade now] link > \n                Click on [Close] button\n         Language: EN\n         License: SCA, FCA, CYSEC or ASIC\n         Author: Aleksei Kurochkin\n         ","descriptionHtml":"<pre><code>     Check: Menu section [Markets] &gt; \n            Menu item [Markets analysis] &gt; \n            Article &quot;Gold price predictions for the next..&quot; &gt; \n            Click on [Trade now] link &gt; \n            Click on [Close] button\n     Language: EN\n     License: SCA, FCA, CYSEC or ASIC\n     Author: Aleksei Kurochkin\n</code></pre>\n","status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <b class=\"\">...</b> is not clickable at point (817, 10). Other element would receive the click: <span class=\"text-accord\">...</span>\n  (Session info: chrome=131.0.6778.204)\nStacktrace:\n#0 0x5613b77621fa <unknown>\n#1 0x5613b7272810 <unknown>\n#2 0x5613b72c8206 <unknown>\n#3 0x5613b72c616d <unknown>\n#4 0x5613b72c3885 <unknown>\n#5 0x5613b72c2a48 <unknown>\n#6 0x5613b72b61f5 <unknown>\n#7 0x5613b72e5582 <unknown>\n#8 0x5613b72b5b38 <unknown>\n#9 0x5613b72e574e <unknown>\n#10 0x5613b7304007 <unknown>\n#11 0x5613b72e5323 <unknown>\n#12 0x5613b72b3de0 <unknown>\n#13 0x5613b72b4dbe <unknown>\n#14 0x5613b772e12b <unknown>\n#15 0x5613b77320c7 <unknown>\n#16 0x5613b771b6cc <unknown>\n#17 0x5613b7732c47 <unknown>\n#18 0x5613b770067f <unknown>\n#19 0x5613b7751288 <unknown>\n#20 0x5613b7751450 <unknown>\n#21 0x5613b7761076 <unknown>\n#22 0x7f0f8dc9ca94 <unknown>\n#23 0x7f0f8dd29c3c <unknown>","statusTrace":"self = <US_55_K_Alex_N_ReTestsManual_test.TestForFixedBugs object at 0x7f0c98f343b0>\nworker_id = 'master'\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"d6846b6260d28741ebdef1e78394636a\")>\ncur_language = '', cur_country = 'au', cur_role = 'NoReg'\ncur_login = 'test001.miketar+1@gmail.com', cur_password = 'Qwer1234-!@#$'\n\n    @pytest.mark.parametrize('cur_language', [''])\n    @pytest.mark.parametrize('cur_country', ['gb', 'ae', 'au', 'de'])\n    @pytest.mark.parametrize('cur_role', random.sample(['NoAuth', 'NoReg'], 1))\n    def test_634(self, worker_id, d, cur_language, cur_country, cur_role, cur_login, cur_password):\n        \"\"\"\n         Check: Menu section [Markets] >\n                Menu item [Markets analysis] >\n                Article \"Gold price predictions for the next..\" >\n                Click on [Trade now] link >\n                Click on [Close] button\n         Language: EN\n         License: SCA, FCA, CYSEC or ASIC\n         Author: Aleksei Kurochkin\n         \"\"\"\n        test = self\n        self.cur_language = cur_language\n        self.cur_country = cur_country\n        self.driver = d\n    \n        self.bid = build_dynamic_arg_for_us_55(\n            d, worker_id, cur_language, cur_country, cur_role,\n            \"55\", \"ReTests of Manual Detected Bugs\",\n            \"634\",\n            'The loading spinner is displayed continuously on the page \"Gold price '\n            'predictions for the next...\" after click on [Trade now]',\n            False,\n            False\n        )\n    \n        # Arrange\n        self.link = apply_preconditions_to_link(d, cur_language, cur_country, cur_role, cur_login, cur_password)\n        self.bug = Bug634(test)\n        self.bug.open_market_analysis_page(test)\n>       MyCommon.search_and_open_an_article_in_market_analysis_page(d, \"Gold price predictions for the next\")\n\ntests/US_55_ReTestsManual/K_Alex_N/US_55_K_Alex_N_ReTestsManual_test.py:109: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/US_55_ReTestsManual/K_Alex_N/MyCommon.py:50: in search_and_open_an_article_in_market_analysis_page\n    open_the_article()\ntests/US_55_ReTestsManual/K_Alex_N/MyCommon.py:41: in open_the_article\n    driver.find_element(*ARTICLE_LOCATOR).click()\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:380: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f0c98f64860>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#21 0x5613b7761076 \\\\u003Cunknown>\\\\n#22 0x7f0f8dc9ca94 \\\\u003Cunknown>\\\\n#23 0x7f0f8dd29c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <b class=\"\">...</b> is not clickable at point (817, 10). Other element would receive the click: <span class=\"text-accord\">...</span>\nE         (Session info: chrome=131.0.6778.204)\nE       Stacktrace:\nE       #0 0x5613b77621fa <unknown>\nE       #1 0x5613b7272810 <unknown>\nE       #2 0x5613b72c8206 <unknown>\nE       #3 0x5613b72c616d <unknown>\nE       #4 0x5613b72c3885 <unknown>\nE       #5 0x5613b72c2a48 <unknown>\nE       #6 0x5613b72b61f5 <unknown>\nE       #7 0x5613b72e5582 <unknown>\nE       #8 0x5613b72b5b38 <unknown>\nE       #9 0x5613b72e574e <unknown>\nE       #10 0x5613b7304007 <unknown>\nE       #11 0x5613b72e5323 <unknown>\nE       #12 0x5613b72b3de0 <unknown>\nE       #13 0x5613b72b4dbe <unknown>\nE       #14 0x5613b772e12b <unknown>\nE       #15 0x5613b77320c7 <unknown>\nE       #16 0x5613b771b6cc <unknown>\nE       #17 0x5613b7732c47 <unknown>\nE       #18 0x5613b770067f <unknown>\nE       #19 0x5613b7751288 <unknown>\nE       #20 0x5613b7751450 <unknown>\nE       #21 0x5613b7761076 <unknown>\nE       #22 0x7f0f8dc9ca94 <unknown>\nE       #23 0x7f0f8dd29c3c <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"d","time":{"start":1736647006263,"stop":1736647006905,"duration":642},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"worker_id","time":{"start":1736647006905,"stop":1736647006905,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_login","time":{"start":1736647006905,"stop":1736647006905,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_password","time":{"start":1736647006905,"stop":1736647006906,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"\n         Check: Menu section [Markets] > \n                Menu item [Markets analysis] > \n                Article \"Gold price predictions for the next..\" > \n                Click on [Trade now] link > \n                Click on [Close] button\n         Language: EN\n         License: SCA, FCA, CYSEC or ASIC\n         Author: Aleksei Kurochkin\n         ","status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <b class=\"\">...</b> is not clickable at point (817, 10). Other element would receive the click: <span class=\"text-accord\">...</span>\n  (Session info: chrome=131.0.6778.204)\nStacktrace:\n#0 0x5613b77621fa <unknown>\n#1 0x5613b7272810 <unknown>\n#2 0x5613b72c8206 <unknown>\n#3 0x5613b72c616d <unknown>\n#4 0x5613b72c3885 <unknown>\n#5 0x5613b72c2a48 <unknown>\n#6 0x5613b72b61f5 <unknown>\n#7 0x5613b72e5582 <unknown>\n#8 0x5613b72b5b38 <unknown>\n#9 0x5613b72e574e <unknown>\n#10 0x5613b7304007 <unknown>\n#11 0x5613b72e5323 <unknown>\n#12 0x5613b72b3de0 <unknown>\n#13 0x5613b72b4dbe <unknown>\n#14 0x5613b772e12b <unknown>\n#15 0x5613b77320c7 <unknown>\n#16 0x5613b771b6cc <unknown>\n#17 0x5613b7732c47 <unknown>\n#18 0x5613b770067f <unknown>\n#19 0x5613b7751288 <unknown>\n#20 0x5613b7751450 <unknown>\n#21 0x5613b7761076 <unknown>\n#22 0x7f0f8dc9ca94 <unknown>\n#23 0x7f0f8dd29c3c <unknown>","statusTrace":"self = <US_55_K_Alex_N_ReTestsManual_test.TestForFixedBugs object at 0x7f0c98f343b0>\nworker_id = 'master'\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"d6846b6260d28741ebdef1e78394636a\")>\ncur_language = '', cur_country = 'au', cur_role = 'NoReg'\ncur_login = 'test001.miketar+1@gmail.com', cur_password = 'Qwer1234-!@#$'\n\n    @pytest.mark.parametrize('cur_language', [''])\n    @pytest.mark.parametrize('cur_country', ['gb', 'ae', 'au', 'de'])\n    @pytest.mark.parametrize('cur_role', random.sample(['NoAuth', 'NoReg'], 1))\n    def test_634(self, worker_id, d, cur_language, cur_country, cur_role, cur_login, cur_password):\n        \"\"\"\n         Check: Menu section [Markets] >\n                Menu item [Markets analysis] >\n                Article \"Gold price predictions for the next..\" >\n                Click on [Trade now] link >\n                Click on [Close] button\n         Language: EN\n         License: SCA, FCA, CYSEC or ASIC\n         Author: Aleksei Kurochkin\n         \"\"\"\n        test = self\n        self.cur_language = cur_language\n        self.cur_country = cur_country\n        self.driver = d\n    \n        self.bid = build_dynamic_arg_for_us_55(\n            d, worker_id, cur_language, cur_country, cur_role,\n            \"55\", \"ReTests of Manual Detected Bugs\",\n            \"634\",\n            'The loading spinner is displayed continuously on the page \"Gold price '\n            'predictions for the next...\" after click on [Trade now]',\n            False,\n            False\n        )\n    \n        # Arrange\n        self.link = apply_preconditions_to_link(d, cur_language, cur_country, cur_role, cur_login, cur_password)\n        self.bug = Bug634(test)\n        self.bug.open_market_analysis_page(test)\n>       MyCommon.search_and_open_an_article_in_market_analysis_page(d, \"Gold price predictions for the next\")\n\ntests/US_55_ReTestsManual/K_Alex_N/US_55_K_Alex_N_ReTestsManual_test.py:109: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/US_55_ReTestsManual/K_Alex_N/MyCommon.py:50: in search_and_open_an_article_in_market_analysis_page\n    open_the_article()\ntests/US_55_ReTestsManual/K_Alex_N/MyCommon.py:41: in open_the_article\n    driver.find_element(*ARTICLE_LOCATOR).click()\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:380: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f0c98f64860>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#21 0x5613b7761076 \\\\u003Cunknown>\\\\n#22 0x7f0f8dc9ca94 \\\\u003Cunknown>\\\\n#23 0x7f0f8dd29c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <b class=\"\">...</b> is not clickable at point (817, 10). Other element would receive the click: <span class=\"text-accord\">...</span>\nE         (Session info: chrome=131.0.6778.204)\nE       Stacktrace:\nE       #0 0x5613b77621fa <unknown>\nE       #1 0x5613b7272810 <unknown>\nE       #2 0x5613b72c8206 <unknown>\nE       #3 0x5613b72c616d <unknown>\nE       #4 0x5613b72c3885 <unknown>\nE       #5 0x5613b72c2a48 <unknown>\nE       #6 0x5613b72b61f5 <unknown>\nE       #7 0x5613b72e5582 <unknown>\nE       #8 0x5613b72b5b38 <unknown>\nE       #9 0x5613b72e574e <unknown>\nE       #10 0x5613b7304007 <unknown>\nE       #11 0x5613b72e5323 <unknown>\nE       #12 0x5613b72b3de0 <unknown>\nE       #13 0x5613b72b4dbe <unknown>\nE       #14 0x5613b772e12b <unknown>\nE       #15 0x5613b77320c7 <unknown>\nE       #16 0x5613b771b6cc <unknown>\nE       #17 0x5613b7732c47 <unknown>\nE       #18 0x5613b770067f <unknown>\nE       #19 0x5613b7751288 <unknown>\nE       #20 0x5613b7751450 <unknown>\nE       #21 0x5613b7761076 <unknown>\nE       #22 0x7f0f8dc9ca94 <unknown>\nE       #23 0x7f0f8dd29c3c <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","steps":[{"name":"Build dynamic argument for TCs of US_55","time":{"start":1736647120809,"stop":1736647120811,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"d6846b6260d28741ebdef1e78394636a\")>"},{"name":"worker_id","value":"'master'"},{"name":"cur_language","value":"''"},{"name":"cur_country","value":"'au'"},{"name":"cur_role","value":"'NoReg'"},{"name":"us","value":"'55'"},{"name":"desc_us","value":"'ReTests of Manual Detected Bugs'"},{"name":"num_tc","value":"'634'"},{"name":"desc_tc","value":"'The loading spinner is displayed continuously on the page \"Gold price predictions for the next...\" after click on [Trade now]'"},{"name":"manual","value":"False"},{"name":"new_layout","value":"False"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"   Set New preconditions","time":{"start":1736647120811,"stop":1736647125789,"duration":4978},"status":"passed","steps":[{"name":"2025-01-12 01:56:46.245647   Set language and country","time":{"start":1736647123260,"stop":1736647125784,"duration":2524},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"d6846b6260d28741ebdef1e78394636a\")>"},{"name":"cur_language","value":"'en'"},{"name":"cur_country","value":"'au'"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"d6846b6260d28741ebdef1e78394636a\")>"},{"name":"host","value":"'https://capital.com/en-gb'"},{"name":"end_point","value":"''"},{"name":"cur_language","value":"''"},{"name":"cur_country","value":"'au'"},{"name":"cur_role","value":"'NoReg'"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"}],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Select \"Markets\" menu, \"Market analysis\" submenu","time":{"start":1736647125789,"stop":1736647134199,"duration":8410},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"d6846b6260d28741ebdef1e78394636a\")>"},{"name":"cur_language","value":"''"},{"name":"cur_country","value":"'au'"},{"name":"link","value":"'https://capital.com/en-au'"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"2549bcf4620e59bb","name":"Screenshot","source":"2549bcf4620e59bb.png","type":"image/png","size":331368},{"uid":"90b1439c4062d60e","name":"stdout","source":"90b1439c4062d60e.txt","type":"text/plain","size":2905}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"d::0","time":{"start":1736647500375,"stop":1736647500553,"duration":178},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"epic","value":"TC_55!634 | The loading spinner is displayed continuously on the page \"Gold price predictions for the next...\" after click on [Trade now]"},{"name":"feature","value":"Role: NoReg"},{"name":"story","value":"Country: au"},{"name":"tag","value":"us_55"},{"name":"parentSuite","value":"tests.US_55_ReTestsManual.K_Alex_N"},{"name":"suite","value":"US_55_K_Alex_N_ReTestsManual_test"},{"name":"subSuite","value":"TestForFixedBugs"},{"name":"host","value":"fv-az1671-577"},{"name":"thread","value":"45218-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.US_55_ReTestsManual.K_Alex_N.US_55_K_Alex_N_ReTestsManual_test"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"cur_country","value":"'au'"},{"name":"cur_language","value":"''"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"},{"name":"cur_role","value":"'NoReg'"},{"name":"d","value":"'Chrome'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":8,"unknown":0,"total":10},"items":[{"uid":"d9ed346300c2495b","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/285//#testresult/d9ed346300c2495b","status":"broken","statusDetails":"selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//a[@aria-label=\"Go to the next page\"]\"}\n  (Session info: chrome=131.0.6778.204); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nStacktrace:\n#0 0x55903f90d1fa <unknown>\n#1 0x55903f41d810 <unknown>\n#2 0x55903f46c506 <unknown>\n#3 0x55903f46c7a1 <unknown>\n#4 0x55903f4b1c24 <unknown>\n#5 0x55903f4905ad <unknown>\n#6 0x55903f4af007 <unknown>\n#7 0x55903f490323 <unknown>\n#8 0x55903f45ede0 <unknown>\n#9 0x55903f45fdbe <unknown>\n#10 0x55903f8d912b <unknown>\n#11 0x55903f8dd0c7 <unknown>\n#12 0x55903f8c66cc <unknown>\n#13 0x55903f8ddc47 <unknown>\n#14 0x55903f8ab67f <unknown>\n#15 0x55903f8fc288 <unknown>\n#16 0x55903f8fc450 <unknown>\n#17 0x55903f90c076 <unknown>\n#18 0x7f3ccbe9ca94 <unknown>\n#19 0x7f3ccbf29c3c <unknown>","time":{"start":1736560364353,"stop":1736560520367,"duration":156014}},{"uid":"4ccc8db4a3830aed","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/283//#testresult/4ccc8db4a3830aed","status":"passed","time":{"start":1736388100257,"stop":1736388123216,"duration":22959}},{"uid":"2a1c816aaa1e76fe","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/282//#testresult/2a1c816aaa1e76fe","status":"passed","time":{"start":1736302851693,"stop":1736302874841,"duration":23148}},{"uid":"242cd1cc7994c94c","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/279//#testresult/242cd1cc7994c94c","status":"passed","time":{"start":1736042534387,"stop":1736042557438,"duration":23051}},{"uid":"4316ae02bd1de5dd","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/278//#testresult/4316ae02bd1de5dd","status":"passed","time":{"start":1735955546677,"stop":1735955569828,"duration":23151}},{"uid":"7068fd918592da3f","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/275//#testresult/7068fd918592da3f","status":"passed","time":{"start":1735697172402,"stop":1735697196023,"duration":23621}},{"uid":"bd4de89e5afca262","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/273//#testresult/bd4de89e5afca262","status":"passed","time":{"start":1735522922557,"stop":1735522945851,"duration":23294}},{"uid":"2b4dfa48fdd188d7","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/271//#testresult/2b4dfa48fdd188d7","status":"passed","time":{"start":1735350927861,"stop":1735350951147,"duration":23286}},{"uid":"a8651e8cb3d58c5c","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/269//#testresult/a8651e8cb3d58c5c","status":"passed","time":{"start":1735178157251,"stop":1735178180860,"duration":23609}}]},"tags":["us_55"]},"source":"47596bb64a377a08.json","parameterValues":["'au'","''","'test001.miketar+1@gmail.com'","'Qwer1234-!@#$'","'NoReg'","'Chrome'"]}