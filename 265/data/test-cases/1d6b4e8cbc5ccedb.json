{"uid":"1d6b4e8cbc5ccedb","name":"TC_55!634 (Lang: en) | Bid:55!634-en.au.NoAuth","fullName":"tests.US_55_ReTestsManual.K_Alex_N.US_55_K_Alex_N_ReTestsManual_test.TestManualDetectedBugs#test_634","historyId":"42b0b32f6b2456bdb9ebcfdd889de976","time":{"start":1734833763212,"stop":1734833782941,"duration":19729},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <b class=\"\">...</b> is not clickable at point (817, 29). Other element would receive the click: <div class=\"disclaimer_wrap__dTWqz\">...</div>\n  (Session info: chrome=131.0.6778.139)\nStacktrace:\n#0 0x55c75d19d8fa <unknown>\n#1 0x55c75ccaed20 <unknown>\n#2 0x55c75cd04766 <unknown>\n#3 0x55c75cd026cd <unknown>\n#4 0x55c75ccffde5 <unknown>\n#5 0x55c75ccfefa8 <unknown>\n#6 0x55c75ccf2765 <unknown>\n#7 0x55c75cd21af2 <unknown>\n#8 0x55c75ccf20a8 <unknown>\n#9 0x55c75cd21cbe <unknown>\n#10 0x55c75cd40560 <unknown>\n#11 0x55c75cd21893 <unknown>\n#12 0x55c75ccf030d <unknown>\n#13 0x55c75ccf132e <unknown>\n#14 0x55c75d16a00b <unknown>\n#15 0x55c75d16df97 <unknown>\n#16 0x55c75d15671c <unknown>\n#17 0x55c75d16eb17 <unknown>\n#18 0x55c75d13b6cf <unknown>\n#19 0x55c75d18c6b8 <unknown>\n#20 0x55c75d18c880 <unknown>\n#21 0x55c75d19c776 <unknown>\n#22 0x7f9cdfc9ca94 <unknown>\n#23 0x7f9cdfd29c3c <unknown>","statusTrace":"self = <US_55_K_Alex_N_ReTestsManual_test.TestManualDetectedBugs object at 0x7fd5ef32b050>\nworker_id = 'master'\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"9ffbabceb16c35d84a4f81eb4f768a79\")>\ncur_language = '', cur_country = 'au', cur_role = 'NoAuth'\ncur_login = 'test001.miketar+1@gmail.com', cur_password = 'Qwer1234-!@#$'\n\n    @allure.step(\n        'Start retest manual TC_55!634 | The loading spinner is displayed continuously on the page \"Gold price '\n        'predictions for the next...\" after click on [Trade now]')\n    @pytest.mark.parametrize('cur_language', [''])\n    @pytest.mark.parametrize('cur_country', ['gb', 'ae', 'au', 'de'])\n    @pytest.mark.parametrize('cur_role', random.sample(['NoAuth', 'NoReg'], 1))\n    @pytest.mark.bug_634\n    def test_634(self, worker_id, d, cur_language, cur_country, cur_role, cur_login, cur_password):\n        test = self\n        self.cur_language = cur_language\n        self.cur_country = cur_country\n        self.driver = d\n    \n        \"\"\"\n         Check: Menu section [Markets] >\n                Menu item [Markets analysis] >\n                Article \"Gold price predictions for the next..\" >\n                Click on [Trade now] link >\n                Click on [Close] button\n         Language: EN\n         License: SCA, FCA, CYSEC or ASIC\n         Author: Aleksei Kurochkin\n         \"\"\"\n    \n        self.bid = build_dynamic_arg_for_us_55(\n            d, worker_id, cur_language, cur_country, cur_role,\n            \"55\", \"ReTests of Manual Detected Bugs\",\n            \"634\",\n            'The loading spinner is displayed continuously on the page \"Gold price '\n            'predictions for the next...\" after click on [Trade now]',\n            False,\n            False\n        )\n    \n        # Arrange\n        self.link = apply_preconditions_to_link(d, cur_language, cur_country, cur_role, cur_login, cur_password)\n        self.bug = Bug634(test)\n        self.bug.open_market_analysis_page(test)\n>       self.search_and_open_an_article_in_market_analysis_page(\"Gold price predictions for the next\")\n\ntests/US_55_ReTestsManual/K_Alex_N/US_55_K_Alex_N_ReTestsManual_test.py:497: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/US_55_ReTestsManual/K_Alex_N/US_55_K_Alex_N_ReTestsManual_test.py:64: in search_and_open_an_article_in_market_analysis_page\n    open_the_article()\ntests/US_55_ReTestsManual/K_Alex_N/US_55_K_Alex_N_ReTestsManual_test.py:55: in open_the_article\n    self.driver.find_element(*article_locator).click()\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:380: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fd5ef35d040>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#21 0x55c75d19c776 \\\\u003Cunknown>\\\\n#22 0x7f9cdfc9ca94 \\\\u003Cunknown>\\\\n#23 0x7f9cdfd29c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <b class=\"\">...</b> is not clickable at point (817, 29). Other element would receive the click: <div class=\"disclaimer_wrap__dTWqz\">...</div>\nE         (Session info: chrome=131.0.6778.139)\nE       Stacktrace:\nE       #0 0x55c75d19d8fa <unknown>\nE       #1 0x55c75ccaed20 <unknown>\nE       #2 0x55c75cd04766 <unknown>\nE       #3 0x55c75cd026cd <unknown>\nE       #4 0x55c75ccffde5 <unknown>\nE       #5 0x55c75ccfefa8 <unknown>\nE       #6 0x55c75ccf2765 <unknown>\nE       #7 0x55c75cd21af2 <unknown>\nE       #8 0x55c75ccf20a8 <unknown>\nE       #9 0x55c75cd21cbe <unknown>\nE       #10 0x55c75cd40560 <unknown>\nE       #11 0x55c75cd21893 <unknown>\nE       #12 0x55c75ccf030d <unknown>\nE       #13 0x55c75ccf132e <unknown>\nE       #14 0x55c75d16a00b <unknown>\nE       #15 0x55c75d16df97 <unknown>\nE       #16 0x55c75d15671c <unknown>\nE       #17 0x55c75d16eb17 <unknown>\nE       #18 0x55c75d13b6cf <unknown>\nE       #19 0x55c75d18c6b8 <unknown>\nE       #20 0x55c75d18c880 <unknown>\nE       #21 0x55c75d19c776 <unknown>\nE       #22 0x7f9cdfc9ca94 <unknown>\nE       #23 0x7f9cdfd29c3c <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"d","time":{"start":1734833308363,"stop":1734833309000,"duration":637},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"worker_id","time":{"start":1734833309000,"stop":1734833309000,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_password","time":{"start":1734833309000,"stop":1734833309000,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_login","time":{"start":1734833309000,"stop":1734833309000,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <b class=\"\">...</b> is not clickable at point (817, 29). Other element would receive the click: <div class=\"disclaimer_wrap__dTWqz\">...</div>\n  (Session info: chrome=131.0.6778.139)\nStacktrace:\n#0 0x55c75d19d8fa <unknown>\n#1 0x55c75ccaed20 <unknown>\n#2 0x55c75cd04766 <unknown>\n#3 0x55c75cd026cd <unknown>\n#4 0x55c75ccffde5 <unknown>\n#5 0x55c75ccfefa8 <unknown>\n#6 0x55c75ccf2765 <unknown>\n#7 0x55c75cd21af2 <unknown>\n#8 0x55c75ccf20a8 <unknown>\n#9 0x55c75cd21cbe <unknown>\n#10 0x55c75cd40560 <unknown>\n#11 0x55c75cd21893 <unknown>\n#12 0x55c75ccf030d <unknown>\n#13 0x55c75ccf132e <unknown>\n#14 0x55c75d16a00b <unknown>\n#15 0x55c75d16df97 <unknown>\n#16 0x55c75d15671c <unknown>\n#17 0x55c75d16eb17 <unknown>\n#18 0x55c75d13b6cf <unknown>\n#19 0x55c75d18c6b8 <unknown>\n#20 0x55c75d18c880 <unknown>\n#21 0x55c75d19c776 <unknown>\n#22 0x7f9cdfc9ca94 <unknown>\n#23 0x7f9cdfd29c3c <unknown>","statusTrace":"self = <US_55_K_Alex_N_ReTestsManual_test.TestManualDetectedBugs object at 0x7fd5ef32b050>\nworker_id = 'master'\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"9ffbabceb16c35d84a4f81eb4f768a79\")>\ncur_language = '', cur_country = 'au', cur_role = 'NoAuth'\ncur_login = 'test001.miketar+1@gmail.com', cur_password = 'Qwer1234-!@#$'\n\n    @allure.step(\n        'Start retest manual TC_55!634 | The loading spinner is displayed continuously on the page \"Gold price '\n        'predictions for the next...\" after click on [Trade now]')\n    @pytest.mark.parametrize('cur_language', [''])\n    @pytest.mark.parametrize('cur_country', ['gb', 'ae', 'au', 'de'])\n    @pytest.mark.parametrize('cur_role', random.sample(['NoAuth', 'NoReg'], 1))\n    @pytest.mark.bug_634\n    def test_634(self, worker_id, d, cur_language, cur_country, cur_role, cur_login, cur_password):\n        test = self\n        self.cur_language = cur_language\n        self.cur_country = cur_country\n        self.driver = d\n    \n        \"\"\"\n         Check: Menu section [Markets] >\n                Menu item [Markets analysis] >\n                Article \"Gold price predictions for the next..\" >\n                Click on [Trade now] link >\n                Click on [Close] button\n         Language: EN\n         License: SCA, FCA, CYSEC or ASIC\n         Author: Aleksei Kurochkin\n         \"\"\"\n    \n        self.bid = build_dynamic_arg_for_us_55(\n            d, worker_id, cur_language, cur_country, cur_role,\n            \"55\", \"ReTests of Manual Detected Bugs\",\n            \"634\",\n            'The loading spinner is displayed continuously on the page \"Gold price '\n            'predictions for the next...\" after click on [Trade now]',\n            False,\n            False\n        )\n    \n        # Arrange\n        self.link = apply_preconditions_to_link(d, cur_language, cur_country, cur_role, cur_login, cur_password)\n        self.bug = Bug634(test)\n        self.bug.open_market_analysis_page(test)\n>       self.search_and_open_an_article_in_market_analysis_page(\"Gold price predictions for the next\")\n\ntests/US_55_ReTestsManual/K_Alex_N/US_55_K_Alex_N_ReTestsManual_test.py:497: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/US_55_ReTestsManual/K_Alex_N/US_55_K_Alex_N_ReTestsManual_test.py:64: in search_and_open_an_article_in_market_analysis_page\n    open_the_article()\ntests/US_55_ReTestsManual/K_Alex_N/US_55_K_Alex_N_ReTestsManual_test.py:55: in open_the_article\n    self.driver.find_element(*article_locator).click()\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:380: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fd5ef35d040>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#21 0x55c75d19c776 \\\\u003Cunknown>\\\\n#22 0x7f9cdfc9ca94 \\\\u003Cunknown>\\\\n#23 0x7f9cdfd29c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <b class=\"\">...</b> is not clickable at point (817, 29). Other element would receive the click: <div class=\"disclaimer_wrap__dTWqz\">...</div>\nE         (Session info: chrome=131.0.6778.139)\nE       Stacktrace:\nE       #0 0x55c75d19d8fa <unknown>\nE       #1 0x55c75ccaed20 <unknown>\nE       #2 0x55c75cd04766 <unknown>\nE       #3 0x55c75cd026cd <unknown>\nE       #4 0x55c75ccffde5 <unknown>\nE       #5 0x55c75ccfefa8 <unknown>\nE       #6 0x55c75ccf2765 <unknown>\nE       #7 0x55c75cd21af2 <unknown>\nE       #8 0x55c75ccf20a8 <unknown>\nE       #9 0x55c75cd21cbe <unknown>\nE       #10 0x55c75cd40560 <unknown>\nE       #11 0x55c75cd21893 <unknown>\nE       #12 0x55c75ccf030d <unknown>\nE       #13 0x55c75ccf132e <unknown>\nE       #14 0x55c75d16a00b <unknown>\nE       #15 0x55c75d16df97 <unknown>\nE       #16 0x55c75d15671c <unknown>\nE       #17 0x55c75d16eb17 <unknown>\nE       #18 0x55c75d13b6cf <unknown>\nE       #19 0x55c75d18c6b8 <unknown>\nE       #20 0x55c75d18c880 <unknown>\nE       #21 0x55c75d19c776 <unknown>\nE       #22 0x7f9cdfc9ca94 <unknown>\nE       #23 0x7f9cdfd29c3c <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","steps":[{"name":"Start retest manual TC_55!634 | The loading spinner is displayed continuously on the page \"Gold price predictions for the next...\" after click on [Trade now]","time":{"start":1734833763212,"stop":1734833782940,"duration":19728},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <b class=\"\">...</b> is not clickable at point (817, 29). Other element would receive the click: <div class=\"disclaimer_wrap__dTWqz\">...</div>\n  (Session info: chrome=131.0.6778.139)\nStacktrace:\n#0 0x55c75d19d8fa <unknown>\n#1 0x55c75ccaed20 <unknown>\n#2 0x55c75cd04766 <unknown>\n#3 0x55c75cd026cd <unknown>\n#4 0x55c75ccffde5 <unknown>\n#5 0x55c75ccfefa8 <unknown>\n#6 0x55c75ccf2765 <unknown>\n#7 0x55c75cd21af2 <unknown>\n#8 0x55c75ccf20a8 <unknown>\n#9 0x55c75cd21cbe <unknown>\n#10 0x55c75cd40560 <unknown>\n#11 0x55c75cd21893 <unknown>\n#12 0x55c75ccf030d <unknown>\n#13 0x55c75ccf132e <unknown>\n#14 0x55c75d16a00b <unknown>\n#15 0x55c75d16df97 <unknown>\n#16 0x55c75d15671c <unknown>\n#17 0x55c75d16eb17 <unknown>\n#18 0x55c75d13b6cf <unknown>\n#19 0x55c75d18c6b8 <unknown>\n#20 0x55c75d18c880 <unknown>\n#21 0x55c75d19c776 <unknown>\n#22 0x7f9cdfc9ca94 <unknown>\n#23 0x7f9cdfd29c3c <unknown>\n\n","statusTrace":"  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/tests/US_55_ReTestsManual/K_Alex_N/US_55_K_Alex_N_ReTestsManual_test.py\", line 497, in test_634\n    self.search_and_open_an_article_in_market_analysis_page(\"Gold price predictions for the next\")\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/tests/US_55_ReTestsManual/K_Alex_N/US_55_K_Alex_N_ReTestsManual_test.py\", line 64, in search_and_open_an_article_in_market_analysis_page\n    open_the_article()\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/tests/US_55_ReTestsManual/K_Alex_N/US_55_K_Alex_N_ReTestsManual_test.py\", line 55, in open_the_article\n    self.driver.find_element(*article_locator).click()\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py\", line 94, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py\", line 395, in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 380, in execute\n    self.error_handler.check_response(response)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[{"name":"Build dynamic argument for TCs of US_55","time":{"start":1734833763212,"stop":1734833763214,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"9ffbabceb16c35d84a4f81eb4f768a79\")>"},{"name":"worker_id","value":"'master'"},{"name":"cur_language","value":"''"},{"name":"cur_country","value":"'au'"},{"name":"cur_role","value":"'NoAuth'"},{"name":"us","value":"'55'"},{"name":"desc_us","value":"'ReTests of Manual Detected Bugs'"},{"name":"num_tc","value":"'634'"},{"name":"desc_tc","value":"'The loading spinner is displayed continuously on the page \"Gold price predictions for the next...\" after click on [Trade now]'"},{"name":"manual","value":"False"},{"name":"new_layout","value":"False"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"   Set New preconditions","time":{"start":1734833763214,"stop":1734833768576,"duration":5362},"status":"passed","steps":[{"name":"2024-12-22 02:08:28.346696   Set language and country","time":{"start":1734833765704,"stop":1734833768406,"duration":2702},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"9ffbabceb16c35d84a4f81eb4f768a79\")>"},{"name":"cur_language","value":"'en'"},{"name":"cur_country","value":"'au'"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"9ffbabceb16c35d84a4f81eb4f768a79\")>"},{"name":"host","value":"'https://capital.com/en-gb'"},{"name":"end_point","value":"''"},{"name":"cur_language","value":"''"},{"name":"cur_country","value":"'au'"},{"name":"cur_role","value":"'NoAuth'"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"}],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Select \"Markets\" menu, \"Market analysis\" submenu","time":{"start":1734833768576,"stop":1734833776732,"duration":8156},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"9ffbabceb16c35d84a4f81eb4f768a79\")>"},{"name":"cur_language","value":"''"},{"name":"cur_country","value":"'au'"},{"name":"link","value":"'https://capital.com/en-au'"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"worker_id","value":"'master'"},{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"9ffbabceb16c35d84a4f81eb4f768a79\")>"},{"name":"cur_language","value":"''"},{"name":"cur_country","value":"'au'"},{"name":"cur_role","value":"'NoAuth'"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"}],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"56aef7935865b17d","name":"Screenshot","source":"56aef7935865b17d.png","type":"image/png","size":331958},{"uid":"c374da9b176afc23","name":"stdout","source":"c374da9b176afc23.txt","type":"text/plain","size":2941}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":5,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"d::0","time":{"start":1734833803557,"stop":1734833803739,"duration":182},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"epic","value":"TC_55!634 | The loading spinner is displayed continuously on the page \"Gold price predictions for the next...\" after click on [Trade now]"},{"name":"feature","value":"Role: NoAuth"},{"name":"story","value":"Country: au"},{"name":"tag","value":"bug_634"},{"name":"tag","value":"us_55"},{"name":"parentSuite","value":"tests.US_55_ReTestsManual.K_Alex_N"},{"name":"suite","value":"US_55_K_Alex_N_ReTestsManual_test"},{"name":"subSuite","value":"TestManualDetectedBugs"},{"name":"host","value":"fv-az1680-128"},{"name":"thread","value":"44321-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.US_55_ReTestsManual.K_Alex_N.US_55_K_Alex_N_ReTestsManual_test"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"cur_country","value":"'au'"},{"name":"cur_language","value":"''"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"},{"name":"cur_role","value":"'NoAuth'"},{"name":"d","value":"'Chrome'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":3,"skipped":0,"passed":0,"unknown":0,"total":5},"items":[{"uid":"65088d5cfa598707","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/264//#testresult/65088d5cfa598707","status":"broken","statusDetails":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <b class=\"\">...</b> is not clickable at point (817, 69). Other element would receive the click: <span class=\"menuGroup_linkfirstLevel__d5JGC\">...</span>\n  (Session info: chrome=131.0.6778.139)\nStacktrace:\n#0 0x55e2bdd8c8fa <unknown>\n#1 0x55e2bd89dd20 <unknown>\n#2 0x55e2bd8f3766 <unknown>\n#3 0x55e2bd8f16cd <unknown>\n#4 0x55e2bd8eede5 <unknown>\n#5 0x55e2bd8edfa8 <unknown>\n#6 0x55e2bd8e1765 <unknown>\n#7 0x55e2bd910af2 <unknown>\n#8 0x55e2bd8e10a8 <unknown>\n#9 0x55e2bd910cbe <unknown>\n#10 0x55e2bd92f560 <unknown>\n#11 0x55e2bd910893 <unknown>\n#12 0x55e2bd8df30d <unknown>\n#13 0x55e2bd8e032e <unknown>\n#14 0x55e2bdd5900b <unknown>\n#15 0x55e2bdd5cf97 <unknown>\n#16 0x55e2bdd4571c <unknown>\n#17 0x55e2bdd5db17 <unknown>\n#18 0x55e2bdd2a6cf <unknown>\n#19 0x55e2bdd7b6b8 <unknown>\n#20 0x55e2bdd7b880 <unknown>\n#21 0x55e2bdd8b776 <unknown>\n#22 0x7fb45869ca94 <unknown>\n#23 0x7fb458729c3c <unknown>","time":{"start":1734747899248,"stop":1734747919095,"duration":19847}},{"uid":"cbb5838ae6fc099e","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/262//#testresult/cbb5838ae6fc099e","status":"broken","statusDetails":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <b class=\"\">...</b> is not clickable at point (817, 33). Other element would receive the click: <div class=\"grid_grid__2D3md topPanel_directions__2gpsL grid_gMdLg__9Xp_H grid_startToCenter__rpi6Z grid_flex__Nv3nG\">...</div>\n  (Session info: chrome=131.0.6778.139)\nStacktrace:\n#0 0x560c302c58fa <unknown>\n#1 0x560c2fdd6d20 <unknown>\n#2 0x560c2fe2c766 <unknown>\n#3 0x560c2fe2a6cd <unknown>\n#4 0x560c2fe27de5 <unknown>\n#5 0x560c2fe26fa8 <unknown>\n#6 0x560c2fe1a765 <unknown>\n#7 0x560c2fe49af2 <unknown>\n#8 0x560c2fe1a0a8 <unknown>\n#9 0x560c2fe49cbe <unknown>\n#10 0x560c2fe68560 <unknown>\n#11 0x560c2fe49893 <unknown>\n#12 0x560c2fe1830d <unknown>\n#13 0x560c2fe1932e <unknown>\n#14 0x560c3029200b <unknown>\n#15 0x560c30295f97 <unknown>\n#16 0x560c3027e71c <unknown>\n#17 0x560c30296b17 <unknown>\n#18 0x560c302636cf <unknown>\n#19 0x560c302b46b8 <unknown>\n#20 0x560c302b4880 <unknown>\n#21 0x560c302c4776 <unknown>\n#22 0x7f60c249ca94 <unknown>\n#23 0x7f60c2529c3c <unknown>","time":{"start":1734573097190,"stop":1734573114411,"duration":17221}},{"uid":"c342db215c961d9f","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/259//#testresult/c342db215c961d9f","status":"failed","statusDetails":"Failed: Bug # 55!634 the page loader is present","time":{"start":1734314571340,"stop":1734314585139,"duration":13799}},{"uid":"c53cfbd2cadbfa99","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/257//#testresult/c53cfbd2cadbfa99","status":"failed","statusDetails":"Failed: Bug # 55!634 the page loader is present","time":{"start":1734165638730,"stop":1734165652675,"duration":13945}}]},"tags":["us_55","bug_634"]},"source":"1d6b4e8cbc5ccedb.json","parameterValues":["'au'","''","'test001.miketar+1@gmail.com'","'Qwer1234-!@#$'","'NoAuth'","'Chrome'"]}