{"uid":"7f84b340773616b8","name":"TC_01.03.00_005 | open Trading instrument page. Bid:01.03.00_005-nl.ae.NoAuth","fullName":"tests.US_01_Markets.US_01-03_Forex.US_01-03-00_forex_tests.TestForex#test_005_trading_instrument","historyId":"d8892738d33d3b43c2a841179cf80006","time":{"start":1712926867551,"stop":1712926874524,"duration":6973},"description":"\n        Check: open Trading instrument page\n        Language: All License: All (except FCA)\n        ","descriptionHtml":"<pre><code>    Check: open Trading instrument page\n    Language: All License: All (except FCA)\n</code></pre>\n","status":"broken","statusMessage":"selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: 'using' must be a string\n  (Session info: chrome=123.0.6312.105)\nStacktrace:\n#0 0x56448556c863 <unknown>\n#1 0x5644852628c6 <unknown>\n#2 0x5644852acde5 <unknown>\n#3 0x5644852ad6d1 <unknown>\n#4 0x5644852f0744 <unknown>\n#5 0x5644852cf5cd <unknown>\n#6 0x5644852edc19 <unknown>\n#7 0x5644852cf343 <unknown>\n#8 0x5644852a0593 <unknown>\n#9 0x5644852a0f5e <unknown>\n#10 0x56448553084b <unknown>\n#11 0x5644855347a5 <unknown>\n#12 0x56448551e571 <unknown>\n#13 0x564485535332 <unknown>\n#14 0x56448550387f <unknown>\n#15 0x56448555b728 <unknown>\n#16 0x56448555b8fb <unknown>\n#17 0x56448556b9b4 <unknown>\n#18 0x7f50bb494ac3 <unknown>","statusTrace":"self = <US_01-03-00_forex_tests.TestForex object at 0x7fd394262c60>\nworker_id = 'master'\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"8f25142cfe8094ad714cba8928a688ff\")>\ncur_language = 'nl', cur_country = 'ae', cur_role = 'NoAuth'\ncur_login = 'test001.miketar+1@gmail.com', cur_password = 'Qwer1234-!@#$'\n\n    @allure.step(\"Start test_01.03_005 open Trading instrument page\")\n    @pytest.mark.test_005\n    def test_005_trading_instrument(\n            self, worker_id, d, cur_language, cur_country, cur_role, cur_login, cur_password):\n        \"\"\"\n        Check: open Trading instrument page\n        Language: All License: All (except FCA)\n        \"\"\"\n        bid = build_dynamic_arg_v4(\n            d, worker_id, cur_language, cur_country, cur_role,\n            \"01.03\", \"Markets > Menu item [Forex]\",\n            \".00_005\", \"open Trading instrument page\")\n    \n        Common().check_country_in_list_and_skip_if_present(cur_country, [\"gb\"])\n    \n        page_conditions = Conditions(d, \"\")\n        link = page_conditions.preconditions(\n            d, CapitalComPageSrc.URL, \"\", cur_language, cur_country, cur_role, cur_login, cur_password)\n    \n        menu = MenuSection(d, link)\n        cur_item_link = menu.open_forex_markets_menu(d, cur_language, cur_country, link)\n    \n        test_element = TableTradingInstrumentsItem(d, cur_item_link, bid)\n>       test_element.full_test(d, cur_language, cur_country, cur_role, cur_item_link)\n\ntests/US_01_Markets/US_01-03_Forex/US_01-03-00_forex_tests.py:147: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/Elements/TableTradingInstrumentItem.py:29: in full_test\n    test_element.assert_page_trading_instrument(\npages/Elements/AssertClass.py:240: in assert_page_trading_instrument\n    self.page_trading_instrument.check_open_trading_instrument_page(title_instrument)\npages/Capital/trading_instrument_page.py:17: in check_open_trading_instrument_page\n    page_instrument_title = self.driver.find_element(PageTradingInstrumentLocators.PAGE_INSTRUMENT_TITLE).text\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:741: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fd396bbbcb0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"invalid argument: \\'using\\' must be a string...\\\\n#16 0x56448555b8fb \\\\u003Cunknown>\\\\n#17 0x56448556b9b4 \\\\u003Cunknown>\\\\n#18 0x7f50bb494ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: 'using' must be a string\nE         (Session info: chrome=123.0.6312.105)\nE       Stacktrace:\nE       #0 0x56448556c863 <unknown>\nE       #1 0x5644852628c6 <unknown>\nE       #2 0x5644852acde5 <unknown>\nE       #3 0x5644852ad6d1 <unknown>\nE       #4 0x5644852f0744 <unknown>\nE       #5 0x5644852cf5cd <unknown>\nE       #6 0x5644852edc19 <unknown>\nE       #7 0x5644852cf343 <unknown>\nE       #8 0x5644852a0593 <unknown>\nE       #9 0x5644852a0f5e <unknown>\nE       #10 0x56448553084b <unknown>\nE       #11 0x5644855347a5 <unknown>\nE       #12 0x56448551e571 <unknown>\nE       #13 0x564485535332 <unknown>\nE       #14 0x56448550387f <unknown>\nE       #15 0x56448555b728 <unknown>\nE       #16 0x56448555b8fb <unknown>\nE       #17 0x56448556b9b4 <unknown>\nE       #18 0x7f50bb494ac3 <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: InvalidArgumentException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"d","time":{"start":1712926457851,"stop":1712926458275,"duration":424},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_login","time":{"start":1712926458275,"stop":1712926458275,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_password","time":{"start":1712926458275,"stop":1712926458275,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_country","time":{"start":1712926458275,"stop":1712926458275,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_language","time":{"start":1712926458275,"stop":1712926458275,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"worker_id","time":{"start":1712926458275,"stop":1712926458275,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_role","time":{"start":1712926659229,"stop":1712926659229,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"\n        Check: open Trading instrument page\n        Language: All License: All (except FCA)\n        ","status":"broken","statusMessage":"selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: 'using' must be a string\n  (Session info: chrome=123.0.6312.105)\nStacktrace:\n#0 0x56448556c863 <unknown>\n#1 0x5644852628c6 <unknown>\n#2 0x5644852acde5 <unknown>\n#3 0x5644852ad6d1 <unknown>\n#4 0x5644852f0744 <unknown>\n#5 0x5644852cf5cd <unknown>\n#6 0x5644852edc19 <unknown>\n#7 0x5644852cf343 <unknown>\n#8 0x5644852a0593 <unknown>\n#9 0x5644852a0f5e <unknown>\n#10 0x56448553084b <unknown>\n#11 0x5644855347a5 <unknown>\n#12 0x56448551e571 <unknown>\n#13 0x564485535332 <unknown>\n#14 0x56448550387f <unknown>\n#15 0x56448555b728 <unknown>\n#16 0x56448555b8fb <unknown>\n#17 0x56448556b9b4 <unknown>\n#18 0x7f50bb494ac3 <unknown>","statusTrace":"self = <US_01-03-00_forex_tests.TestForex object at 0x7fd394262c60>\nworker_id = 'master'\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"8f25142cfe8094ad714cba8928a688ff\")>\ncur_language = 'nl', cur_country = 'ae', cur_role = 'NoAuth'\ncur_login = 'test001.miketar+1@gmail.com', cur_password = 'Qwer1234-!@#$'\n\n    @allure.step(\"Start test_01.03_005 open Trading instrument page\")\n    @pytest.mark.test_005\n    def test_005_trading_instrument(\n            self, worker_id, d, cur_language, cur_country, cur_role, cur_login, cur_password):\n        \"\"\"\n        Check: open Trading instrument page\n        Language: All License: All (except FCA)\n        \"\"\"\n        bid = build_dynamic_arg_v4(\n            d, worker_id, cur_language, cur_country, cur_role,\n            \"01.03\", \"Markets > Menu item [Forex]\",\n            \".00_005\", \"open Trading instrument page\")\n    \n        Common().check_country_in_list_and_skip_if_present(cur_country, [\"gb\"])\n    \n        page_conditions = Conditions(d, \"\")\n        link = page_conditions.preconditions(\n            d, CapitalComPageSrc.URL, \"\", cur_language, cur_country, cur_role, cur_login, cur_password)\n    \n        menu = MenuSection(d, link)\n        cur_item_link = menu.open_forex_markets_menu(d, cur_language, cur_country, link)\n    \n        test_element = TableTradingInstrumentsItem(d, cur_item_link, bid)\n>       test_element.full_test(d, cur_language, cur_country, cur_role, cur_item_link)\n\ntests/US_01_Markets/US_01-03_Forex/US_01-03-00_forex_tests.py:147: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/Elements/TableTradingInstrumentItem.py:29: in full_test\n    test_element.assert_page_trading_instrument(\npages/Elements/AssertClass.py:240: in assert_page_trading_instrument\n    self.page_trading_instrument.check_open_trading_instrument_page(title_instrument)\npages/Capital/trading_instrument_page.py:17: in check_open_trading_instrument_page\n    page_instrument_title = self.driver.find_element(PageTradingInstrumentLocators.PAGE_INSTRUMENT_TITLE).text\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:741: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fd396bbbcb0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"invalid argument: \\'using\\' must be a string...\\\\n#16 0x56448555b8fb \\\\u003Cunknown>\\\\n#17 0x56448556b9b4 \\\\u003Cunknown>\\\\n#18 0x7f50bb494ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: 'using' must be a string\nE         (Session info: chrome=123.0.6312.105)\nE       Stacktrace:\nE       #0 0x56448556c863 <unknown>\nE       #1 0x5644852628c6 <unknown>\nE       #2 0x5644852acde5 <unknown>\nE       #3 0x5644852ad6d1 <unknown>\nE       #4 0x5644852f0744 <unknown>\nE       #5 0x5644852cf5cd <unknown>\nE       #6 0x5644852edc19 <unknown>\nE       #7 0x5644852cf343 <unknown>\nE       #8 0x5644852a0593 <unknown>\nE       #9 0x5644852a0f5e <unknown>\nE       #10 0x56448553084b <unknown>\nE       #11 0x5644855347a5 <unknown>\nE       #12 0x56448551e571 <unknown>\nE       #13 0x564485535332 <unknown>\nE       #14 0x56448550387f <unknown>\nE       #15 0x56448555b728 <unknown>\nE       #16 0x56448555b8fb <unknown>\nE       #17 0x56448556b9b4 <unknown>\nE       #18 0x7f50bb494ac3 <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: InvalidArgumentException","steps":[{"name":"Start test_01.03_005 open Trading instrument page","time":{"start":1712926867551,"stop":1712926874523,"duration":6972},"status":"broken","statusMessage":"selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: 'using' must be a string\n  (Session info: chrome=123.0.6312.105)\nStacktrace:\n#0 0x56448556c863 <unknown>\n#1 0x5644852628c6 <unknown>\n#2 0x5644852acde5 <unknown>\n#3 0x5644852ad6d1 <unknown>\n#4 0x5644852f0744 <unknown>\n#5 0x5644852cf5cd <unknown>\n#6 0x5644852edc19 <unknown>\n#7 0x5644852cf343 <unknown>\n#8 0x5644852a0593 <unknown>\n#9 0x5644852a0f5e <unknown>\n#10 0x56448553084b <unknown>\n#11 0x5644855347a5 <unknown>\n#12 0x56448551e571 <unknown>\n#13 0x564485535332 <unknown>\n#14 0x56448550387f <unknown>\n#15 0x56448555b728 <unknown>\n#16 0x56448555b8fb <unknown>\n#17 0x56448556b9b4 <unknown>\n#18 0x7f50bb494ac3 <unknown>\n\n","statusTrace":"  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/tests/US_01_Markets/US_01-03_Forex/US_01-03-00_forex_tests.py\", line 147, in test_005_trading_instrument\n    test_element.full_test(d, cur_language, cur_country, cur_role, cur_item_link)\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/Elements/TableTradingInstrumentItem.py\", line 29, in full_test\n    test_element.assert_page_trading_instrument(\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/Elements/AssertClass.py\", line 240, in assert_page_trading_instrument\n    self.page_trading_instrument.check_open_trading_instrument_page(title_instrument)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/Capital/trading_instrument_page.py\", line 17, in check_open_trading_instrument_page\n    page_instrument_title = self.driver.find_element(PageTradingInstrumentLocators.PAGE_INSTRUMENT_TITLE).text\n                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 741, in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 347, in execute\n    self.error_handler.check_response(response)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[{"name":"Preconditions","time":{"start":1712926867553,"stop":1712926870802,"duration":3249},"status":"passed","steps":[{"name":"2024-04-12 12:54:17.825705   Start Checking Captcha","time":{"start":1712926869755,"stop":1712926870796,"duration":1041},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"8f25142cfe8094ad714cba8928a688ff\")>"},{"name":"host","value":"'https://capital.com/'"},{"name":"end_point","value":"''"},{"name":"cur_language","value":"'nl'"},{"name":"cur_country","value":"'ae'"},{"name":"cur_role","value":"'NoAuth'"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"}],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Select \"Markets\" menu, \"Forex\" submenu","time":{"start":1712926870802,"stop":1712926874319,"duration":3517},"status":"passed","steps":[{"name":"Focus moved to 'Markets' menu","time":{"start":1712926870810,"stop":1712926872599,"duration":1789},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"8f25142cfe8094ad714cba8928a688ff\")>"},{"name":"test_language","value":"'nl'"},{"name":"test_country","value":"'ae'"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Focus move to 'Forex' submenu item and click","time":{"start":1712926872600,"stop":1712926874020,"duration":1420},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"8f25142cfe8094ad714cba8928a688ff\")>"},{"name":"test_language","value":"'nl'"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"8f25142cfe8094ad714cba8928a688ff\")>"},{"name":"cur_language","value":"'nl'"},{"name":"cur_country","value":"'ae'"},{"name":"link","value":"'https://capital.com/nl'"}],"shouldDisplayMessage":false,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Click line instrument","time":{"start":1712926874342,"stop":1712926874504,"duration":162},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"8f25142cfe8094ad714cba8928a688ff\")>"},{"name":"cur_item_link","value":"'https://capital.com/nl/andere-instrumenten'"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Checking that \"Page of trading instrument\" on capital.com with corresponding instrument is opened","time":{"start":1712926874504,"stop":1712926874522,"duration":18},"status":"broken","statusMessage":"selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: 'using' must be a string\n  (Session info: chrome=123.0.6312.105)\nStacktrace:\n#0 0x56448556c863 <unknown>\n#1 0x5644852628c6 <unknown>\n#2 0x5644852acde5 <unknown>\n#3 0x5644852ad6d1 <unknown>\n#4 0x5644852f0744 <unknown>\n#5 0x5644852cf5cd <unknown>\n#6 0x5644852edc19 <unknown>\n#7 0x5644852cf343 <unknown>\n#8 0x5644852a0593 <unknown>\n#9 0x5644852a0f5e <unknown>\n#10 0x56448553084b <unknown>\n#11 0x5644855347a5 <unknown>\n#12 0x56448551e571 <unknown>\n#13 0x564485535332 <unknown>\n#14 0x56448550387f <unknown>\n#15 0x56448555b728 <unknown>\n#16 0x56448555b8fb <unknown>\n#17 0x56448556b9b4 <unknown>\n#18 0x7f50bb494ac3 <unknown>\n\n","statusTrace":"  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/Elements/AssertClass.py\", line 240, in assert_page_trading_instrument\n    self.page_trading_instrument.check_open_trading_instrument_page(title_instrument)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/Capital/trading_instrument_page.py\", line 17, in check_open_trading_instrument_page\n    page_instrument_title = self.driver.find_element(PageTradingInstrumentLocators.PAGE_INSTRUMENT_TITLE).text\n                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 741, in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 347, in execute\n    self.error_handler.check_response(response)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[{"name":"2024-04-12 12:54:17.676978   Check trading instrument page","time":{"start":1712926874505,"stop":1712926874521,"duration":16},"status":"broken","statusMessage":"selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: 'using' must be a string\n  (Session info: chrome=123.0.6312.105)\nStacktrace:\n#0 0x56448556c863 <unknown>\n#1 0x5644852628c6 <unknown>\n#2 0x5644852acde5 <unknown>\n#3 0x5644852ad6d1 <unknown>\n#4 0x5644852f0744 <unknown>\n#5 0x5644852cf5cd <unknown>\n#6 0x5644852edc19 <unknown>\n#7 0x5644852cf343 <unknown>\n#8 0x5644852a0593 <unknown>\n#9 0x5644852a0f5e <unknown>\n#10 0x56448553084b <unknown>\n#11 0x5644855347a5 <unknown>\n#12 0x56448551e571 <unknown>\n#13 0x564485535332 <unknown>\n#14 0x56448550387f <unknown>\n#15 0x56448555b728 <unknown>\n#16 0x56448555b8fb <unknown>\n#17 0x56448556b9b4 <unknown>\n#18 0x7f50bb494ac3 <unknown>\n\n","statusTrace":"  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/Capital/trading_instrument_page.py\", line 17, in check_open_trading_instrument_page\n    page_instrument_title = self.driver.find_element(PageTradingInstrumentLocators.PAGE_INSTRUMENT_TITLE).text\n                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 741, in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 347, in execute\n    self.error_handler.check_response(response)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[{"name":"title_instrument","value":"'NZD/USD'"}],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"8f25142cfe8094ad714cba8928a688ff\")>"},{"name":"cur_language","value":"'nl'"},{"name":"cur_link","value":"'https://capital.com/nl/andere-instrumenten'"},{"name":"title_instrument","value":"'NZD/USD'"}],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"worker_id","value":"'master'"},{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"8f25142cfe8094ad714cba8928a688ff\")>"},{"name":"cur_language","value":"'nl'"},{"name":"cur_country","value":"'ae'"},{"name":"cur_role","value":"'NoAuth'"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"}],"shouldDisplayMessage":false,"stepsCount":8,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"b27877e1e90e5292","name":"Screenshot","source":"b27877e1e90e5292.png","type":"image/png","size":133029},{"uid":"75dab5153f2e18ab","name":"stdout","source":"75dab5153f2e18ab.txt","type":"text/plain","size":3339}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":9,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"d::0","time":{"start":1712927066115,"stop":1712927066264,"duration":149},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"epic","value":"US_01.03 | Markets > Menu item [Forex]"},{"name":"feature","value":"Language: nl"},{"name":"story","value":"Country: ae / Role: NoAuth"},{"name":"tag","value":"test_005"},{"name":"tag","value":"us_01_03_00"},{"name":"parentSuite","value":"tests.US_01_Markets.US_01-03_Forex"},{"name":"suite","value":"US_01-03-00_forex_tests"},{"name":"subSuite","value":"TestForex"},{"name":"host","value":"fv-az1435-168"},{"name":"thread","value":"9602-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.US_01_Markets.US_01-03_Forex.US_01-03-00_forex_tests"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"cur_country","value":"'ae'"},{"name":"cur_language","value":"'nl'"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"},{"name":"cur_role","value":"'NoAuth'"},{"name":"d","value":"'Chrome'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["test_005","us_01_03_00"]},"source":"7f84b340773616b8.json","parameterValues":["'ae'","'nl'","'test001.miketar+1@gmail.com'","'Qwer1234-!@#$'","'NoAuth'","'Chrome'"]}