{"uid":"cca3a0c53b4bbc65","name":"TC_01.05.01_002 | Testing button [View Detailed Chart] on trading instrument page. Bid:01.05.01_002-cn.ae.Auth","fullName":"tests.US_01_Markets.US_01-05_Commodities.US_01-05-01_Commodities_test.TestCommodities#test_002_page_trading_instrument_view_detailed_chart_button","historyId":"a79dd123dd7da2ea6910e1bcde022eb1","time":{"start":1711371352158,"stop":1711371366400,"duration":14242},"description":"\n        Check: Button [View Detailed Chart] on trading instrument page\n        Language: All. License: All (except FCA).\n        ","descriptionHtml":"<pre><code>    Check: Button [View Detailed Chart] on trading instrument page\n    Language: All. License: All (except FCA).\n</code></pre>\n","status":"failed","statusMessage":"AssertionError: Close button on 'Sign up' form is not clickable","statusTrace":"self = <pages.Elements.PageInstrumentViewDetailedChartButton.PageInstrumentViewDetailedChartButton object at 0x7f6018b10a70>\n\n    @allure.step(\"Click button [View Detailed Chart] on the page content\")\n    def element_click(self):\n        print(f\"\\n{datetime.now()}   2. Act_v0\")\n        print(f\"{datetime.now()}   Start Click button [View Detailed Chart] =>\")\n    \n        button_list = self.driver.find_elements(*PageTradingInstrumentMarketsLocators.BUTTON_VIEW_DETAILED_CHART)\n    \n        time_out = 3\n        if not self.element_is_clickable(button_list[0], time_out):\n            print(f\"{datetime.now()} => BUTTON_VIEW_DETAILED_CHART is not clickable after {time_out} sec. Stop TC>\")\n            pytest.fail(f\"BUTTON_VIEW_DETAILED_CHART is not clickable after {time_out} sec.\")\n    \n        print(f\"{datetime.now()}   BUTTON_VIEW_DETAILED_CHART is clickable =>\")\n    \n        try:\n>           button_list[0].click()\n\npages/Elements/PageInstrumentViewDetailedChartButton.py:67: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f6018b47c80>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x562f85ad4723 \\\\u003Cunknown>\\\\n#21 0x562f85ae50e4 \\\\u003Cunknown>\\\\n#22 0x7f8539a94ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"/cn/cotton-no-2-spot-commodity#\" data-link=\"uu\" data-iid=\"7090561509053636\" data-platform=\"spotlight\" class=\"chartMarketsFunc__btn js_signup_new js-analyticsVisible js-analyticsClick\" data-type=\"detailed_chart\">...</a> is not clickable at point (221, 361). Other element would receive the click: <div class=\"onetrust-pc-dark-filter ot-fade-in\" style=\"z-index:2147483645;\"></div>\nE         (Session info: chrome=122.0.6261.128)\nE       Stacktrace:\nE       #0 0x562f85ae5f33 <unknown>\nE       #1 0x562f857ddce6 <unknown>\nE       #2 0x562f8582fa73 <unknown>\nE       #3 0x562f8582d98e <unknown>\nE       #4 0x562f8582b367 <unknown>\nE       #5 0x562f8582a732 <unknown>\nE       #6 0x562f8581dd27 <unknown>\nE       #7 0x562f8584aeb2 <unknown>\nE       #8 0x562f8581d6b8 <unknown>\nE       #9 0x562f8584b07e <unknown>\nE       #10 0x562f85869899 <unknown>\nE       #11 0x562f8584ac53 <unknown>\nE       #12 0x562f8581bdb3 <unknown>\nE       #13 0x562f8581c77e <unknown>\nE       #14 0x562f85aab86b <unknown>\nE       #15 0x562f85aaf885 <unknown>\nE       #16 0x562f85a99181 <unknown>\nE       #17 0x562f85ab0412 <unknown>\nE       #18 0x562f85a7d25f <unknown>\nE       #19 0x562f85ad4528 <unknown>\nE       #20 0x562f85ad4723 <unknown>\nE       #21 0x562f85ae50e4 <unknown>\nE       #22 0x7f8539a94ac3 <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <US_01-05-01_Commodities_test.TestCommodities object at 0x7f6018b1ac00>\nworker_id = 'master'\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"1eaa2525be46ec42bc8de594a0a1de69\")>\ncur_language = 'cn', cur_country = 'ae', cur_role = 'Auth'\ncur_login = 'test001.miketar+1@gmail.com', cur_password = 'Qwer1234-!@#$'\ncur_item_link = 'https://capital.com/cn/cotton-no-2-spot-commodity'\n\n    @allure.step(\"Start test of button [View Detailed Chart] on trading instrument page'\")\n    @pytest.mark.test_002\n    def test_002_page_trading_instrument_view_detailed_chart_button(\n            self, worker_id, d, cur_language, cur_country, cur_role, cur_login, cur_password, cur_item_link):\n        \"\"\"\n        Check: Button [View Detailed Chart] on trading instrument page\n        Language: All. License: All (except FCA).\n        \"\"\"\n        bid = build_dynamic_arg_v4(\n            d, worker_id, cur_language, cur_country, cur_role,\n            \"01.05\", \"Markets > Menu item [Commodities]\",\n            \".01_002\", \"Testing button [View Detailed Chart] on trading instrument page\")\n    \n        Common().check_country_in_list_and_skip_if_present(cur_country, [\"gb\"])\n    \n        page_conditions = Conditions(d, \"\")\n        page_conditions.preconditions(\n            d, CapitalComPageSrc.URL, \"\", cur_language, cur_country, cur_role, cur_login, cur_password)\n    \n        test_element = PageInstrumentViewDetailedChartButton(d, cur_item_link, bid)\n>       test_element.full_test_with_tpi(d, cur_language, cur_country, cur_role, cur_item_link)\n\ntests/US_01_Markets/US_01-05_Commodities/US_01-05-01_Commodities_test.py:74: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/Elements/PageInstrumentViewDetailedChartButton.py:19: in full_test_with_tpi\n    self.element_click()\npages/Elements/PageInstrumentViewDetailedChartButton.py:74: in element_click\n    if page_.close_signup_form():\npages/Signup_login/signup_login.py:307: in close_signup_form\n    Common().assert_true_false(False, \"Close button on 'Sign up' form is not clickable\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncondition = False, msg = \"Close button on 'Sign up' form is not clickable\"\n\n    @staticmethod\n    def assert_true_false(condition=False, msg=\"\"):\n    \tif condition:\n    \t\tCommon.flag_of_bug = False\n    \t\tassert True, msg\n    \telse:\n    \t\tCommon.flag_of_bug = True\n>   \t\tassert False, msg\nE     AssertionError: Close button on 'Sign up' form is not clickable\n\npages/common.py:172: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"d","time":{"start":1711370838706,"stop":1711370839078,"duration":372},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"worker_id","time":{"start":1711370839078,"stop":1711370839078,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"cur_password","time":{"start":1711370839079,"stop":1711370839079,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"cur_login","time":{"start":1711370839079,"stop":1711370839079,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"cur_language","time":{"start":1711370839079,"stop":1711370839079,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"cur_country","time":{"start":1711371144720,"stop":1711371144720,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"cur_role","time":{"start":1711371338310,"stop":1711371338310,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false}],"testStage":{"description":"\n        Check: Button [View Detailed Chart] on trading instrument page\n        Language: All. License: All (except FCA).\n        ","status":"failed","statusMessage":"AssertionError: Close button on 'Sign up' form is not clickable","statusTrace":"self = <pages.Elements.PageInstrumentViewDetailedChartButton.PageInstrumentViewDetailedChartButton object at 0x7f6018b10a70>\n\n    @allure.step(\"Click button [View Detailed Chart] on the page content\")\n    def element_click(self):\n        print(f\"\\n{datetime.now()}   2. Act_v0\")\n        print(f\"{datetime.now()}   Start Click button [View Detailed Chart] =>\")\n    \n        button_list = self.driver.find_elements(*PageTradingInstrumentMarketsLocators.BUTTON_VIEW_DETAILED_CHART)\n    \n        time_out = 3\n        if not self.element_is_clickable(button_list[0], time_out):\n            print(f\"{datetime.now()} => BUTTON_VIEW_DETAILED_CHART is not clickable after {time_out} sec. Stop TC>\")\n            pytest.fail(f\"BUTTON_VIEW_DETAILED_CHART is not clickable after {time_out} sec.\")\n    \n        print(f\"{datetime.now()}   BUTTON_VIEW_DETAILED_CHART is clickable =>\")\n    \n        try:\n>           button_list[0].click()\n\npages/Elements/PageInstrumentViewDetailedChartButton.py:67: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f6018b47c80>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x562f85ad4723 \\\\u003Cunknown>\\\\n#21 0x562f85ae50e4 \\\\u003Cunknown>\\\\n#22 0x7f8539a94ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"/cn/cotton-no-2-spot-commodity#\" data-link=\"uu\" data-iid=\"7090561509053636\" data-platform=\"spotlight\" class=\"chartMarketsFunc__btn js_signup_new js-analyticsVisible js-analyticsClick\" data-type=\"detailed_chart\">...</a> is not clickable at point (221, 361). Other element would receive the click: <div class=\"onetrust-pc-dark-filter ot-fade-in\" style=\"z-index:2147483645;\"></div>\nE         (Session info: chrome=122.0.6261.128)\nE       Stacktrace:\nE       #0 0x562f85ae5f33 <unknown>\nE       #1 0x562f857ddce6 <unknown>\nE       #2 0x562f8582fa73 <unknown>\nE       #3 0x562f8582d98e <unknown>\nE       #4 0x562f8582b367 <unknown>\nE       #5 0x562f8582a732 <unknown>\nE       #6 0x562f8581dd27 <unknown>\nE       #7 0x562f8584aeb2 <unknown>\nE       #8 0x562f8581d6b8 <unknown>\nE       #9 0x562f8584b07e <unknown>\nE       #10 0x562f85869899 <unknown>\nE       #11 0x562f8584ac53 <unknown>\nE       #12 0x562f8581bdb3 <unknown>\nE       #13 0x562f8581c77e <unknown>\nE       #14 0x562f85aab86b <unknown>\nE       #15 0x562f85aaf885 <unknown>\nE       #16 0x562f85a99181 <unknown>\nE       #17 0x562f85ab0412 <unknown>\nE       #18 0x562f85a7d25f <unknown>\nE       #19 0x562f85ad4528 <unknown>\nE       #20 0x562f85ad4723 <unknown>\nE       #21 0x562f85ae50e4 <unknown>\nE       #22 0x7f8539a94ac3 <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <US_01-05-01_Commodities_test.TestCommodities object at 0x7f6018b1ac00>\nworker_id = 'master'\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"1eaa2525be46ec42bc8de594a0a1de69\")>\ncur_language = 'cn', cur_country = 'ae', cur_role = 'Auth'\ncur_login = 'test001.miketar+1@gmail.com', cur_password = 'Qwer1234-!@#$'\ncur_item_link = 'https://capital.com/cn/cotton-no-2-spot-commodity'\n\n    @allure.step(\"Start test of button [View Detailed Chart] on trading instrument page'\")\n    @pytest.mark.test_002\n    def test_002_page_trading_instrument_view_detailed_chart_button(\n            self, worker_id, d, cur_language, cur_country, cur_role, cur_login, cur_password, cur_item_link):\n        \"\"\"\n        Check: Button [View Detailed Chart] on trading instrument page\n        Language: All. License: All (except FCA).\n        \"\"\"\n        bid = build_dynamic_arg_v4(\n            d, worker_id, cur_language, cur_country, cur_role,\n            \"01.05\", \"Markets > Menu item [Commodities]\",\n            \".01_002\", \"Testing button [View Detailed Chart] on trading instrument page\")\n    \n        Common().check_country_in_list_and_skip_if_present(cur_country, [\"gb\"])\n    \n        page_conditions = Conditions(d, \"\")\n        page_conditions.preconditions(\n            d, CapitalComPageSrc.URL, \"\", cur_language, cur_country, cur_role, cur_login, cur_password)\n    \n        test_element = PageInstrumentViewDetailedChartButton(d, cur_item_link, bid)\n>       test_element.full_test_with_tpi(d, cur_language, cur_country, cur_role, cur_item_link)\n\ntests/US_01_Markets/US_01-05_Commodities/US_01-05-01_Commodities_test.py:74: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/Elements/PageInstrumentViewDetailedChartButton.py:19: in full_test_with_tpi\n    self.element_click()\npages/Elements/PageInstrumentViewDetailedChartButton.py:74: in element_click\n    if page_.close_signup_form():\npages/Signup_login/signup_login.py:307: in close_signup_form\n    Common().assert_true_false(False, \"Close button on 'Sign up' form is not clickable\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncondition = False, msg = \"Close button on 'Sign up' form is not clickable\"\n\n    @staticmethod\n    def assert_true_false(condition=False, msg=\"\"):\n    \tif condition:\n    \t\tCommon.flag_of_bug = False\n    \t\tassert True, msg\n    \telse:\n    \t\tCommon.flag_of_bug = True\n>   \t\tassert False, msg\nE     AssertionError: Close button on 'Sign up' form is not clickable\n\npages/common.py:172: AssertionError","steps":[{"name":"Start test of button [View Detailed Chart] on trading instrument page'","time":{"start":1711371352158,"stop":1711371366399,"duration":14241},"status":"failed","statusMessage":"AssertionError: Close button on 'Sign up' form is not clickable\n","statusTrace":"  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/tests/US_01_Markets/US_01-05_Commodities/US_01-05-01_Commodities_test.py\", line 74, in test_002_page_trading_instrument_view_detailed_chart_button\n    test_element.full_test_with_tpi(d, cur_language, cur_country, cur_role, cur_item_link)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/Elements/PageInstrumentViewDetailedChartButton.py\", line 19, in full_test_with_tpi\n    self.element_click()\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/Elements/PageInstrumentViewDetailedChartButton.py\", line 74, in element_click\n    if page_.close_signup_form():\n       ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/Signup_login/signup_login.py\", line 307, in close_signup_form\n    Common().assert_true_false(False, \"Close button on 'Sign up' form is not clickable\")\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/common.py\", line 172, in assert_true_false\n    assert False, msg\n","steps":[{"name":"2024-03-25 12:47:18.606252   Start Building dynamic arguments for allure report generation","time":{"start":1711371352158,"stop":1711371352160,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"1eaa2525be46ec42bc8de594a0a1de69\")>"},{"name":"worker_id","value":"'master'"},{"name":"cur_language","value":"'cn'"},{"name":"cur_country","value":"'ae'"},{"name":"cur_role","value":"'Auth'"},{"name":"us","value":"'01.05'"},{"name":"desc_us","value":"'Markets > Menu item [Commodities]'"},{"name":"num_tc","value":"'.01_002'"},{"name":"desc_tc","value":"'Testing button [View Detailed Chart] on trading instrument page'"},{"name":"manual","value":"False"},{"name":"new_layout","value":"False"}],"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"2024-03-25 12:47:18.605737   Set preconditions","time":{"start":1711371352160,"stop":1711371358842,"duration":6682},"status":"passed","steps":[{"name":"2024-03-25 12:47:18.604603   Start Checking Captcha","time":{"start":1711371355715,"stop":1711371356750,"duration":1035},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"2024-03-25 12:47:18.603073.   Click 'Language and Country' menu section.","time":{"start":1711371356752,"stop":1711371358059,"duration":1307},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"test_language","value":"'cn'"}],"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"2024-03-25 12:47:18.603219   Set language","time":{"start":1711371358059,"stop":1711371358838,"duration":779},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"cur_language","value":"'cn'"}],"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":false}],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"1eaa2525be46ec42bc8de594a0a1de69\")>"},{"name":"host","value":"'https://capital.com'"},{"name":"end_point","value":"''"},{"name":"cur_language","value":"'cn'"},{"name":"cur_country","value":"'ae'"},{"name":"cur_role","value":"'Auth'"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"}],"stepsCount":3,"attachmentsCount":0,"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"2024-03-25 12:47:18.600613   Start test for ViewDetailedChartButton of the trading instrument page","time":{"start":1711371358842,"stop":1711371366398,"duration":7556},"status":"failed","statusMessage":"AssertionError: Close button on 'Sign up' form is not clickable\n","statusTrace":"  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/Elements/PageInstrumentViewDetailedChartButton.py\", line 19, in full_test_with_tpi\n    self.element_click()\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/Elements/PageInstrumentViewDetailedChartButton.py\", line 74, in element_click\n    if page_.close_signup_form():\n       ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/Signup_login/signup_login.py\", line 307, in close_signup_form\n    Common().assert_true_false(False, \"Close button on 'Sign up' form is not clickable\")\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/common.py\", line 172, in assert_true_false\n    assert False, msg\n","steps":[{"name":"2024-03-25 12:47:18.455171   Check that form [Sign up] opened","time":{"start":1711371360734,"stop":1711371362268,"duration":1534},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"timeout","value":"1"}],"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"Click button [View Detailed Chart] on the page content","time":{"start":1711371362268,"stop":1711371366398,"duration":4130},"status":"failed","statusMessage":"AssertionError: Close button on 'Sign up' form is not clickable\n","statusTrace":"  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/Elements/PageInstrumentViewDetailedChartButton.py\", line 74, in element_click\n    if page_.close_signup_form():\n       ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/Signup_login/signup_login.py\", line 307, in close_signup_form\n    Common().assert_true_false(False, \"Close button on 'Sign up' form is not clickable\")\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/common.py\", line 172, in assert_true_false\n    assert False, msg\n","steps":[{"name":"Close form [Sign up]","time":{"start":1711371363342,"stop":1711371366398,"duration":3056},"status":"failed","statusMessage":"AssertionError: Close button on 'Sign up' form is not clickable\n","statusTrace":"  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/Signup_login/signup_login.py\", line 307, in close_signup_form\n    Common().assert_true_false(False, \"Close button on 'Sign up' form is not clickable\")\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/common.py\", line 172, in assert_true_false\n    assert False, msg\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":true}],"attachments":[],"parameters":[],"stepsCount":1,"attachmentsCount":0,"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":false}],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"1eaa2525be46ec42bc8de594a0a1de69\")>"},{"name":"cur_language","value":"'cn'"},{"name":"cur_country","value":"'ae'"},{"name":"cur_role","value":"'Auth'"},{"name":"cur_item_link","value":"'https://capital.com/cn/cotton-no-2-spot-commodity'"}],"stepsCount":3,"attachmentsCount":0,"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":false}],"attachments":[],"parameters":[{"name":"worker_id","value":"'master'"},{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"1eaa2525be46ec42bc8de594a0a1de69\")>"},{"name":"cur_language","value":"'cn'"},{"name":"cur_country","value":"'ae'"},{"name":"cur_role","value":"'Auth'"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"},{"name":"cur_item_link","value":"'https://capital.com/cn/cotton-no-2-spot-commodity'"}],"stepsCount":9,"attachmentsCount":0,"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":false}],"attachments":[{"uid":"94053f9879fbe6f9","name":"Screenshot","source":"94053f9879fbe6f9.png","type":"image/png","size":130425},{"uid":"d71a9fd5585f0b42","name":"log","source":"d71a9fd5585f0b42.txt","type":"text/plain","size":5399},{"uid":"f29b821b75ccddfd","name":"stdout","source":"f29b821b75ccddfd.txt","type":"text/plain","size":3244}],"parameters":[],"stepsCount":10,"attachmentsCount":3,"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":true},"afterStages":[{"name":"d::0","time":{"start":1711371589279,"stop":1711371589429,"duration":150},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false}],"labels":[{"name":"epic","value":"US_01.05 | Markets > Menu item [Commodities]"},{"name":"feature","value":"Language: cn"},{"name":"story","value":"Country: ae / Role: Auth"},{"name":"tag","value":"test_002"},{"name":"tag","value":"us_01_05"},{"name":"parentSuite","value":"tests.US_01_Markets.US_01-05_Commodities"},{"name":"suite","value":"US_01-05-01_Commodities_test"},{"name":"subSuite","value":"TestCommodities"},{"name":"host","value":"fv-az525-520"},{"name":"thread","value":"34284-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.US_01_Markets.US_01-05_Commodities.US_01-05-01_Commodities_test"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"cur_country","value":"'ae'"},{"name":"cur_item_link","value":"'https://capital.com/cn/cotton-no-2-spot-commodity'"},{"name":"cur_language","value":"'cn'"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"},{"name":"cur_role","value":"'Auth'"},{"name":"d","value":"'Chrome'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["test_002","us_01_05"]},"source":"cca3a0c53b4bbc65.json","parameterValues":["'ae'","'https://capital.com/cn/cotton-no-2-spot-commodity'","'cn'","'test001.miketar+1@gmail.com'","'Qwer1234-!@#$'","'Auth'","'Chrome'"]}