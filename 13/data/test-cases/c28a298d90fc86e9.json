{"uid":"c28a298d90fc86e9","name":"TC_01.05.00_001 | Testing button [Start Trading Now] on Block 'Trade Commodities CFDs'. Bid:01.05.00_001-hu.ae.NoReg","fullName":"tests.US_01_Markets.US_01-05_Commodities.US_01-05-00_Commodities_test.TestCommodities#test_001_block_trade_commodities_cfds_start_trading_now_button","historyId":"c307e9084a6329c2b7d0ccc767688e30","time":{"start":1709716103794,"stop":1709716121956,"duration":18162},"description":"\n        Check: Button [Start Trading Now]\n        Language: All. License: All,except FCA.\n        ","descriptionHtml":"<pre><code>    Check: Button [Start Trading Now]\n    Language: All. License: All,except FCA.\n</code></pre>\n","status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"https://capital.com/trading/signup\" class=\"button-main rounded-lg js_signup js-analyticsVisible\">...</a> is not clickable at point (632, 322). Other element would receive the click: <div class=\"cc-nav__dropdown cc-nav__dropdown--1col \">...</div>\n  (Session info: chrome=122.0.6261.69)\nStacktrace:\n#0 0x55a3ec88ce93 <unknown>\n#1 0x55a3ec584ce6 <unknown>\n#2 0x55a3ec5d6a73 <unknown>\n#3 0x55a3ec5d498e <unknown>\n#4 0x55a3ec5d2367 <unknown>\n#5 0x55a3ec5d1732 <unknown>\n#6 0x55a3ec5c4d27 <unknown>\n#7 0x55a3ec5f1eb2 <unknown>\n#8 0x55a3ec5c46b8 <unknown>\n#9 0x55a3ec5f207e <unknown>\n#10 0x55a3ec610899 <unknown>\n#11 0x55a3ec5f1c53 <unknown>\n#12 0x55a3ec5c2db3 <unknown>\n#13 0x55a3ec5c377e <unknown>\n#14 0x55a3ec8527cb <unknown>\n#15 0x55a3ec8567e5 <unknown>\n#16 0x55a3ec8400e1 <unknown>\n#17 0x55a3ec857372 <unknown>\n#18 0x55a3ec8241bf <unknown>\n#19 0x55a3ec87b488 <unknown>\n#20 0x55a3ec87b683 <unknown>\n#21 0x55a3ec88c044 <unknown>\n#22 0x7fb2f4a94ac3 <unknown>","statusTrace":"self = <pages.Elements.TradeCFDBlockStartTradingNowButton.TradeCFDBlockStartTradingNowButton object at 0x7fefc958f230>\n\n    @allure.step(\"Click button [Start Trading Now] on Block Trading Instruments\")\n    def element_click(self):\n        print(f\"\\n{datetime.now()}   2. Act_v0\")\n        print(f\"{datetime.now()}   Start Click button [Start Trading Now] =>\")\n    \n        button_list = self.driver.find_elements(*TradingInstrumentsBlockLocators.BUTTON_START_TRADING_NOW)\n        print(f\"{datetime.now()}   BUTTON_START_TRADING_NOW is clickable? =>\")\n        time_out = 3\n        if not self.element_is_clickable(button_list[0], time_out):\n            print(f\"{datetime.now()}   => BUTTON_START_TRADING_NOW is not clickable after {time_out} sec. Stop TC>\")\n            pytest.fail(f\"BUTTON_START_TRADING_NOW is not clickable after {time_out} sec.\")\n    \n        print(f\"{datetime.now()}   BUTTON_START_TRADING_NOW click =>\")\n        try:\n>           button_list[0].click()\n\npages/Elements/TradeCFDBlockStartTradingNowButton.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fefcae0e7e0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x55a3ec87b683 \\\\u003Cunknown>\\\\n#21 0x55a3ec88c044 \\\\u003Cunknown>\\\\n#22 0x7fb2f4a94ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"https://capital.com/trading/signup\" class=\"button-main rounded-lg js_signup js-analyticsVisible\">...</a> is not clickable at point (632, 322). Other element would receive the click: <div class=\"cc-nav__dropdown cc-nav__dropdown--1col \">...</div>\nE         (Session info: chrome=122.0.6261.69)\nE       Stacktrace:\nE       #0 0x55a3ec88ce93 <unknown>\nE       #1 0x55a3ec584ce6 <unknown>\nE       #2 0x55a3ec5d6a73 <unknown>\nE       #3 0x55a3ec5d498e <unknown>\nE       #4 0x55a3ec5d2367 <unknown>\nE       #5 0x55a3ec5d1732 <unknown>\nE       #6 0x55a3ec5c4d27 <unknown>\nE       #7 0x55a3ec5f1eb2 <unknown>\nE       #8 0x55a3ec5c46b8 <unknown>\nE       #9 0x55a3ec5f207e <unknown>\nE       #10 0x55a3ec610899 <unknown>\nE       #11 0x55a3ec5f1c53 <unknown>\nE       #12 0x55a3ec5c2db3 <unknown>\nE       #13 0x55a3ec5c377e <unknown>\nE       #14 0x55a3ec8527cb <unknown>\nE       #15 0x55a3ec8567e5 <unknown>\nE       #16 0x55a3ec8400e1 <unknown>\nE       #17 0x55a3ec857372 <unknown>\nE       #18 0x55a3ec8241bf <unknown>\nE       #19 0x55a3ec87b488 <unknown>\nE       #20 0x55a3ec87b683 <unknown>\nE       #21 0x55a3ec88c044 <unknown>\nE       #22 0x7fb2f4a94ac3 <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <US_01-05-00_Commodities_test.TestCommodities object at 0x7fefc970fa70>\nworker_id = 'master'\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"6e6dddbd2e2e71140b4beb41bbeeeef4\")>\ncur_language = 'hu', cur_country = 'ae', cur_role = 'NoReg'\ncur_login = 'test001.miketar+1@gmail.com', cur_password = 'Qwer1234-!@#$'\n\n    @allure.step(\"Start test of button [Start Trading Now] on Block 'Trade Commodities CFDs'\")\n    @pytest.mark.test_001\n    def test_001_block_trade_commodities_cfds_start_trading_now_button(\n            self, worker_id, d, cur_language, cur_country, cur_role, cur_login, cur_password):\n        \"\"\"\n        Check: Button [Start Trading Now]\n        Language: All. License: All,except FCA.\n        \"\"\"\n        bid = build_dynamic_arg_v4(\n            d, worker_id, cur_language, cur_country, cur_role,\n            \"01.05\", \"Markets > Menu item [Commodities]\",\n            \".00_001\", \"Testing button [Start Trading Now] on Block 'Trade Commodities CFDs'\")\n    \n        Common().skip_if_eng_lang_and_fca_license(cur_language, cur_country)\n        Common().check_country_in_list_and_skip_if_present(cur_country, [\"gb\"])\n    \n        page_conditions = Conditions(d, \"\")\n        link = page_conditions.preconditions(\n            d, CapitalComPageSrc.URL, \"\", cur_language, cur_country, cur_role, cur_login, cur_password)\n    \n        page_menu = MenuSection(d, link)\n        page_menu.move_focus_to_markets_menu(d, cur_language, cur_country)\n        cur_page_url = page_menu.sub_menu_commodities_move_focus_click(d, cur_language)\n    \n        test_element = TradeCFDBlockStartTradingNowButton(d, cur_page_url, bid)\n>       test_element.full_test_with_tpi(d, cur_language, cur_country, cur_role, cur_page_url)\n\ntests/US_01_Markets/US_01-05_Commodities/US_01-05-00_Commodities_test.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/Elements/TradeCFDBlockStartTradingNowButton.py:22: in full_test_with_tpi\n    self.element_click()\npages/Elements/TradeCFDBlockStartTradingNowButton.py:94: in element_click\n    button_list[0].click()\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fefcae0e7e0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x55a3ec87b683 \\\\u003Cunknown>\\\\n#21 0x55a3ec88c044 \\\\u003Cunknown>\\\\n#22 0x7fb2f4a94ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"https://capital.com/trading/signup\" class=\"button-main rounded-lg js_signup js-analyticsVisible\">...</a> is not clickable at point (632, 322). Other element would receive the click: <div class=\"cc-nav__dropdown cc-nav__dropdown--1col \">...</div>\nE         (Session info: chrome=122.0.6261.69)\nE       Stacktrace:\nE       #0 0x55a3ec88ce93 <unknown>\nE       #1 0x55a3ec584ce6 <unknown>\nE       #2 0x55a3ec5d6a73 <unknown>\nE       #3 0x55a3ec5d498e <unknown>\nE       #4 0x55a3ec5d2367 <unknown>\nE       #5 0x55a3ec5d1732 <unknown>\nE       #6 0x55a3ec5c4d27 <unknown>\nE       #7 0x55a3ec5f1eb2 <unknown>\nE       #8 0x55a3ec5c46b8 <unknown>\nE       #9 0x55a3ec5f207e <unknown>\nE       #10 0x55a3ec610899 <unknown>\nE       #11 0x55a3ec5f1c53 <unknown>\nE       #12 0x55a3ec5c2db3 <unknown>\nE       #13 0x55a3ec5c377e <unknown>\nE       #14 0x55a3ec8527cb <unknown>\nE       #15 0x55a3ec8567e5 <unknown>\nE       #16 0x55a3ec8400e1 <unknown>\nE       #17 0x55a3ec857372 <unknown>\nE       #18 0x55a3ec8241bf <unknown>\nE       #19 0x55a3ec87b488 <unknown>\nE       #20 0x55a3ec87b683 <unknown>\nE       #21 0x55a3ec88c044 <unknown>\nE       #22 0x7fb2f4a94ac3 <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"d","time":{"start":1709715904895,"stop":1709715905272,"duration":377},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_language","time":{"start":1709715905273,"stop":1709715905273,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_password","time":{"start":1709715905273,"stop":1709715905273,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"worker_id","time":{"start":1709715905273,"stop":1709715905273,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_login","time":{"start":1709715905273,"stop":1709715905273,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_role","time":{"start":1709716072966,"stop":1709716072966,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_country","time":{"start":1709716103794,"stop":1709716103794,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"\n        Check: Button [Start Trading Now]\n        Language: All. License: All,except FCA.\n        ","status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"https://capital.com/trading/signup\" class=\"button-main rounded-lg js_signup js-analyticsVisible\">...</a> is not clickable at point (632, 322). Other element would receive the click: <div class=\"cc-nav__dropdown cc-nav__dropdown--1col \">...</div>\n  (Session info: chrome=122.0.6261.69)\nStacktrace:\n#0 0x55a3ec88ce93 <unknown>\n#1 0x55a3ec584ce6 <unknown>\n#2 0x55a3ec5d6a73 <unknown>\n#3 0x55a3ec5d498e <unknown>\n#4 0x55a3ec5d2367 <unknown>\n#5 0x55a3ec5d1732 <unknown>\n#6 0x55a3ec5c4d27 <unknown>\n#7 0x55a3ec5f1eb2 <unknown>\n#8 0x55a3ec5c46b8 <unknown>\n#9 0x55a3ec5f207e <unknown>\n#10 0x55a3ec610899 <unknown>\n#11 0x55a3ec5f1c53 <unknown>\n#12 0x55a3ec5c2db3 <unknown>\n#13 0x55a3ec5c377e <unknown>\n#14 0x55a3ec8527cb <unknown>\n#15 0x55a3ec8567e5 <unknown>\n#16 0x55a3ec8400e1 <unknown>\n#17 0x55a3ec857372 <unknown>\n#18 0x55a3ec8241bf <unknown>\n#19 0x55a3ec87b488 <unknown>\n#20 0x55a3ec87b683 <unknown>\n#21 0x55a3ec88c044 <unknown>\n#22 0x7fb2f4a94ac3 <unknown>","statusTrace":"self = <pages.Elements.TradeCFDBlockStartTradingNowButton.TradeCFDBlockStartTradingNowButton object at 0x7fefc958f230>\n\n    @allure.step(\"Click button [Start Trading Now] on Block Trading Instruments\")\n    def element_click(self):\n        print(f\"\\n{datetime.now()}   2. Act_v0\")\n        print(f\"{datetime.now()}   Start Click button [Start Trading Now] =>\")\n    \n        button_list = self.driver.find_elements(*TradingInstrumentsBlockLocators.BUTTON_START_TRADING_NOW)\n        print(f\"{datetime.now()}   BUTTON_START_TRADING_NOW is clickable? =>\")\n        time_out = 3\n        if not self.element_is_clickable(button_list[0], time_out):\n            print(f\"{datetime.now()}   => BUTTON_START_TRADING_NOW is not clickable after {time_out} sec. Stop TC>\")\n            pytest.fail(f\"BUTTON_START_TRADING_NOW is not clickable after {time_out} sec.\")\n    \n        print(f\"{datetime.now()}   BUTTON_START_TRADING_NOW click =>\")\n        try:\n>           button_list[0].click()\n\npages/Elements/TradeCFDBlockStartTradingNowButton.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fefcae0e7e0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x55a3ec87b683 \\\\u003Cunknown>\\\\n#21 0x55a3ec88c044 \\\\u003Cunknown>\\\\n#22 0x7fb2f4a94ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"https://capital.com/trading/signup\" class=\"button-main rounded-lg js_signup js-analyticsVisible\">...</a> is not clickable at point (632, 322). Other element would receive the click: <div class=\"cc-nav__dropdown cc-nav__dropdown--1col \">...</div>\nE         (Session info: chrome=122.0.6261.69)\nE       Stacktrace:\nE       #0 0x55a3ec88ce93 <unknown>\nE       #1 0x55a3ec584ce6 <unknown>\nE       #2 0x55a3ec5d6a73 <unknown>\nE       #3 0x55a3ec5d498e <unknown>\nE       #4 0x55a3ec5d2367 <unknown>\nE       #5 0x55a3ec5d1732 <unknown>\nE       #6 0x55a3ec5c4d27 <unknown>\nE       #7 0x55a3ec5f1eb2 <unknown>\nE       #8 0x55a3ec5c46b8 <unknown>\nE       #9 0x55a3ec5f207e <unknown>\nE       #10 0x55a3ec610899 <unknown>\nE       #11 0x55a3ec5f1c53 <unknown>\nE       #12 0x55a3ec5c2db3 <unknown>\nE       #13 0x55a3ec5c377e <unknown>\nE       #14 0x55a3ec8527cb <unknown>\nE       #15 0x55a3ec8567e5 <unknown>\nE       #16 0x55a3ec8400e1 <unknown>\nE       #17 0x55a3ec857372 <unknown>\nE       #18 0x55a3ec8241bf <unknown>\nE       #19 0x55a3ec87b488 <unknown>\nE       #20 0x55a3ec87b683 <unknown>\nE       #21 0x55a3ec88c044 <unknown>\nE       #22 0x7fb2f4a94ac3 <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <US_01-05-00_Commodities_test.TestCommodities object at 0x7fefc970fa70>\nworker_id = 'master'\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"6e6dddbd2e2e71140b4beb41bbeeeef4\")>\ncur_language = 'hu', cur_country = 'ae', cur_role = 'NoReg'\ncur_login = 'test001.miketar+1@gmail.com', cur_password = 'Qwer1234-!@#$'\n\n    @allure.step(\"Start test of button [Start Trading Now] on Block 'Trade Commodities CFDs'\")\n    @pytest.mark.test_001\n    def test_001_block_trade_commodities_cfds_start_trading_now_button(\n            self, worker_id, d, cur_language, cur_country, cur_role, cur_login, cur_password):\n        \"\"\"\n        Check: Button [Start Trading Now]\n        Language: All. License: All,except FCA.\n        \"\"\"\n        bid = build_dynamic_arg_v4(\n            d, worker_id, cur_language, cur_country, cur_role,\n            \"01.05\", \"Markets > Menu item [Commodities]\",\n            \".00_001\", \"Testing button [Start Trading Now] on Block 'Trade Commodities CFDs'\")\n    \n        Common().skip_if_eng_lang_and_fca_license(cur_language, cur_country)\n        Common().check_country_in_list_and_skip_if_present(cur_country, [\"gb\"])\n    \n        page_conditions = Conditions(d, \"\")\n        link = page_conditions.preconditions(\n            d, CapitalComPageSrc.URL, \"\", cur_language, cur_country, cur_role, cur_login, cur_password)\n    \n        page_menu = MenuSection(d, link)\n        page_menu.move_focus_to_markets_menu(d, cur_language, cur_country)\n        cur_page_url = page_menu.sub_menu_commodities_move_focus_click(d, cur_language)\n    \n        test_element = TradeCFDBlockStartTradingNowButton(d, cur_page_url, bid)\n>       test_element.full_test_with_tpi(d, cur_language, cur_country, cur_role, cur_page_url)\n\ntests/US_01_Markets/US_01-05_Commodities/US_01-05-00_Commodities_test.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/Elements/TradeCFDBlockStartTradingNowButton.py:22: in full_test_with_tpi\n    self.element_click()\npages/Elements/TradeCFDBlockStartTradingNowButton.py:94: in element_click\n    button_list[0].click()\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fefcae0e7e0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x55a3ec87b683 \\\\u003Cunknown>\\\\n#21 0x55a3ec88c044 \\\\u003Cunknown>\\\\n#22 0x7fb2f4a94ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"https://capital.com/trading/signup\" class=\"button-main rounded-lg js_signup js-analyticsVisible\">...</a> is not clickable at point (632, 322). Other element would receive the click: <div class=\"cc-nav__dropdown cc-nav__dropdown--1col \">...</div>\nE         (Session info: chrome=122.0.6261.69)\nE       Stacktrace:\nE       #0 0x55a3ec88ce93 <unknown>\nE       #1 0x55a3ec584ce6 <unknown>\nE       #2 0x55a3ec5d6a73 <unknown>\nE       #3 0x55a3ec5d498e <unknown>\nE       #4 0x55a3ec5d2367 <unknown>\nE       #5 0x55a3ec5d1732 <unknown>\nE       #6 0x55a3ec5c4d27 <unknown>\nE       #7 0x55a3ec5f1eb2 <unknown>\nE       #8 0x55a3ec5c46b8 <unknown>\nE       #9 0x55a3ec5f207e <unknown>\nE       #10 0x55a3ec610899 <unknown>\nE       #11 0x55a3ec5f1c53 <unknown>\nE       #12 0x55a3ec5c2db3 <unknown>\nE       #13 0x55a3ec5c377e <unknown>\nE       #14 0x55a3ec8527cb <unknown>\nE       #15 0x55a3ec8567e5 <unknown>\nE       #16 0x55a3ec8400e1 <unknown>\nE       #17 0x55a3ec857372 <unknown>\nE       #18 0x55a3ec8241bf <unknown>\nE       #19 0x55a3ec87b488 <unknown>\nE       #20 0x55a3ec87b683 <unknown>\nE       #21 0x55a3ec88c044 <unknown>\nE       #22 0x7fb2f4a94ac3 <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","steps":[{"name":"Start test of button [Start Trading Now] on Block 'Trade Commodities CFDs'","time":{"start":1709716103794,"stop":1709716121955,"duration":18161},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"https://capital.com/trading/signup\" class=\"button-main rounded-lg js_signup js-analyticsVisible\">...</a> is not clickable at point (632, 322). Other element would receive the click: <div class=\"cc-nav__dropdown cc-nav__dropdown--1col \">...</div>\n  (Session info: chrome=122.0.6261.69)\nStacktrace:\n#0 0x55a3ec88ce93 <unknown>\n#1 0x55a3ec584ce6 <unknown>\n#2 0x55a3ec5d6a73 <unknown>\n#3 0x55a3ec5d498e <unknown>\n#4 0x55a3ec5d2367 <unknown>\n#5 0x55a3ec5d1732 <unknown>\n#6 0x55a3ec5c4d27 <unknown>\n#7 0x55a3ec5f1eb2 <unknown>\n#8 0x55a3ec5c46b8 <unknown>\n#9 0x55a3ec5f207e <unknown>\n#10 0x55a3ec610899 <unknown>\n#11 0x55a3ec5f1c53 <unknown>\n#12 0x55a3ec5c2db3 <unknown>\n#13 0x55a3ec5c377e <unknown>\n#14 0x55a3ec8527cb <unknown>\n#15 0x55a3ec8567e5 <unknown>\n#16 0x55a3ec8400e1 <unknown>\n#17 0x55a3ec857372 <unknown>\n#18 0x55a3ec8241bf <unknown>\n#19 0x55a3ec87b488 <unknown>\n#20 0x55a3ec87b683 <unknown>\n#21 0x55a3ec88c044 <unknown>\n#22 0x7fb2f4a94ac3 <unknown>\n\n","statusTrace":"  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/tests/US_01_Markets/US_01-05_Commodities/US_01-05-00_Commodities_test.py\", line 44, in test_001_block_trade_commodities_cfds_start_trading_now_button\n    test_element.full_test_with_tpi(d, cur_language, cur_country, cur_role, cur_page_url)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/Elements/TradeCFDBlockStartTradingNowButton.py\", line 22, in full_test_with_tpi\n    self.element_click()\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/Elements/TradeCFDBlockStartTradingNowButton.py\", line 94, in element_click\n    button_list[0].click()\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py\", line 94, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py\", line 395, in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 347, in execute\n    self.error_handler.check_response(response)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[{"name":"2024-03-06 09:05:04.877096   Start Building dynamic arguments for allure report generation","time":{"start":1709716103794,"stop":1709716103796,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"6e6dddbd2e2e71140b4beb41bbeeeef4\")>"},{"name":"worker_id","value":"'master'"},{"name":"cur_language","value":"'hu'"},{"name":"cur_country","value":"'ae'"},{"name":"cur_role","value":"'NoReg'"},{"name":"us","value":"'01.05'"},{"name":"desc_us","value":"'Markets > Menu item [Commodities]'"},{"name":"num_tc","value":"'.00_001'"},{"name":"desc_tc","value":"'Testing button [Start Trading Now] on Block 'Trade Commodities CFDs''"},{"name":"manual","value":"False"},{"name":"new_layout","value":"False"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"2024-03-06 09:05:04.881703   Set preconditions","time":{"start":1709716103796,"stop":1709716111032,"duration":7236},"status":"passed","steps":[{"name":"2024-03-06 09:05:04.880388   Start Checking Captcha","time":{"start":1709716104004,"stop":1709716105047,"duration":1043},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"2024-03-06 09:05:04.880388   Start Checking Captcha","time":{"start":1709716105048,"stop":1709716106087,"duration":1039},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"2024-03-06 09:05:04.880388   Start Checking Captcha","time":{"start":1709716106087,"stop":1709716107127,"duration":1040},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"2024-03-06 09:05:04.878916.   Click 'Language and Country' menu section.","time":{"start":1709716107127,"stop":1709716108425,"duration":1298},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"test_language","value":"'hu'"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"2024-03-06 09:05:04.879079   Start Set country","time":{"start":1709716108426,"stop":1709716111032,"duration":2606},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"cur_country","value":"'ae'"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"6e6dddbd2e2e71140b4beb41bbeeeef4\")>"},{"name":"host","value":"'https://capital.com'"},{"name":"end_point","value":"''"},{"name":"cur_language","value":"'hu'"},{"name":"cur_country","value":"'ae'"},{"name":"cur_role","value":"'NoReg'"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"}],"shouldDisplayMessage":false,"stepsCount":5,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"2024-03-06 09:05:04.878954.   Focus moved to 'Markets' menu","time":{"start":1709716111032,"stop":1709716112822,"duration":1790},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"6e6dddbd2e2e71140b4beb41bbeeeef4\")>"},{"name":"test_language","value":"'hu'"},{"name":"test_country","value":"'ae'"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"2024-03-06 09:05:04.879379. Move focus to 'Commodities' submenu and click.","time":{"start":1709716112822,"stop":1709716113599,"duration":777},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"6e6dddbd2e2e71140b4beb41bbeeeef4\")>"},{"name":"test_language","value":"'hu'"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"2024-03-06 09:05:04.881985   Start Full test for \"Start trading now\" button of Block \"Trading Instruments\"","time":{"start":1709716113599,"stop":1709716121954,"duration":8355},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"https://capital.com/trading/signup\" class=\"button-main rounded-lg js_signup js-analyticsVisible\">...</a> is not clickable at point (632, 322). Other element would receive the click: <div class=\"cc-nav__dropdown cc-nav__dropdown--1col \">...</div>\n  (Session info: chrome=122.0.6261.69)\nStacktrace:\n#0 0x55a3ec88ce93 <unknown>\n#1 0x55a3ec584ce6 <unknown>\n#2 0x55a3ec5d6a73 <unknown>\n#3 0x55a3ec5d498e <unknown>\n#4 0x55a3ec5d2367 <unknown>\n#5 0x55a3ec5d1732 <unknown>\n#6 0x55a3ec5c4d27 <unknown>\n#7 0x55a3ec5f1eb2 <unknown>\n#8 0x55a3ec5c46b8 <unknown>\n#9 0x55a3ec5f207e <unknown>\n#10 0x55a3ec610899 <unknown>\n#11 0x55a3ec5f1c53 <unknown>\n#12 0x55a3ec5c2db3 <unknown>\n#13 0x55a3ec5c377e <unknown>\n#14 0x55a3ec8527cb <unknown>\n#15 0x55a3ec8567e5 <unknown>\n#16 0x55a3ec8400e1 <unknown>\n#17 0x55a3ec857372 <unknown>\n#18 0x55a3ec8241bf <unknown>\n#19 0x55a3ec87b488 <unknown>\n#20 0x55a3ec87b683 <unknown>\n#21 0x55a3ec88c044 <unknown>\n#22 0x7fb2f4a94ac3 <unknown>\n\n","statusTrace":"  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/Elements/TradeCFDBlockStartTradingNowButton.py\", line 22, in full_test_with_tpi\n    self.element_click()\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/Elements/TradeCFDBlockStartTradingNowButton.py\", line 94, in element_click\n    button_list[0].click()\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py\", line 94, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py\", line 395, in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 347, in execute\n    self.error_handler.check_response(response)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[{"name":"Click button [Start Trading Now] on Block Trading Instruments","time":{"start":1709716113639,"stop":1709716121953,"duration":8314},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"https://capital.com/trading/signup\" class=\"button-main rounded-lg js_signup js-analyticsVisible\">...</a> is not clickable at point (632, 322). Other element would receive the click: <div class=\"cc-nav__dropdown cc-nav__dropdown--1col \">...</div>\n  (Session info: chrome=122.0.6261.69)\nStacktrace:\n#0 0x55a3ec88ce93 <unknown>\n#1 0x55a3ec584ce6 <unknown>\n#2 0x55a3ec5d6a73 <unknown>\n#3 0x55a3ec5d498e <unknown>\n#4 0x55a3ec5d2367 <unknown>\n#5 0x55a3ec5d1732 <unknown>\n#6 0x55a3ec5c4d27 <unknown>\n#7 0x55a3ec5f1eb2 <unknown>\n#8 0x55a3ec5c46b8 <unknown>\n#9 0x55a3ec5f207e <unknown>\n#10 0x55a3ec610899 <unknown>\n#11 0x55a3ec5f1c53 <unknown>\n#12 0x55a3ec5c2db3 <unknown>\n#13 0x55a3ec5c377e <unknown>\n#14 0x55a3ec8527cb <unknown>\n#15 0x55a3ec8567e5 <unknown>\n#16 0x55a3ec8400e1 <unknown>\n#17 0x55a3ec857372 <unknown>\n#18 0x55a3ec8241bf <unknown>\n#19 0x55a3ec87b488 <unknown>\n#20 0x55a3ec87b683 <unknown>\n#21 0x55a3ec88c044 <unknown>\n#22 0x7fb2f4a94ac3 <unknown>\n\n","statusTrace":"  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/Elements/TradeCFDBlockStartTradingNowButton.py\", line 94, in element_click\n    button_list[0].click()\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py\", line 94, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py\", line 395, in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 347, in execute\n    self.error_handler.check_response(response)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[{"name":"Close form [Sign up]","time":{"start":1709716114726,"stop":1709716117785,"duration":3059},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Close form [Login]","time":{"start":1709716117785,"stop":1709716120878,"duration":3093},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Close page [Sign up]","time":{"start":1709716120878,"stop":1709716120881,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Close page [Login]","time":{"start":1709716120881,"stop":1709716120884,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"6e6dddbd2e2e71140b4beb41bbeeeef4\")>"},{"name":"cur_language","value":"'hu'"},{"name":"cur_country","value":"'ae'"},{"name":"cur_role","value":"'NoReg'"},{"name":"cur_item_link","value":"'https://capital.com/hu/elo-arupiaci-arak?country=ae'"}],"shouldDisplayMessage":false,"stepsCount":5,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"worker_id","value":"'master'"},{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"6e6dddbd2e2e71140b4beb41bbeeeef4\")>"},{"name":"cur_language","value":"'hu'"},{"name":"cur_country","value":"'ae'"},{"name":"cur_role","value":"'NoReg'"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"}],"shouldDisplayMessage":false,"stepsCount":15,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"b4ebfbc0eb638981","name":"Screenshot","source":"b4ebfbc0eb638981.png","type":"image/png","size":75564},{"uid":"ffae91b773bcddec","name":"log","source":"ffae91b773bcddec.txt","type":"text/plain","size":7718},{"uid":"70e635a65d081d81","name":"stdout","source":"70e635a65d081d81.txt","type":"text/plain","size":2896}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":16,"attachmentsCount":3,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"d::0","time":{"start":1709716249619,"stop":1709716249739,"duration":120},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"epic","value":"US_01.05 | Markets > Menu item [Commodities]"},{"name":"feature","value":"Language: hu"},{"name":"story","value":"Country: ae / Role: NoReg"},{"name":"tag","value":"test_001"},{"name":"tag","value":"us_01_05"},{"name":"parentSuite","value":"tests.US_01_Markets.US_01-05_Commodities"},{"name":"suite","value":"US_01-05-00_Commodities_test"},{"name":"subSuite","value":"TestCommodities"},{"name":"host","value":"fv-az1535-375"},{"name":"thread","value":"3430-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.US_01_Markets.US_01-05_Commodities.US_01-05-00_Commodities_test"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"cur_country","value":"'ae'"},{"name":"cur_language","value":"'hu'"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"},{"name":"cur_role","value":"'NoReg'"},{"name":"d","value":"'Chrome'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["us_01_05","test_001"]},"source":"c28a298d90fc86e9.json","parameterValues":["'ae'","'hu'","'test001.miketar+1@gmail.com'","'Qwer1234-!@#$'","'NoReg'","'Chrome'"]}