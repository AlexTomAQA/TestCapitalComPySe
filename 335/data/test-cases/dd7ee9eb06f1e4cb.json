{"uid":"dd7ee9eb06f1e4cb","name":"TC_55!322b (Lang: ar) | Bid:55!322b-ar.ae.NoReg","fullName":"tests.US_55_ReTestsManual.tassobaccato.US_55-tassobaccato_ReTestsManual_test.TestManualDetectedBugs#test_322b","historyId":"9dd05101aca5e7985a618c5cb8d260dc","time":{"start":1740877129636,"stop":1740877148247,"duration":18611},"description":"\n        Check: Clicking [numeric values] in the Buy column in Menu tittle Markets does not open the\n                Sign-Up /Login form or page of the corresponding trading instrument on the trading platform using\n                English or Arabic language.\n        Language: EN, AR\n        License: SCA\n        Author: Kasila\n        ","descriptionHtml":"<pre><code>    Check: Clicking [numeric values] in the Buy column in Menu tittle Markets does not open the\n            Sign-Up /Login form or page of the corresponding trading instrument on the trading platform using\n            English or Arabic language.\n    Language: EN, AR\n    License: SCA\n    Author: Kasila\n</code></pre>\n","status":"failed","statusMessage":"Failed: Bug # 55!322 \nExpected result: Sign Up form is opened\nActual result: Sign Up form is not opened","statusTrace":"self = <pages.BugsManual.bug_322.AssertTPI object at 0x7f0f1846be30>\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"39a2c4a0da9837b16a4457ff6e403d42\")>\n\n    def assert_signup(self, d):\n        print(f\"\\n{datetime.now()}   3. Assert\")\n    \n        try:\n>           signup_form = self.driver.find_element(By.XPATH, '//strong/span[contains(text(), \"Sign up\")]')\n\npages/BugsManual/bug_322.py:107: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:766: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:380: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f0f192fa000>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...\\\\n#17 0x55920e979fc6 \\\\u003Cunknown>\\\\n#18 0x7f11f289caa4 \\\\u003Cunknown>\\\\n#19 0x7f11f2929c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//strong/span[contains(text(), \"Sign up\")]\"}\nE         (Session info: chrome=133.0.6943.126); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE       Stacktrace:\nE       #0 0x55920e97b14a <unknown>\nE       #1 0x55920e418b80 <unknown>\nE       #2 0x55920e46a0e9 <unknown>\nE       #3 0x55920e46a271 <unknown>\nE       #4 0x55920e4b8de4 <unknown>\nE       #5 0x55920e48fefd <unknown>\nE       #6 0x55920e4b614a <unknown>\nE       #7 0x55920e48fca3 <unknown>\nE       #8 0x55920e45bf08 <unknown>\nE       #9 0x55920e45d071 <unknown>\nE       #10 0x55920e944b5b <unknown>\nE       #11 0x55920e948ae2 <unknown>\nE       #12 0x55920e930967 <unknown>\nE       #13 0x55920e9496d4 <unknown>\nE       #14 0x55920e914c7f <unknown>\nE       #15 0x55920e969cd8 <unknown>\nE       #16 0x55920e969ea9 <unknown>\nE       #17 0x55920e979fc6 <unknown>\nE       #18 0x7f11f289caa4 <unknown>\nE       #19 0x7f11f2929c3c <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: NoSuchElementException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <US_55-tassobaccato_ReTestsManual_test.TestManualDetectedBugs object at 0x7f0f19286960>\nworker_id = 'master'\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"39a2c4a0da9837b16a4457ff6e403d42\")>\ncur_language = 'ar', cur_country = 'ae', cur_role = 'NoReg'\ncur_login = 'test001.miketar+1@gmail.com', cur_password = 'Qwer1234-!@#$'\ntitle_instrument = ''\n\n    @allure.step(\n        'Start retest manual AT_55!322b that the Sign Up/Login/page of the corresponding trading instrument on '\n        'the trading platform is opened after clicking [numeric values] in the Buy column.')\n    @pytest.mark.parametrize('cur_language', ['', 'ar'])\n    @pytest.mark.parametrize('cur_country', ['ae'])\n    @pytest.mark.parametrize('cur_role', [\"NoReg\", \"Auth\", \"NoAuth\"])\n    @pytest.mark.parametrize('title_instrument', [''])\n    @pytest.mark.bug_322b\n    def test_322b(self, worker_id, d, cur_language, cur_country, cur_role, cur_login, cur_password, title_instrument):\n        \"\"\"\n        Check: Clicking [numeric values] in the Buy column in Menu tittle Markets does not open the\n                Sign-Up /Login form or page of the corresponding trading instrument on the trading platform using\n                English or Arabic language.\n        Language: EN, AR\n        License: SCA\n        Author: Kasila\n        \"\"\"\n    \n        bid = build_dynamic_arg_for_us_55(\n            d, worker_id, cur_language, cur_country, cur_role,\n            \"55\", \"ReTests of Manual Detected Bugs\",\n            \"322b\", 'The Sign Up/Login/page of the corresponding trading instrument on the trading platform'\n                   ' is not opened after clicking [numeric values] in the Buy column'\n        )\n    \n        match cur_language:\n            case '':\n                link = apply_preconditions_to_link(d, cur_language, cur_country, cur_role, cur_login, cur_password)\n                menu = MenuNewMarkets(d, link)\n                cur_item_link = menu.from_markets_menu_open_markets(d, cur_language, cur_country, link)\n                test_element = TradingInstrumentsMarkets(d, cur_item_link, bid)\n                test_element.trading_instruments(d, cur_item_link)\n                test_element.click_button_buy(d)\n                test_element = AssertTPI(d, cur_item_link, title_instrument)\n                match cur_role:\n                    case 'NoReg':\n                        test_element.assert_signup(d)\n                    case 'NoAuth':\n                        test_element.assert_login(d)\n                    case 'Auth':\n                        test_element.assert_tpi(d, title_instrument)\n            case 'ar':\n                link = apply_preconditions_to_link(d, cur_language, cur_country, cur_role, cur_login, cur_password)\n                menu = MenuNewMarkets(d, link)\n                cur_item_link = menu.from_markets_menu_open_markets(d, cur_language, cur_country, link)\n                test_element = TradingInstrumentsMarkets(d, cur_item_link, bid)\n                test_element.trading_instruments(d, cur_item_link)\n                test_element.click_button_buy(d)\n                test_element = AssertTPI(d, cur_item_link, title_instrument)\n                match cur_role:\n                    case 'NoReg':\n>                       test_element.assert_signup(d)\n\ntests/US_55_ReTestsManual/tassobaccato/US_55-tassobaccato_ReTestsManual_test.py:338: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/BugsManual/bug_322.py:113: in assert_signup\n    Common.pytest_fail(\"Bug # 55!322 \"\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmsg = 'Bug # 55!322 \\nExpected result: Sign Up form is opened\\nActual result: Sign Up form is not opened'\n\n    @staticmethod\n    def pytest_fail(msg):\n    \tCommon.flag_of_bug = True\n>   \tpytest.fail(msg)\nE    Failed: Bug # 55!322 \nE    Expected result: Sign Up form is opened\nE    Actual result: Sign Up form is not opened\n\npages/common.py:235: Failed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"d","time":{"start":1740875994066,"stop":1740875995095,"duration":1029},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0},{"name":"worker_id","time":{"start":1740875995095,"stop":1740875995095,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0},{"name":"cur_password","time":{"start":1740875995095,"stop":1740875995095,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0},{"name":"cur_login","time":{"start":1740875995095,"stop":1740875995095,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0}],"testStage":{"description":"\n        Check: Clicking [numeric values] in the Buy column in Menu tittle Markets does not open the\n                Sign-Up /Login form or page of the corresponding trading instrument on the trading platform using\n                English or Arabic language.\n        Language: EN, AR\n        License: SCA\n        Author: Kasila\n        ","status":"failed","statusMessage":"Failed: Bug # 55!322 \nExpected result: Sign Up form is opened\nActual result: Sign Up form is not opened","statusTrace":"self = <pages.BugsManual.bug_322.AssertTPI object at 0x7f0f1846be30>\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"39a2c4a0da9837b16a4457ff6e403d42\")>\n\n    def assert_signup(self, d):\n        print(f\"\\n{datetime.now()}   3. Assert\")\n    \n        try:\n>           signup_form = self.driver.find_element(By.XPATH, '//strong/span[contains(text(), \"Sign up\")]')\n\npages/BugsManual/bug_322.py:107: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:766: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:380: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f0f192fa000>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...\\\\n#17 0x55920e979fc6 \\\\u003Cunknown>\\\\n#18 0x7f11f289caa4 \\\\u003Cunknown>\\\\n#19 0x7f11f2929c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//strong/span[contains(text(), \"Sign up\")]\"}\nE         (Session info: chrome=133.0.6943.126); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE       Stacktrace:\nE       #0 0x55920e97b14a <unknown>\nE       #1 0x55920e418b80 <unknown>\nE       #2 0x55920e46a0e9 <unknown>\nE       #3 0x55920e46a271 <unknown>\nE       #4 0x55920e4b8de4 <unknown>\nE       #5 0x55920e48fefd <unknown>\nE       #6 0x55920e4b614a <unknown>\nE       #7 0x55920e48fca3 <unknown>\nE       #8 0x55920e45bf08 <unknown>\nE       #9 0x55920e45d071 <unknown>\nE       #10 0x55920e944b5b <unknown>\nE       #11 0x55920e948ae2 <unknown>\nE       #12 0x55920e930967 <unknown>\nE       #13 0x55920e9496d4 <unknown>\nE       #14 0x55920e914c7f <unknown>\nE       #15 0x55920e969cd8 <unknown>\nE       #16 0x55920e969ea9 <unknown>\nE       #17 0x55920e979fc6 <unknown>\nE       #18 0x7f11f289caa4 <unknown>\nE       #19 0x7f11f2929c3c <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: NoSuchElementException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <US_55-tassobaccato_ReTestsManual_test.TestManualDetectedBugs object at 0x7f0f19286960>\nworker_id = 'master'\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"39a2c4a0da9837b16a4457ff6e403d42\")>\ncur_language = 'ar', cur_country = 'ae', cur_role = 'NoReg'\ncur_login = 'test001.miketar+1@gmail.com', cur_password = 'Qwer1234-!@#$'\ntitle_instrument = ''\n\n    @allure.step(\n        'Start retest manual AT_55!322b that the Sign Up/Login/page of the corresponding trading instrument on '\n        'the trading platform is opened after clicking [numeric values] in the Buy column.')\n    @pytest.mark.parametrize('cur_language', ['', 'ar'])\n    @pytest.mark.parametrize('cur_country', ['ae'])\n    @pytest.mark.parametrize('cur_role', [\"NoReg\", \"Auth\", \"NoAuth\"])\n    @pytest.mark.parametrize('title_instrument', [''])\n    @pytest.mark.bug_322b\n    def test_322b(self, worker_id, d, cur_language, cur_country, cur_role, cur_login, cur_password, title_instrument):\n        \"\"\"\n        Check: Clicking [numeric values] in the Buy column in Menu tittle Markets does not open the\n                Sign-Up /Login form or page of the corresponding trading instrument on the trading platform using\n                English or Arabic language.\n        Language: EN, AR\n        License: SCA\n        Author: Kasila\n        \"\"\"\n    \n        bid = build_dynamic_arg_for_us_55(\n            d, worker_id, cur_language, cur_country, cur_role,\n            \"55\", \"ReTests of Manual Detected Bugs\",\n            \"322b\", 'The Sign Up/Login/page of the corresponding trading instrument on the trading platform'\n                   ' is not opened after clicking [numeric values] in the Buy column'\n        )\n    \n        match cur_language:\n            case '':\n                link = apply_preconditions_to_link(d, cur_language, cur_country, cur_role, cur_login, cur_password)\n                menu = MenuNewMarkets(d, link)\n                cur_item_link = menu.from_markets_menu_open_markets(d, cur_language, cur_country, link)\n                test_element = TradingInstrumentsMarkets(d, cur_item_link, bid)\n                test_element.trading_instruments(d, cur_item_link)\n                test_element.click_button_buy(d)\n                test_element = AssertTPI(d, cur_item_link, title_instrument)\n                match cur_role:\n                    case 'NoReg':\n                        test_element.assert_signup(d)\n                    case 'NoAuth':\n                        test_element.assert_login(d)\n                    case 'Auth':\n                        test_element.assert_tpi(d, title_instrument)\n            case 'ar':\n                link = apply_preconditions_to_link(d, cur_language, cur_country, cur_role, cur_login, cur_password)\n                menu = MenuNewMarkets(d, link)\n                cur_item_link = menu.from_markets_menu_open_markets(d, cur_language, cur_country, link)\n                test_element = TradingInstrumentsMarkets(d, cur_item_link, bid)\n                test_element.trading_instruments(d, cur_item_link)\n                test_element.click_button_buy(d)\n                test_element = AssertTPI(d, cur_item_link, title_instrument)\n                match cur_role:\n                    case 'NoReg':\n>                       test_element.assert_signup(d)\n\ntests/US_55_ReTestsManual/tassobaccato/US_55-tassobaccato_ReTestsManual_test.py:338: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/BugsManual/bug_322.py:113: in assert_signup\n    Common.pytest_fail(\"Bug # 55!322 \"\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmsg = 'Bug # 55!322 \\nExpected result: Sign Up form is opened\\nActual result: Sign Up form is not opened'\n\n    @staticmethod\n    def pytest_fail(msg):\n    \tCommon.flag_of_bug = True\n>   \tpytest.fail(msg)\nE    Failed: Bug # 55!322 \nE    Expected result: Sign Up form is opened\nE    Actual result: Sign Up form is not opened\n\npages/common.py:235: Failed","steps":[{"name":"Start retest manual AT_55!322b that the Sign Up/Login/page of the corresponding trading instrument on the trading platform is opened after clicking [numeric values] in the Buy column.","time":{"start":1740877129637,"stop":1740877148246,"duration":18609},"status":"failed","statusMessage":"Failed: Bug # 55!322 \nExpected result: Sign Up form is opened\nActual result: Sign Up form is not opened\n","statusTrace":"  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/tests/US_55_ReTestsManual/tassobaccato/US_55-tassobaccato_ReTestsManual_test.py\", line 338, in test_322b\n    test_element.assert_signup(d)\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/BugsManual/bug_322.py\", line 113, in assert_signup\n    Common.pytest_fail(\"Bug # 55!322 \"\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/common.py\", line 235, in pytest_fail\n    pytest.fail(msg)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/_pytest/outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n","steps":[{"name":"Build dynamic argument for TCs of US_55","time":{"start":1740877129637,"stop":1740877129638,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"39a2c4a0da9837b16a4457ff6e403d42\")>"},{"name":"worker_id","value":"'master'"},{"name":"cur_language","value":"'ar'"},{"name":"cur_country","value":"'ae'"},{"name":"cur_role","value":"'NoReg'"},{"name":"us","value":"'55'"},{"name":"desc_us","value":"'ReTests of Manual Detected Bugs'"},{"name":"num_tc","value":"'322b'"},{"name":"desc_tc","value":"'The Sign Up/Login/page of the corresponding trading instrument on the trading platform is not opened after clicking [numeric values] in the Buy column'"},{"name":"manual","value":"False"},{"name":"new_layout","value":"False"}],"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0},{"name":"   Set New preconditions","time":{"start":1740877129639,"stop":1740877134729,"duration":5090},"status":"passed","steps":[{"name":"2025-03-02 00:39:54.029619   Set language and country","time":{"start":1740877132102,"stop":1740877134724,"duration":2622},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"39a2c4a0da9837b16a4457ff6e403d42\")>"},{"name":"cur_language","value":"'ar'"},{"name":"cur_country","value":"'ae'"}],"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0}],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"39a2c4a0da9837b16a4457ff6e403d42\")>"},{"name":"host","value":"'https://capital.com/en-gb'"},{"name":"end_point","value":"''"},{"name":"cur_language","value":"'ar'"},{"name":"cur_country","value":"'ae'"},{"name":"cur_role","value":"'NoReg'"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"}],"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0},{"name":"Select \"Trading\" menu, \"Trading\" submenu","time":{"start":1740877134729,"stop":1740877143088,"duration":8359},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"39a2c4a0da9837b16a4457ff6e403d42\")>"},{"name":"cur_language","value":"'ar'"},{"name":"cur_country","value":"'ae'"},{"name":"link","value":"'https://capital.com/ar-ae'"}],"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0},{"name":"2025-03-02 00:39:53.871595   1. Start test that the Clicking [numeric values] in the Sell column in Menu tittle Markets opens the Sign-Up /Login form or page of the corresponding trading instrument on the trading platform.","time":{"start":1740877143088,"stop":1740877143107,"duration":19},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"39a2c4a0da9837b16a4457ff6e403d42\")>"},{"name":"cur_item_link","value":"'https://capital.com/ar-ae/markets'"}],"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0}],"attachments":[],"parameters":[{"name":"worker_id","value":"'master'"},{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"39a2c4a0da9837b16a4457ff6e403d42\")>"},{"name":"cur_language","value":"'ar'"},{"name":"cur_country","value":"'ae'"},{"name":"cur_role","value":"'NoReg'"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"},{"name":"title_instrument","value":"''"}],"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":true,"stepsCount":5,"attachmentsCount":0}],"attachments":[{"uid":"24ed1f5ad9863df6","name":"Screenshot","source":"24ed1f5ad9863df6.png","type":"image/png","size":139244},{"uid":"d2085c479bd702a7","name":"stdout","source":"d2085c479bd702a7.txt","type":"text/plain","size":3970}],"parameters":[],"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":true,"stepsCount":6,"attachmentsCount":2},"afterStages":[{"name":"d::0","time":{"start":1740879577414,"stop":1740879577848,"duration":434},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0}],"labels":[{"name":"epic","value":"TC_55!322b | The Sign Up/Login/page of the corresponding trading instrument on the trading platform is not opened after clicking [numeric values] in the Buy column"},{"name":"feature","value":"Role: NoReg"},{"name":"story","value":"Country: ae"},{"name":"tag","value":"bug_322b"},{"name":"tag","value":"us_55"},{"name":"parentSuite","value":"tests.US_55_ReTestsManual.tassobaccato"},{"name":"suite","value":"US_55-tassobaccato_ReTestsManual_test"},{"name":"subSuite","value":"TestManualDetectedBugs"},{"name":"host","value":"fv-az1334-607"},{"name":"thread","value":"25237-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.US_55_ReTestsManual.tassobaccato.US_55-tassobaccato_ReTestsManual_test"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"cur_country","value":"'ae'"},{"name":"cur_language","value":"'ar'"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"},{"name":"cur_role","value":"'NoReg'"},{"name":"d","value":"'Chrome'"},{"name":"title_instrument","value":"''"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":100,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":100},"items":[{"uid":"17ab5992cde58111","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/334//#testresult/17ab5992cde58111","status":"failed","statusDetails":"Failed: Bug # 55!322 \nExpected result: Sign Up form is opened\nActual result: Sign Up form is not opened","time":{"start":1740791026558,"stop":1740791044913,"duration":18355}},{"uid":"43946be0e8951706","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/333//#testresult/43946be0e8951706","status":"failed","statusDetails":"Failed: Bug # 55!322 \nExpected result: Sign Up form is opened\nActual result: Sign Up form is not opened","time":{"start":1740705802051,"stop":1740705820379,"duration":18328}},{"uid":"5b52a9c82333c39e","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/332//#testresult/5b52a9c82333c39e","status":"failed","statusDetails":"Failed: Bug # 55!322 \nExpected result: Sign Up form is opened\nActual result: Sign Up form is not opened","time":{"start":1740618804519,"stop":1740618822857,"duration":18338}},{"uid":"dd39cef87968cfef","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/304//#testresult/dd39cef87968cfef","status":"failed","statusDetails":"Failed: Bug # 55!322 \nExpected result: Sign Up form is opened\nActual result: Sign Up form is not opened","time":{"start":1738200101769,"stop":1738200120328,"duration":18559}},{"uid":"fcb1fed1f8b19a1d","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/303//#testresult/fcb1fed1f8b19a1d","status":"failed","statusDetails":"Failed: Bug # 55!322 \nExpected result: Sign Up form is opened\nActual result: Sign Up form is not opened","time":{"start":1738113704877,"stop":1738113723957,"duration":19080}},{"uid":"c5941223b840dff1","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/302//#testresult/c5941223b840dff1","status":"failed","statusDetails":"Failed: Bug # 55!322 \nExpected result: Sign Up form is opened\nActual result: Sign Up form is not opened","time":{"start":1738026440228,"stop":1738026459141,"duration":18913}},{"uid":"eb82dd6551910dbd","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/301//#testresult/eb82dd6551910dbd","status":"failed","statusDetails":"Failed: Bug # 55!322 \nExpected result: Sign Up form is opened\nActual result: Sign Up form is not opened","time":{"start":1737940590146,"stop":1737940608910,"duration":18764}},{"uid":"1c99b8e412bd7253","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/300//#testresult/1c99b8e412bd7253","status":"failed","statusDetails":"Failed: Bug # 55!322 \nExpected result: Sign Up form is opened\nActual result: Sign Up form is not opened","time":{"start":1737854877630,"stop":1737854896187,"duration":18557}},{"uid":"d9cffbfdee1218b4","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/299//#testresult/d9cffbfdee1218b4","status":"failed","statusDetails":"Failed: Bug # 55!322 \nExpected result: Sign Up form is opened\nActual result: Sign Up form is not opened","time":{"start":1737767300748,"stop":1737767319149,"duration":18401}},{"uid":"9388db1b5a31f6a9","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/298//#testresult/9388db1b5a31f6a9","status":"failed","statusDetails":"Failed: Bug # 55!322 \nExpected result: Sign Up form is opened\nActual result: Sign Up form is not opened","time":{"start":1737682412616,"stop":1737682431119,"duration":18503}},{"uid":"cbdecde13414ddc3","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/297//#testresult/cbdecde13414ddc3","status":"failed","statusDetails":"Failed: Bug # 55!322 \nExpected result: Sign Up form is opened\nActual result: Sign Up form is not opened","time":{"start":1737595313269,"stop":1737595331775,"duration":18506}},{"uid":"f096a00d6eb6b69d","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/296//#testresult/f096a00d6eb6b69d","status":"failed","statusDetails":"Failed: Bug # 55!322 \nExpected result: Sign Up form is opened\nActual result: Sign Up form is not opened","time":{"start":1737509633983,"stop":1737509652171,"duration":18188}},{"uid":"17b1bc60e3c1e9b","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/295//#testresult/17b1bc60e3c1e9b","status":"failed","statusDetails":"Failed: Bug # 55!322 \nExpected result: Sign Up form is opened\nActual result: Sign Up form is not opened","time":{"start":1737421980759,"stop":1737421999272,"duration":18513}},{"uid":"d43db25a72c89fb2","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/294//#testresult/d43db25a72c89fb2","status":"failed","statusDetails":"Failed: Bug # 55!322 \nExpected result: Sign Up form is opened\nActual result: Sign Up form is not opened","time":{"start":1737336331653,"stop":1737336350228,"duration":18575}},{"uid":"e4e764fa285717ee","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/293//#testresult/e4e764fa285717ee","status":"failed","statusDetails":"Failed: Bug # 55!322 \nExpected result: Sign Up form is opened\nActual result: Sign Up form is not opened","time":{"start":1737249407020,"stop":1737249425698,"duration":18678}},{"uid":"e22deeb24b213abc","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/292//#testresult/e22deeb24b213abc","status":"failed","statusDetails":"Failed: Bug # 55!322 \nExpected result: Sign Up form is opened\nActual result: Sign Up form is not opened","time":{"start":1737163709658,"stop":1737163727994,"duration":18336}},{"uid":"b0c9bde81d1dc963","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/291//#testresult/b0c9bde81d1dc963","status":"failed","statusDetails":"Failed: Bug # 55!322 \nExpected result: Sign Up form is opened\nActual result: Sign Up form is not opened","time":{"start":1737077541181,"stop":1737077559405,"duration":18224}},{"uid":"e87c65768c11cf11","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/290//#testresult/e87c65768c11cf11","status":"failed","statusDetails":"Failed: Bug # 55!322 \nExpected result: Sign Up form is opened\nActual result: Sign Up form is not opened","time":{"start":1736990086276,"stop":1736990104568,"duration":18292}},{"uid":"507b78916231d435","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/289//#testresult/507b78916231d435","status":"failed","statusDetails":"Failed: Bug # 55!322 \nExpected result: Sign Up form is opened\nActual result: Sign Up form is not opened","time":{"start":1736903041285,"stop":1736903060159,"duration":18874}},{"uid":"eb7d14cf5f1a7ab0","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/288//#testresult/eb7d14cf5f1a7ab0","status":"failed","statusDetails":"AssertionError: Button [Accept all cookies] is not visible after 30 sec.","time":{"start":1736814153062,"stop":1736814188474,"duration":35412}}]},"tags":["us_55","bug_322b"]},"source":"dd7ee9eb06f1e4cb.json","parameterValues":["'ae'","'ar'","'test001.miketar+1@gmail.com'","'Qwer1234-!@#$'","'NoReg'","'Chrome'","''"]}