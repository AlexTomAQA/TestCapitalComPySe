{"uid":"996adeb034f5bf23","name":"TC_55!307 (Lang: en) | Bid:55!307-en.ae.Auth","fullName":"tests.US_55_ReTestsManual.saii-d3v.US_55-saii-d3v_ReTestsManual_test.TestManualDetectedBugs#test_307","historyId":"5844994a7c74c7ffd8febbbaad570b3f","time":{"start":1743292533845,"stop":1743292542043,"duration":8198},"description":"\n         Check: Error message “DNS_PROBE_FINISHED_NXDOMAIN” is displayed\n         after clicking any of 12 links in the text on the page “Stock Market Trading Hours”\n         when EN language is selected\n         Language: EN.\n         License: SCA.\n         Author: Sergey Aiidzhanov\n         ","descriptionHtml":"<pre><code>     Check: Error message “DNS_PROBE_FINISHED_NXDOMAIN” is displayed\n     after clicking any of 12 links in the text on the page “Stock Market Trading Hours”\n     when EN language is selected\n     Language: EN.\n     License: SCA.\n     Author: Sergey Aiidzhanov\n</code></pre>\n","status":"failed","statusMessage":"Failed: Bug! 'Login' button is not clicked","statusTrace":"self = <pages.conditions_v2.NewConditions object at 0x7fb93cead310>\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"a32eb402fe2a9a83fa9ad49439a5096b\")>\nlink = 'https://capital.com/en-gb', login = 'test001.miketar+1@gmail.com'\npassword = 'Qwer1234-!@#$', cur_role = 'Auth'\n\n    @allure.step(f\"{datetime.now()}   Start Authorization\")\n    # @profile(precision=3)\n    def to_do_authorisation_new(self, d, link, login, password, cur_role):\n        \"\"\"Authorization\"\"\"\n        print(f\"\\n\" f\"{datetime.now()}   Start Authorization\")\n    \n        # Setup wait for later\n        menu = MainMenu(d, link)\n        assert login != \"\", \"Авторизация невозможна. Не указан e-mail\"\n        assert password != \"\", \"Авторизация невозможна. Не указан пароль\"\n    \n        # нажать в хедере на кнопку \"Log in\"\n        try:\n>           menu.element_is_clickable(menu.MENU_LOGIN).click()\n\npages/conditions_v2.py:237: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:380: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fb93cfb1130>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#21 0x5632dc943e76 \\\\u003Cunknown>\\\\n#22 0x7fe45309caa4 \\\\u003Cunknown>\\\\n#23 0x7fe453129c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button class=\"accountBtns_btn__vOcCs accountBtns_btnEmpty__TCWRE helpers_showLg__UPEqH js-analyticsClick js-analyticsVisible\" data-type=\"btn_header_login\" data-testid=\"login_btn\">...</button> is not clickable at point (1385, 121). Other element would receive the click: <div class=\"modal_overlay__f_YlZ modal_mobileBottomAttached__cTOIu\">...</div>\nE         (Session info: chrome=134.0.6998.88)\nE       Stacktrace:\nE       #0 0x5632dc944ffa <unknown>\nE       #1 0x5632dc403970 <unknown>\nE       #2 0x5632dc45c1ec <unknown>\nE       #3 0x5632dc45a055 <unknown>\nE       #4 0x5632dc4576f2 <unknown>\nE       #5 0x5632dc4568ca <unknown>\nE       #6 0x5632dc4494cd <unknown>\nE       #7 0x5632dc47b292 <unknown>\nE       #8 0x5632dc448e4a <unknown>\nE       #9 0x5632dc47b45e <unknown>\nE       #10 0x5632dc4a170c <unknown>\nE       #11 0x5632dc47b063 <unknown>\nE       #12 0x5632dc447328 <unknown>\nE       #13 0x5632dc448491 <unknown>\nE       #14 0x5632dc90c42b <unknown>\nE       #15 0x5632dc9102ec <unknown>\nE       #16 0x5632dc8f3a22 <unknown>\nE       #17 0x5632dc910e64 <unknown>\nE       #18 0x5632dc8d7bef <unknown>\nE       #19 0x5632dc933558 <unknown>\nE       #20 0x5632dc933736 <unknown>\nE       #21 0x5632dc943e76 <unknown>\nE       #22 0x7fe45309caa4 <unknown>\nE       #23 0x7fe453129c3c <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <US_55-saii-d3v_ReTestsManual_test.TestManualDetectedBugs object at 0x7fb93d112ff0>\nworker_id = 'master'\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"a32eb402fe2a9a83fa9ad49439a5096b\")>\ncur_language = '', cur_country = 'ae', cur_role = 'Auth'\ncur_login = 'test001.miketar+1@gmail.com', cur_password = 'Qwer1234-!@#$'\n\n    @allure.step(\n        'Start retest manual TC_55!307 Error message “DNS_PROBE_FINISHED_NXDOMAIN” is displayed '\n        'after clicking any of 12 links in the text on the page “Stock Market Trading Hours” '\n        'when EN language is selected')\n    @pytest.mark.parametrize('cur_language', [''])\n    @pytest.mark.parametrize('cur_country', ['ae'])\n    @pytest.mark.parametrize('cur_role', ['Auth', 'NoAuth', 'NoReg'])\n    @pytest.mark.bug_307\n    def test_307(self, worker_id, d, cur_language, cur_country, cur_role,\n                 cur_login, cur_password):\n        \"\"\"\n         Check: Error message “DNS_PROBE_FINISHED_NXDOMAIN” is displayed\n         after clicking any of 12 links in the text on the page “Stock Market Trading Hours”\n         when EN language is selected\n         Language: EN.\n         License: SCA.\n         Author: Sergey Aiidzhanov\n         \"\"\"\n        bid = build_dynamic_arg_for_us_55(\n            d, worker_id, cur_language, cur_country, cur_role,\n            \"55\", \"ReTests of Manual Detected Bugs\",\n            \"307\",\n            'Error message “DNS_PROBE_FINISHED_NXDOMAIN” is displayed '\n            'after clicking any of 12 links in the text on the page “Stock Market Trading Hours” '\n            'when EN language is selected',\n            False,\n            False\n        )\n        # Arrange\n>       link = apply_preconditions_to_link(d, cur_language, cur_country, cur_role, cur_login, cur_password)\n\ntests/US_55_ReTestsManual/saii-d3v/US_55-saii-d3v_ReTestsManual_test.py:723: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/conditions_v2.py:78: in apply_preconditions_to_link\n    return cond.preconditions(d, CapitalComPageSrc.URL_NEW, '', cur_language, cur_country, cur_role,\npages/conditions_v2.py:152: in preconditions\n    self.to_do_authorisation_new(d, host, cur_login, cur_password, cur_role)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.conditions_v2.NewConditions object at 0x7fb93cead310>\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"a32eb402fe2a9a83fa9ad49439a5096b\")>\nlink = 'https://capital.com/en-gb', login = 'test001.miketar+1@gmail.com'\npassword = 'Qwer1234-!@#$', cur_role = 'Auth'\n\n    @allure.step(f\"{datetime.now()}   Start Authorization\")\n    # @profile(precision=3)\n    def to_do_authorisation_new(self, d, link, login, password, cur_role):\n        \"\"\"Authorization\"\"\"\n        print(f\"\\n\" f\"{datetime.now()}   Start Authorization\")\n    \n        # Setup wait for later\n        menu = MainMenu(d, link)\n        assert login != \"\", \"Авторизация невозможна. Не указан e-mail\"\n        assert password != \"\", \"Авторизация невозможна. Не указан пароль\"\n    \n        # нажать в хедере на кнопку \"Log in\"\n        try:\n            menu.element_is_clickable(menu.MENU_LOGIN).click()\n        except:\n>           pytest.fail(\"Bug! 'Login' button is not clicked\")\nE           Failed: Bug! 'Login' button is not clicked\n\npages/conditions_v2.py:239: Failed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"d","time":{"start":1743290911682,"stop":1743290912505,"duration":823},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_login","time":{"start":1743290912505,"stop":1743290912505,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"worker_id","time":{"start":1743290912505,"stop":1743290912505,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_password","time":{"start":1743290912505,"stop":1743290912505,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"\n         Check: Error message “DNS_PROBE_FINISHED_NXDOMAIN” is displayed\n         after clicking any of 12 links in the text on the page “Stock Market Trading Hours”\n         when EN language is selected\n         Language: EN.\n         License: SCA.\n         Author: Sergey Aiidzhanov\n         ","status":"failed","statusMessage":"Failed: Bug! 'Login' button is not clicked","statusTrace":"self = <pages.conditions_v2.NewConditions object at 0x7fb93cead310>\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"a32eb402fe2a9a83fa9ad49439a5096b\")>\nlink = 'https://capital.com/en-gb', login = 'test001.miketar+1@gmail.com'\npassword = 'Qwer1234-!@#$', cur_role = 'Auth'\n\n    @allure.step(f\"{datetime.now()}   Start Authorization\")\n    # @profile(precision=3)\n    def to_do_authorisation_new(self, d, link, login, password, cur_role):\n        \"\"\"Authorization\"\"\"\n        print(f\"\\n\" f\"{datetime.now()}   Start Authorization\")\n    \n        # Setup wait for later\n        menu = MainMenu(d, link)\n        assert login != \"\", \"Авторизация невозможна. Не указан e-mail\"\n        assert password != \"\", \"Авторизация невозможна. Не указан пароль\"\n    \n        # нажать в хедере на кнопку \"Log in\"\n        try:\n>           menu.element_is_clickable(menu.MENU_LOGIN).click()\n\npages/conditions_v2.py:237: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:380: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fb93cfb1130>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#21 0x5632dc943e76 \\\\u003Cunknown>\\\\n#22 0x7fe45309caa4 \\\\u003Cunknown>\\\\n#23 0x7fe453129c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button class=\"accountBtns_btn__vOcCs accountBtns_btnEmpty__TCWRE helpers_showLg__UPEqH js-analyticsClick js-analyticsVisible\" data-type=\"btn_header_login\" data-testid=\"login_btn\">...</button> is not clickable at point (1385, 121). Other element would receive the click: <div class=\"modal_overlay__f_YlZ modal_mobileBottomAttached__cTOIu\">...</div>\nE         (Session info: chrome=134.0.6998.88)\nE       Stacktrace:\nE       #0 0x5632dc944ffa <unknown>\nE       #1 0x5632dc403970 <unknown>\nE       #2 0x5632dc45c1ec <unknown>\nE       #3 0x5632dc45a055 <unknown>\nE       #4 0x5632dc4576f2 <unknown>\nE       #5 0x5632dc4568ca <unknown>\nE       #6 0x5632dc4494cd <unknown>\nE       #7 0x5632dc47b292 <unknown>\nE       #8 0x5632dc448e4a <unknown>\nE       #9 0x5632dc47b45e <unknown>\nE       #10 0x5632dc4a170c <unknown>\nE       #11 0x5632dc47b063 <unknown>\nE       #12 0x5632dc447328 <unknown>\nE       #13 0x5632dc448491 <unknown>\nE       #14 0x5632dc90c42b <unknown>\nE       #15 0x5632dc9102ec <unknown>\nE       #16 0x5632dc8f3a22 <unknown>\nE       #17 0x5632dc910e64 <unknown>\nE       #18 0x5632dc8d7bef <unknown>\nE       #19 0x5632dc933558 <unknown>\nE       #20 0x5632dc933736 <unknown>\nE       #21 0x5632dc943e76 <unknown>\nE       #22 0x7fe45309caa4 <unknown>\nE       #23 0x7fe453129c3c <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <US_55-saii-d3v_ReTestsManual_test.TestManualDetectedBugs object at 0x7fb93d112ff0>\nworker_id = 'master'\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"a32eb402fe2a9a83fa9ad49439a5096b\")>\ncur_language = '', cur_country = 'ae', cur_role = 'Auth'\ncur_login = 'test001.miketar+1@gmail.com', cur_password = 'Qwer1234-!@#$'\n\n    @allure.step(\n        'Start retest manual TC_55!307 Error message “DNS_PROBE_FINISHED_NXDOMAIN” is displayed '\n        'after clicking any of 12 links in the text on the page “Stock Market Trading Hours” '\n        'when EN language is selected')\n    @pytest.mark.parametrize('cur_language', [''])\n    @pytest.mark.parametrize('cur_country', ['ae'])\n    @pytest.mark.parametrize('cur_role', ['Auth', 'NoAuth', 'NoReg'])\n    @pytest.mark.bug_307\n    def test_307(self, worker_id, d, cur_language, cur_country, cur_role,\n                 cur_login, cur_password):\n        \"\"\"\n         Check: Error message “DNS_PROBE_FINISHED_NXDOMAIN” is displayed\n         after clicking any of 12 links in the text on the page “Stock Market Trading Hours”\n         when EN language is selected\n         Language: EN.\n         License: SCA.\n         Author: Sergey Aiidzhanov\n         \"\"\"\n        bid = build_dynamic_arg_for_us_55(\n            d, worker_id, cur_language, cur_country, cur_role,\n            \"55\", \"ReTests of Manual Detected Bugs\",\n            \"307\",\n            'Error message “DNS_PROBE_FINISHED_NXDOMAIN” is displayed '\n            'after clicking any of 12 links in the text on the page “Stock Market Trading Hours” '\n            'when EN language is selected',\n            False,\n            False\n        )\n        # Arrange\n>       link = apply_preconditions_to_link(d, cur_language, cur_country, cur_role, cur_login, cur_password)\n\ntests/US_55_ReTestsManual/saii-d3v/US_55-saii-d3v_ReTestsManual_test.py:723: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/conditions_v2.py:78: in apply_preconditions_to_link\n    return cond.preconditions(d, CapitalComPageSrc.URL_NEW, '', cur_language, cur_country, cur_role,\npages/conditions_v2.py:152: in preconditions\n    self.to_do_authorisation_new(d, host, cur_login, cur_password, cur_role)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.conditions_v2.NewConditions object at 0x7fb93cead310>\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"a32eb402fe2a9a83fa9ad49439a5096b\")>\nlink = 'https://capital.com/en-gb', login = 'test001.miketar+1@gmail.com'\npassword = 'Qwer1234-!@#$', cur_role = 'Auth'\n\n    @allure.step(f\"{datetime.now()}   Start Authorization\")\n    # @profile(precision=3)\n    def to_do_authorisation_new(self, d, link, login, password, cur_role):\n        \"\"\"Authorization\"\"\"\n        print(f\"\\n\" f\"{datetime.now()}   Start Authorization\")\n    \n        # Setup wait for later\n        menu = MainMenu(d, link)\n        assert login != \"\", \"Авторизация невозможна. Не указан e-mail\"\n        assert password != \"\", \"Авторизация невозможна. Не указан пароль\"\n    \n        # нажать в хедере на кнопку \"Log in\"\n        try:\n            menu.element_is_clickable(menu.MENU_LOGIN).click()\n        except:\n>           pytest.fail(\"Bug! 'Login' button is not clicked\")\nE           Failed: Bug! 'Login' button is not clicked\n\npages/conditions_v2.py:239: Failed","steps":[{"name":"Start retest manual TC_55!307 Error message “DNS_PROBE_FINISHED_NXDOMAIN” is displayed after clicking any of 12 links in the text on the page “Stock Market Trading Hours” when EN language is selected","time":{"start":1743292533845,"stop":1743292542043,"duration":8198},"status":"failed","statusMessage":"Failed: Bug! 'Login' button is not clicked\n","statusTrace":"  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/tests/US_55_ReTestsManual/saii-d3v/US_55-saii-d3v_ReTestsManual_test.py\", line 723, in test_307\n    link = apply_preconditions_to_link(d, cur_language, cur_country, cur_role, cur_login, cur_password)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/conditions_v2.py\", line 78, in apply_preconditions_to_link\n    return cond.preconditions(d, CapitalComPageSrc.URL_NEW, '', cur_language, cur_country, cur_role,\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/conditions_v2.py\", line 152, in preconditions\n    self.to_do_authorisation_new(d, host, cur_login, cur_password, cur_role)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/conditions_v2.py\", line 239, in to_do_authorisation_new\n    pytest.fail(\"Bug! 'Login' button is not clicked\")\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/_pytest/outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n","steps":[{"name":"Build dynamic argument for TCs of US_55","time":{"start":1743292533845,"stop":1743292533847,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"a32eb402fe2a9a83fa9ad49439a5096b\")>"},{"name":"worker_id","value":"'master'"},{"name":"cur_language","value":"''"},{"name":"cur_country","value":"'ae'"},{"name":"cur_role","value":"'Auth'"},{"name":"us","value":"'55'"},{"name":"desc_us","value":"'ReTests of Manual Detected Bugs'"},{"name":"num_tc","value":"'307'"},{"name":"desc_tc","value":"'Error message “DNS_PROBE_FINISHED_NXDOMAIN” is displayed after clicking any of 12 links in the text on the page “Stock Market Trading Hours” when EN language is selected'"},{"name":"manual","value":"False"},{"name":"new_layout","value":"False"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"   Set New preconditions","time":{"start":1743292533847,"stop":1743292542042,"duration":8195},"status":"failed","statusMessage":"Failed: Bug! 'Login' button is not clicked\n","statusTrace":"  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/conditions_v2.py\", line 152, in preconditions\n    self.to_do_authorisation_new(d, host, cur_login, cur_password, cur_role)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/conditions_v2.py\", line 239, in to_do_authorisation_new\n    pytest.fail(\"Bug! 'Login' button is not clicked\")\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/_pytest/outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n","steps":[{"name":"2025-03-29 23:28:31.615357   Start Authorization","time":{"start":1743292540961,"stop":1743292542041,"duration":1080},"status":"failed","statusMessage":"Failed: Bug! 'Login' button is not clicked\n","statusTrace":"  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/conditions_v2.py\", line 239, in to_do_authorisation_new\n    pytest.fail(\"Bug! 'Login' button is not clicked\")\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/_pytest/outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"a32eb402fe2a9a83fa9ad49439a5096b\")>"},{"name":"link","value":"'https://capital.com/en-gb'"},{"name":"login","value":"'test001.miketar+1@gmail.com'"},{"name":"password","value":"'Qwer1234-!@#$'"},{"name":"cur_role","value":"'Auth'"}],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"a32eb402fe2a9a83fa9ad49439a5096b\")>"},{"name":"host","value":"'https://capital.com/en-gb'"},{"name":"end_point","value":"''"},{"name":"cur_language","value":"''"},{"name":"cur_country","value":"'ae'"},{"name":"cur_role","value":"'Auth'"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"}],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"worker_id","value":"'master'"},{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"a32eb402fe2a9a83fa9ad49439a5096b\")>"},{"name":"cur_language","value":"''"},{"name":"cur_country","value":"'ae'"},{"name":"cur_role","value":"'Auth'"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"}],"shouldDisplayMessage":false,"stepsCount":3,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"aec9bfb1d7f771e6","name":"Screenshot","source":"aec9bfb1d7f771e6.png","type":"image/png","size":611008},{"uid":"b2acca10a1e36d9d","name":"stdout","source":"b2acca10a1e36d9d.txt","type":"text/plain","size":2239}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"d::0","time":{"start":1743293677657,"stop":1743293678063,"duration":406},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"epic","value":"TC_55!307 | Error message “DNS_PROBE_FINISHED_NXDOMAIN” is displayed after clicking any of 12 links in the text on the page “Stock Market Trading Hours” when EN language is selected"},{"name":"feature","value":"Role: Auth"},{"name":"story","value":"Country: ae"},{"name":"tag","value":"bug_307"},{"name":"tag","value":"us_55"},{"name":"parentSuite","value":"tests.US_55_ReTestsManual.saii-d3v"},{"name":"suite","value":"US_55-saii-d3v_ReTestsManual_test"},{"name":"subSuite","value":"TestManualDetectedBugs"},{"name":"host","value":"fv-az2221-443"},{"name":"thread","value":"20444-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.US_55_ReTestsManual.saii-d3v.US_55-saii-d3v_ReTestsManual_test"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"cur_country","value":"'ae'"},{"name":"cur_language","value":"''"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"},{"name":"cur_role","value":"'Auth'"},{"name":"d","value":"'Chrome'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":16,"broken":0,"skipped":0,"passed":6,"unknown":0,"total":22},"items":[{"uid":"e1e42ad5af1ce2e8","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/362//#testresult/e1e42ad5af1ce2e8","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1743206049925,"stop":1743206058220,"duration":8295}},{"uid":"f3fda25aa9cd2673","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/361//#testresult/f3fda25aa9cd2673","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1743119687444,"stop":1743119695766,"duration":8322}},{"uid":"829c6f31458a4bed","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/360//#testresult/829c6f31458a4bed","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1743032488132,"stop":1743032496668,"duration":8536}},{"uid":"8611225055937c11","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/359//#testresult/8611225055937c11","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742946084505,"stop":1742946092668,"duration":8163}},{"uid":"a1a3f5a2f2165cb","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/358//#testresult/a1a3f5a2f2165cb","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742859388258,"stop":1742859396633,"duration":8375}},{"uid":"4de110a99f69ea8a","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/357//#testresult/4de110a99f69ea8a","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742773293445,"stop":1742773301554,"duration":8109}},{"uid":"d19aa2e10e87c058","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/356//#testresult/d19aa2e10e87c058","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742687552909,"stop":1742687561268,"duration":8359}},{"uid":"60d3773ec8e1c96e","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/355//#testresult/60d3773ec8e1c96e","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742601127293,"stop":1742601135599,"duration":8306}},{"uid":"eaa7b87d23c13e19","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/354//#testresult/eaa7b87d23c13e19","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742513698955,"stop":1742513707114,"duration":8159}},{"uid":"aaa60ad10312253f","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/353//#testresult/aaa60ad10312253f","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742427372377,"stop":1742427380720,"duration":8343}},{"uid":"9a3630b304f3a3c5","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/352//#testresult/9a3630b304f3a3c5","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742340397128,"stop":1742340405761,"duration":8633}},{"uid":"c8aa10fd5d8635fb","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/351//#testresult/c8aa10fd5d8635fb","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742255540539,"stop":1742255549024,"duration":8485}},{"uid":"d180a8f94bd4f592","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/350//#testresult/d180a8f94bd4f592","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742169073488,"stop":1742169081643,"duration":8155}},{"uid":"57f60bf069546d71","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/349//#testresult/57f60bf069546d71","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742082869586,"stop":1742082877815,"duration":8229}},{"uid":"62cd1d92de56fa10","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/348//#testresult/62cd1d92de56fa10","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1741995436228,"stop":1741995444617,"duration":8389}},{"uid":"39d32d1bfbb1d9d3","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/347//#testresult/39d32d1bfbb1d9d3","status":"passed","time":{"start":1741911848537,"stop":1741911875518,"duration":26981}},{"uid":"ee6028026c27416a","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/346//#testresult/ee6028026c27416a","status":"passed","time":{"start":1741824712844,"stop":1741824741729,"duration":28885}},{"uid":"5e0daa901fa63533","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/345//#testresult/5e0daa901fa63533","status":"passed","time":{"start":1741738365197,"stop":1741738391037,"duration":25840}},{"uid":"3244f5d750b156d5","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/344//#testresult/3244f5d750b156d5","status":"passed","time":{"start":1741652582694,"stop":1741652609589,"duration":26895}},{"uid":"804d5be45913ff74","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/343//#testresult/804d5be45913ff74","status":"passed","time":{"start":1741565995135,"stop":1741566020300,"duration":25165}}]},"tags":["us_55","bug_307"]},"source":"996adeb034f5bf23.json","parameterValues":["'ae'","''","'test001.miketar+1@gmail.com'","'Qwer1234-!@#$'","'Auth'","'Chrome'"]}