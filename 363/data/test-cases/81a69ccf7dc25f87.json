{"uid":"81a69ccf7dc25f87","name":"TC_55!664 (Lang: el) | Bid:55!664-el.gr.Auth","fullName":"tests.US_55_ReTestsManual.tassobaccato.US_55-tassobaccato_ReTestsManual_test.TestManualDetectedBugs#test_664","historyId":"f707b4d2495851b8e11fecdd0f2d514f","time":{"start":1743295423075,"stop":1743295431623,"duration":8548},"description":"\n        Check: Menu section [About] > Menu item [Compliance & Legals] > Click on the link  \"Spread\" in the “Spread” block\n        Language: EL\n        License: CYSEC\n        Author: Kasila\n        ","descriptionHtml":"<pre><code>    Check: Menu section [About] &gt; Menu item [Compliance &amp; Legals] &gt; Click on the link  &quot;Spread&quot; in the “Spread” block\n    Language: EL\n    License: CYSEC\n    Author: Kasila\n</code></pre>\n","status":"failed","statusMessage":"Failed: Bug! 'Login' button is not clicked","statusTrace":"self = <pages.conditions_v2.NewConditions object at 0x7fb1b19facc0>\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"bbf925d4c1ca3adb186b059e598e341b\")>\nlink = 'https://capital.com/en-gb', login = 'test001.miketar+1@gmail.com'\npassword = 'Qwer1234-!@#$', cur_role = 'Auth'\n\n    @allure.step(f\"{datetime.now()}   Start Authorization\")\n    # @profile(precision=3)\n    def to_do_authorisation_new(self, d, link, login, password, cur_role):\n        \"\"\"Authorization\"\"\"\n        print(f\"\\n\" f\"{datetime.now()}   Start Authorization\")\n    \n        # Setup wait for later\n        menu = MainMenu(d, link)\n        assert login != \"\", \"Авторизация невозможна. Не указан e-mail\"\n        assert password != \"\", \"Авторизация невозможна. Не указан пароль\"\n    \n        # нажать в хедере на кнопку \"Log in\"\n        try:\n>           menu.element_is_clickable(menu.MENU_LOGIN).click()\n\npages/conditions_v2.py:237: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:380: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fb1b0ed7170>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#21 0x5646befc4e76 \\\\u003Cunknown>\\\\n#22 0x7fc307e9caa4 \\\\u003Cunknown>\\\\n#23 0x7fc307f29c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button class=\"accountBtns_btn__vOcCs accountBtns_btnEmpty__TCWRE helpers_showLg__UPEqH js-analyticsClick js-analyticsVisible\" data-type=\"btn_header_login\" data-testid=\"login_btn\">...</button> is not clickable at point (1385, 121). Other element would receive the click: <div class=\"modal_overlay__f_YlZ modal_mobileBottomAttached__cTOIu\">...</div>\nE         (Session info: chrome=134.0.6998.88)\nE       Stacktrace:\nE       #0 0x5646befc5ffa <unknown>\nE       #1 0x5646bea84970 <unknown>\nE       #2 0x5646beadd1ec <unknown>\nE       #3 0x5646beadb055 <unknown>\nE       #4 0x5646bead86f2 <unknown>\nE       #5 0x5646bead78ca <unknown>\nE       #6 0x5646beaca4cd <unknown>\nE       #7 0x5646beafc292 <unknown>\nE       #8 0x5646beac9e4a <unknown>\nE       #9 0x5646beafc45e <unknown>\nE       #10 0x5646beb2270c <unknown>\nE       #11 0x5646beafc063 <unknown>\nE       #12 0x5646beac8328 <unknown>\nE       #13 0x5646beac9491 <unknown>\nE       #14 0x5646bef8d42b <unknown>\nE       #15 0x5646bef912ec <unknown>\nE       #16 0x5646bef74a22 <unknown>\nE       #17 0x5646bef91e64 <unknown>\nE       #18 0x5646bef58bef <unknown>\nE       #19 0x5646befb4558 <unknown>\nE       #20 0x5646befb4736 <unknown>\nE       #21 0x5646befc4e76 <unknown>\nE       #22 0x7fc307e9caa4 <unknown>\nE       #23 0x7fc307f29c3c <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <US_55-tassobaccato_ReTestsManual_test.TestManualDetectedBugs object at 0x7fb1b1c9a570>\nworker_id = 'master'\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"bbf925d4c1ca3adb186b059e598e341b\")>\ncur_language = 'el', cur_country = 'gr', cur_role = 'Auth'\ncur_login = 'test001.miketar+1@gmail.com', cur_password = 'Qwer1234-!@#$'\n\n    @allure.step('Start retest manual AT_55!664  A redirection to the main page occurs in the \"Compliance & Legals\" '\n                 'section when clicking on the \"Spread\" link.')\n    @pytest.mark.parametrize('cur_language', ['el'])\n    @pytest.mark.parametrize('cur_country', ['gr'])\n    @pytest.mark.parametrize('cur_role', [\"NoReg\", \"Auth\", \"NoAuth\"])\n    @pytest.mark.bug_660\n    def test_664(self, worker_id, d, cur_language, cur_country, cur_role, cur_login, cur_password):\n        \"\"\"\n        Check: Menu section [About] > Menu item [Compliance & Legals] > Click on the link  \"Spread\" in the “Spread” block\n        Language: EL\n        License: CYSEC\n        Author: Kasila\n        \"\"\"\n    \n        bid = build_dynamic_arg_for_us_55(\n            d, worker_id, cur_language, cur_country, cur_role,\n            \"55\", \"ReTests of Manual Detected Bugs\",\n            \"664\", ' A redirection to the main page occurs in the \"Compliance & Legals\" section when '\n                   'clicking on the \"Spread\" link.'\n        )\n    \n>       link = apply_preconditions_to_link(d, cur_language, cur_country, cur_role, cur_login, cur_password)\n\ntests/US_55_ReTestsManual/tassobaccato/US_55-tassobaccato_ReTestsManual_test.py:992: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/conditions_v2.py:78: in apply_preconditions_to_link\n    return cond.preconditions(d, CapitalComPageSrc.URL_NEW, '', cur_language, cur_country, cur_role,\npages/conditions_v2.py:152: in preconditions\n    self.to_do_authorisation_new(d, host, cur_login, cur_password, cur_role)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.conditions_v2.NewConditions object at 0x7fb1b19facc0>\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"bbf925d4c1ca3adb186b059e598e341b\")>\nlink = 'https://capital.com/en-gb', login = 'test001.miketar+1@gmail.com'\npassword = 'Qwer1234-!@#$', cur_role = 'Auth'\n\n    @allure.step(f\"{datetime.now()}   Start Authorization\")\n    # @profile(precision=3)\n    def to_do_authorisation_new(self, d, link, login, password, cur_role):\n        \"\"\"Authorization\"\"\"\n        print(f\"\\n\" f\"{datetime.now()}   Start Authorization\")\n    \n        # Setup wait for later\n        menu = MainMenu(d, link)\n        assert login != \"\", \"Авторизация невозможна. Не указан e-mail\"\n        assert password != \"\", \"Авторизация невозможна. Не указан пароль\"\n    \n        # нажать в хедере на кнопку \"Log in\"\n        try:\n            menu.element_is_clickable(menu.MENU_LOGIN).click()\n        except:\n>           pytest.fail(\"Bug! 'Login' button is not clicked\")\nE           Failed: Bug! 'Login' button is not clicked\n\npages/conditions_v2.py:239: Failed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"d","time":{"start":1743293679618,"stop":1743293680865,"duration":1247},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"worker_id","time":{"start":1743293680865,"stop":1743293680865,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_login","time":{"start":1743293680865,"stop":1743293680865,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_password","time":{"start":1743293680865,"stop":1743293680865,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"\n        Check: Menu section [About] > Menu item [Compliance & Legals] > Click on the link  \"Spread\" in the “Spread” block\n        Language: EL\n        License: CYSEC\n        Author: Kasila\n        ","status":"failed","statusMessage":"Failed: Bug! 'Login' button is not clicked","statusTrace":"self = <pages.conditions_v2.NewConditions object at 0x7fb1b19facc0>\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"bbf925d4c1ca3adb186b059e598e341b\")>\nlink = 'https://capital.com/en-gb', login = 'test001.miketar+1@gmail.com'\npassword = 'Qwer1234-!@#$', cur_role = 'Auth'\n\n    @allure.step(f\"{datetime.now()}   Start Authorization\")\n    # @profile(precision=3)\n    def to_do_authorisation_new(self, d, link, login, password, cur_role):\n        \"\"\"Authorization\"\"\"\n        print(f\"\\n\" f\"{datetime.now()}   Start Authorization\")\n    \n        # Setup wait for later\n        menu = MainMenu(d, link)\n        assert login != \"\", \"Авторизация невозможна. Не указан e-mail\"\n        assert password != \"\", \"Авторизация невозможна. Не указан пароль\"\n    \n        # нажать в хедере на кнопку \"Log in\"\n        try:\n>           menu.element_is_clickable(menu.MENU_LOGIN).click()\n\npages/conditions_v2.py:237: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:380: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fb1b0ed7170>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#21 0x5646befc4e76 \\\\u003Cunknown>\\\\n#22 0x7fc307e9caa4 \\\\u003Cunknown>\\\\n#23 0x7fc307f29c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button class=\"accountBtns_btn__vOcCs accountBtns_btnEmpty__TCWRE helpers_showLg__UPEqH js-analyticsClick js-analyticsVisible\" data-type=\"btn_header_login\" data-testid=\"login_btn\">...</button> is not clickable at point (1385, 121). Other element would receive the click: <div class=\"modal_overlay__f_YlZ modal_mobileBottomAttached__cTOIu\">...</div>\nE         (Session info: chrome=134.0.6998.88)\nE       Stacktrace:\nE       #0 0x5646befc5ffa <unknown>\nE       #1 0x5646bea84970 <unknown>\nE       #2 0x5646beadd1ec <unknown>\nE       #3 0x5646beadb055 <unknown>\nE       #4 0x5646bead86f2 <unknown>\nE       #5 0x5646bead78ca <unknown>\nE       #6 0x5646beaca4cd <unknown>\nE       #7 0x5646beafc292 <unknown>\nE       #8 0x5646beac9e4a <unknown>\nE       #9 0x5646beafc45e <unknown>\nE       #10 0x5646beb2270c <unknown>\nE       #11 0x5646beafc063 <unknown>\nE       #12 0x5646beac8328 <unknown>\nE       #13 0x5646beac9491 <unknown>\nE       #14 0x5646bef8d42b <unknown>\nE       #15 0x5646bef912ec <unknown>\nE       #16 0x5646bef74a22 <unknown>\nE       #17 0x5646bef91e64 <unknown>\nE       #18 0x5646bef58bef <unknown>\nE       #19 0x5646befb4558 <unknown>\nE       #20 0x5646befb4736 <unknown>\nE       #21 0x5646befc4e76 <unknown>\nE       #22 0x7fc307e9caa4 <unknown>\nE       #23 0x7fc307f29c3c <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <US_55-tassobaccato_ReTestsManual_test.TestManualDetectedBugs object at 0x7fb1b1c9a570>\nworker_id = 'master'\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"bbf925d4c1ca3adb186b059e598e341b\")>\ncur_language = 'el', cur_country = 'gr', cur_role = 'Auth'\ncur_login = 'test001.miketar+1@gmail.com', cur_password = 'Qwer1234-!@#$'\n\n    @allure.step('Start retest manual AT_55!664  A redirection to the main page occurs in the \"Compliance & Legals\" '\n                 'section when clicking on the \"Spread\" link.')\n    @pytest.mark.parametrize('cur_language', ['el'])\n    @pytest.mark.parametrize('cur_country', ['gr'])\n    @pytest.mark.parametrize('cur_role', [\"NoReg\", \"Auth\", \"NoAuth\"])\n    @pytest.mark.bug_660\n    def test_664(self, worker_id, d, cur_language, cur_country, cur_role, cur_login, cur_password):\n        \"\"\"\n        Check: Menu section [About] > Menu item [Compliance & Legals] > Click on the link  \"Spread\" in the “Spread” block\n        Language: EL\n        License: CYSEC\n        Author: Kasila\n        \"\"\"\n    \n        bid = build_dynamic_arg_for_us_55(\n            d, worker_id, cur_language, cur_country, cur_role,\n            \"55\", \"ReTests of Manual Detected Bugs\",\n            \"664\", ' A redirection to the main page occurs in the \"Compliance & Legals\" section when '\n                   'clicking on the \"Spread\" link.'\n        )\n    \n>       link = apply_preconditions_to_link(d, cur_language, cur_country, cur_role, cur_login, cur_password)\n\ntests/US_55_ReTestsManual/tassobaccato/US_55-tassobaccato_ReTestsManual_test.py:992: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/conditions_v2.py:78: in apply_preconditions_to_link\n    return cond.preconditions(d, CapitalComPageSrc.URL_NEW, '', cur_language, cur_country, cur_role,\npages/conditions_v2.py:152: in preconditions\n    self.to_do_authorisation_new(d, host, cur_login, cur_password, cur_role)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.conditions_v2.NewConditions object at 0x7fb1b19facc0>\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"bbf925d4c1ca3adb186b059e598e341b\")>\nlink = 'https://capital.com/en-gb', login = 'test001.miketar+1@gmail.com'\npassword = 'Qwer1234-!@#$', cur_role = 'Auth'\n\n    @allure.step(f\"{datetime.now()}   Start Authorization\")\n    # @profile(precision=3)\n    def to_do_authorisation_new(self, d, link, login, password, cur_role):\n        \"\"\"Authorization\"\"\"\n        print(f\"\\n\" f\"{datetime.now()}   Start Authorization\")\n    \n        # Setup wait for later\n        menu = MainMenu(d, link)\n        assert login != \"\", \"Авторизация невозможна. Не указан e-mail\"\n        assert password != \"\", \"Авторизация невозможна. Не указан пароль\"\n    \n        # нажать в хедере на кнопку \"Log in\"\n        try:\n            menu.element_is_clickable(menu.MENU_LOGIN).click()\n        except:\n>           pytest.fail(\"Bug! 'Login' button is not clicked\")\nE           Failed: Bug! 'Login' button is not clicked\n\npages/conditions_v2.py:239: Failed","steps":[{"name":"Start retest manual AT_55!664  A redirection to the main page occurs in the \"Compliance & Legals\" section when clicking on the \"Spread\" link.","time":{"start":1743295423075,"stop":1743295431622,"duration":8547},"status":"failed","statusMessage":"Failed: Bug! 'Login' button is not clicked\n","statusTrace":"  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/tests/US_55_ReTestsManual/tassobaccato/US_55-tassobaccato_ReTestsManual_test.py\", line 992, in test_664\n    link = apply_preconditions_to_link(d, cur_language, cur_country, cur_role, cur_login, cur_password)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/conditions_v2.py\", line 78, in apply_preconditions_to_link\n    return cond.preconditions(d, CapitalComPageSrc.URL_NEW, '', cur_language, cur_country, cur_role,\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/conditions_v2.py\", line 152, in preconditions\n    self.to_do_authorisation_new(d, host, cur_login, cur_password, cur_role)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/conditions_v2.py\", line 239, in to_do_authorisation_new\n    pytest.fail(\"Bug! 'Login' button is not clicked\")\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/_pytest/outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n","steps":[{"name":"Build dynamic argument for TCs of US_55","time":{"start":1743295423076,"stop":1743295423077,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"bbf925d4c1ca3adb186b059e598e341b\")>"},{"name":"worker_id","value":"'master'"},{"name":"cur_language","value":"'el'"},{"name":"cur_country","value":"'gr'"},{"name":"cur_role","value":"'Auth'"},{"name":"us","value":"'55'"},{"name":"desc_us","value":"'ReTests of Manual Detected Bugs'"},{"name":"num_tc","value":"'664'"},{"name":"desc_tc","value":"' A redirection to the main page occurs in the \"Compliance & Legals\" section when clicking on the \"Spread\" link.'"},{"name":"manual","value":"False"},{"name":"new_layout","value":"False"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"   Set New preconditions","time":{"start":1743295423078,"stop":1743295431622,"duration":8544},"status":"failed","statusMessage":"Failed: Bug! 'Login' button is not clicked\n","statusTrace":"  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/conditions_v2.py\", line 152, in preconditions\n    self.to_do_authorisation_new(d, host, cur_login, cur_password, cur_role)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/conditions_v2.py\", line 239, in to_do_authorisation_new\n    pytest.fail(\"Bug! 'Login' button is not clicked\")\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/_pytest/outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n","steps":[{"name":"2025-03-30 00:14:39.578765   Start Authorization","time":{"start":1743295430552,"stop":1743295431621,"duration":1069},"status":"failed","statusMessage":"Failed: Bug! 'Login' button is not clicked\n","statusTrace":"  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/conditions_v2.py\", line 239, in to_do_authorisation_new\n    pytest.fail(\"Bug! 'Login' button is not clicked\")\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/_pytest/outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"bbf925d4c1ca3adb186b059e598e341b\")>"},{"name":"link","value":"'https://capital.com/en-gb'"},{"name":"login","value":"'test001.miketar+1@gmail.com'"},{"name":"password","value":"'Qwer1234-!@#$'"},{"name":"cur_role","value":"'Auth'"}],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"bbf925d4c1ca3adb186b059e598e341b\")>"},{"name":"host","value":"'https://capital.com/en-gb'"},{"name":"end_point","value":"''"},{"name":"cur_language","value":"'el'"},{"name":"cur_country","value":"'gr'"},{"name":"cur_role","value":"'Auth'"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"}],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"worker_id","value":"'master'"},{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"bbf925d4c1ca3adb186b059e598e341b\")>"},{"name":"cur_language","value":"'el'"},{"name":"cur_country","value":"'gr'"},{"name":"cur_role","value":"'Auth'"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"}],"shouldDisplayMessage":false,"stepsCount":3,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"44b178c3bf6ac86c","name":"Screenshot","source":"44b178c3bf6ac86c.png","type":"image/png","size":611008},{"uid":"39f63e7217f100f2","name":"stdout","source":"39f63e7217f100f2.txt","type":"text/plain","size":2239}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"d::0","time":{"start":1743295438675,"stop":1743295438989,"duration":314},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"epic","value":"TC_55!664 |  A redirection to the main page occurs in the \"Compliance & Legals\" section when clicking on the \"Spread\" link."},{"name":"feature","value":"Role: Auth"},{"name":"story","value":"Country: gr"},{"name":"tag","value":"bug_660"},{"name":"tag","value":"us_55"},{"name":"parentSuite","value":"tests.US_55_ReTestsManual.tassobaccato"},{"name":"suite","value":"US_55-tassobaccato_ReTestsManual_test"},{"name":"subSuite","value":"TestManualDetectedBugs"},{"name":"host","value":"fv-az2221-443"},{"name":"thread","value":"32480-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.US_55_ReTestsManual.tassobaccato.US_55-tassobaccato_ReTestsManual_test"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"cur_country","value":"'gr'"},{"name":"cur_language","value":"'el'"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"},{"name":"cur_role","value":"'Auth'"},{"name":"d","value":"'Chrome'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":22,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":22},"items":[{"uid":"d7e9b3cbf0577bcb","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/362//#testresult/d7e9b3cbf0577bcb","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1743208833826,"stop":1743208842151,"duration":8325}},{"uid":"b7c221792e72bc64","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/361//#testresult/b7c221792e72bc64","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1743122517942,"stop":1743122526243,"duration":8301}},{"uid":"3e73333bb7c5c368","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/360//#testresult/3e73333bb7c5c368","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1743035411491,"stop":1743035419849,"duration":8358}},{"uid":"7765157da7e0e31e","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/359//#testresult/7765157da7e0e31e","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742948916019,"stop":1742948924316,"duration":8297}},{"uid":"bda6c11c7cbee521","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/358//#testresult/bda6c11c7cbee521","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742862324719,"stop":1742862333312,"duration":8593}},{"uid":"60fc3bbe6c73072d","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/357//#testresult/60fc3bbe6c73072d","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742775995049,"stop":1742776003354,"duration":8305}},{"uid":"1e84c364b404e2c3","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/356//#testresult/1e84c364b404e2c3","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742690329841,"stop":1742690338291,"duration":8450}},{"uid":"c7d7d628bdb9fa78","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/355//#testresult/c7d7d628bdb9fa78","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742603966895,"stop":1742603975257,"duration":8362}},{"uid":"237c7ae855515427","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/354//#testresult/237c7ae855515427","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742516543834,"stop":1742516552223,"duration":8389}},{"uid":"e13fd5dc48af0c27","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/353//#testresult/e13fd5dc48af0c27","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742430182085,"stop":1742430190499,"duration":8414}},{"uid":"7286e0c3a3de546d","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/352//#testresult/7286e0c3a3de546d","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742343302217,"stop":1742343310836,"duration":8619}},{"uid":"749da6ff651270d7","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/351//#testresult/749da6ff651270d7","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742258444563,"stop":1742258452822,"duration":8259}},{"uid":"bd29de51709640b0","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/350//#testresult/bd29de51709640b0","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742171836232,"stop":1742171844531,"duration":8299}},{"uid":"f236504796844694","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/349//#testresult/f236504796844694","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742085753020,"stop":1742085761090,"duration":8070}},{"uid":"83703704d5f206c4","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/348//#testresult/83703704d5f206c4","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1741998289227,"stop":1741998297476,"duration":8249}},{"uid":"87ac89a61a0ef41e","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/347//#testresult/87ac89a61a0ef41e","status":"failed","statusDetails":"Failed: #Bug # 55!664 \nExpected result: The page “Χρεώσεις και προμήθειες” (Fees and Charges) with URL 'https://capital.com/el-gr/ways-to-trade/fees-and-charges' is displayed\nActual result: The page with URL 'https://capital.com/el/diaphora-spread--orismos' is displayed","time":{"start":1741917847965,"stop":1741917870234,"duration":22269}},{"uid":"793308cd83dec92f","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/346//#testresult/793308cd83dec92f","status":"failed","statusDetails":"Failed: #Bug # 55!664 \nExpected result: The page “Χρεώσεις και προμήθειες” (Fees and Charges) with URL 'https://capital.com/el-gr/ways-to-trade/fees-and-charges' is displayed\nActual result: The page with URL 'https://capital.com/el/diaphora-spread--orismos' is displayed","time":{"start":1741830701294,"stop":1741830723480,"duration":22186}},{"uid":"233141d44d94886f","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/345//#testresult/233141d44d94886f","status":"failed","statusDetails":"Failed: #Bug # 55!664 \nExpected result: The page “Χρεώσεις και προμήθειες” (Fees and Charges) with URL 'https://capital.com/el-gr/ways-to-trade/fees-and-charges' is displayed\nActual result: The page with URL 'https://capital.com/el/diaphora-spread--orismos' is displayed","time":{"start":1741750877147,"stop":1741750901638,"duration":24491}},{"uid":"77babe9d5abfb6e3","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/344//#testresult/77babe9d5abfb6e3","status":"failed","statusDetails":"Failed: #Bug # 55!664 \nExpected result: The page “Χρεώσεις και προμήθειες” (Fees and Charges) with URL 'https://capital.com/el-gr/ways-to-trade/fees-and-charges' is displayed\nActual result: The page with URL 'https://capital.com/el/diaphora-spread--orismos' is displayed","time":{"start":1741664779922,"stop":1741664803258,"duration":23336}},{"uid":"9682cba133f079d0","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/343//#testresult/9682cba133f079d0","status":"failed","statusDetails":"Failed: #Bug # 55!664 \nExpected result: The page “Χρεώσεις και προμήθειες” (Fees and Charges) with URL 'https://capital.com/el-gr/ways-to-trade/fees-and-charges' is displayed\nActual result: The page with URL 'https://capital.com/el/diaphora-spread--orismos' is displayed","time":{"start":1741571579446,"stop":1741571602281,"duration":22835}}]},"tags":["bug_660","us_55"]},"source":"81a69ccf7dc25f87.json","parameterValues":["'gr'","'el'","'test001.miketar+1@gmail.com'","'Qwer1234-!@#$'","'Auth'","'Chrome'"]}