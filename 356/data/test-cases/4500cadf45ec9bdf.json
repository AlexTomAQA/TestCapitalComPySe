{"uid":"4500cadf45ec9bdf","name":"TC_55!594 (Lang: de) | Bid:55!594-de.de.NoAuth","fullName":"tests.US_55_ReTestsManual.mila_podchasova.US_55-mila_podchasova_ReTestsManual_test.TestManualDetectedBugs#test_594_link_research_silver_cfd_eng_lang","historyId":"705ddf954725d85569963a34fcd21dce","time":{"start":1742691036806,"stop":1742691042685,"duration":5879},"description":"\n        Check:  Menu section  [Trading] (Trading) >\n                Menu item [Applications mobiles] (Mobile apps) >\n                Click the link “CFD” in the block\n                “Les applications mobiles de Capital.com” (Capital.com mobile apps) >\n\n        Language: FR, IT\n        License/Country: CYSEC\n        Role: NoReg, NoAuth, Auth\n        Author: podchasova11\n        ","descriptionHtml":"<pre><code>    Check:  Menu section  [Trading] (Trading) &gt;\n            Menu item [Applications mobiles] (Mobile apps) &gt;\n            Click the link “CFD” in the block\n            “Les applications mobiles de Capital.com” (Capital.com mobile apps) &gt;\n\n    Language: FR, IT\n    License/Country: CYSEC\n    Role: NoReg, NoAuth, Auth\n    Author: podchasova11\n</code></pre>\n","status":"failed","statusMessage":"Failed: Bug! 'Login' button is not clicked","statusTrace":"self = <pages.conditions_v2.NewConditions object at 0x7f1cf9df20c0>\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"e7702a5a70cb65d178e093042dde61fb\")>\nlink = 'https://capital.com/en-gb', login = 'test001.miketar+1@gmail.com'\npassword = 'Qwer1234-!@#$', cur_role = 'NoAuth'\n\n    @allure.step(f\"{datetime.now()}   Start Authorization\")\n    # @profile(precision=3)\n    def to_do_authorisation_new(self, d, link, login, password, cur_role):\n        \"\"\"Authorization\"\"\"\n        print(f\"\\n\" f\"{datetime.now()}   Start Authorization\")\n    \n        # Setup wait for later\n        menu = MainMenu(d, link)\n        assert login != \"\", \"Авторизация невозможна. Не указан e-mail\"\n        assert password != \"\", \"Авторизация невозможна. Не указан пароль\"\n    \n        # нажать в хедере на кнопку \"Log in\"\n        try:\n>           menu.element_is_clickable(menu.MENU_LOGIN).click()\n\npages/conditions_v2.py:237: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:380: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f1cf9f4d8b0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#21 0x56337e50de76 \\\\u003Cunknown>\\\\n#22 0x7f6e7a69caa4 \\\\u003Cunknown>\\\\n#23 0x7f6e7a729c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button class=\"accountBtns_btn__vOcCs accountBtns_btnEmpty__TCWRE helpers_showLg__UPEqH js-analyticsClick js-analyticsVisible\" data-type=\"btn_header_login\" data-testid=\"login_btn\">...</button> is not clickable at point (1385, 121). Other element would receive the click: <div class=\"modal_overlay__f_YlZ modal_mobileBottomAttached__cTOIu\">...</div>\nE         (Session info: chrome=134.0.6998.88)\nE       Stacktrace:\nE       #0 0x56337e50effa <unknown>\nE       #1 0x56337dfcd970 <unknown>\nE       #2 0x56337e0261ec <unknown>\nE       #3 0x56337e024055 <unknown>\nE       #4 0x56337e0216f2 <unknown>\nE       #5 0x56337e0208ca <unknown>\nE       #6 0x56337e0134cd <unknown>\nE       #7 0x56337e045292 <unknown>\nE       #8 0x56337e012e4a <unknown>\nE       #9 0x56337e04545e <unknown>\nE       #10 0x56337e06b70c <unknown>\nE       #11 0x56337e045063 <unknown>\nE       #12 0x56337e011328 <unknown>\nE       #13 0x56337e012491 <unknown>\nE       #14 0x56337e4d642b <unknown>\nE       #15 0x56337e4da2ec <unknown>\nE       #16 0x56337e4bda22 <unknown>\nE       #17 0x56337e4dae64 <unknown>\nE       #18 0x56337e4a1bef <unknown>\nE       #19 0x56337e4fd558 <unknown>\nE       #20 0x56337e4fd736 <unknown>\nE       #21 0x56337e50de76 <unknown>\nE       #22 0x7f6e7a69caa4 <unknown>\nE       #23 0x7f6e7a729c3c <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <US_55-mila_podchasova_ReTestsManual_test.TestManualDetectedBugs object at 0x7f1cf9f4d790>\nworker_id = 'master'\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"e7702a5a70cb65d178e093042dde61fb\")>\ncur_language = 'de', cur_country = 'de', cur_role = 'NoAuth'\ncur_login = 'test001.miketar+1@gmail.com', cur_password = 'Qwer1234-!@#$'\n\n    @allure.step(\"Start test of link “CFD” in the block 'Capital.com mobile apps' on the page 'Mobile apps'\")\n    @pytest.mark.parametrize('cur_language', ['de'])\n    @pytest.mark.parametrize('cur_country', ['de'])\n    @pytest.mark.parametrize('cur_role', [\"NoReg\", \"Auth\", \"NoAuth\"])\n    @pytest.mark.bug_594\n    def test_594_link_research_silver_cfd_eng_lang(\n            self, worker_id, d, cur_language, cur_country, cur_role, cur_login, cur_password):\n        \"\"\"\n        Check:  Menu section  [Trading] (Trading) >\n                Menu item [Applications mobiles] (Mobile apps) >\n                Click the link “CFD” in the block\n                “Les applications mobiles de Capital.com” (Capital.com mobile apps) >\n    \n        Language: FR, IT\n        License/Country: CYSEC\n        Role: NoReg, NoAuth, Auth\n        Author: podchasova11\n        \"\"\"\n    \n        bid = build_dynamic_arg_for_us_55(\n            d, worker_id, cur_language, cur_country, cur_role,\n            \"55\", \"ReTests of Manual Detected Bugs\",\n            \"594\",\n            \"Menu section [Trading] > Menu item [Mobile apps] >\"\n            \"Click the link [CFD] \",\n            False, True\n        )\n        # Arrange\n>       cur_item_link = apply_preconditions_to_link(d, cur_language, cur_country,\n                                                    cur_role, cur_login, cur_password)\n\ntests/US_55_ReTestsManual/mila_podchasova/US_55-mila_podchasova_ReTestsManual_test.py:634: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/conditions_v2.py:78: in apply_preconditions_to_link\n    return cond.preconditions(d, CapitalComPageSrc.URL_NEW, '', cur_language, cur_country, cur_role,\npages/conditions_v2.py:154: in preconditions\n    self.to_do_authorisation_new(d, host, cur_login, cur_password, cur_role)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.conditions_v2.NewConditions object at 0x7f1cf9df20c0>\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"e7702a5a70cb65d178e093042dde61fb\")>\nlink = 'https://capital.com/en-gb', login = 'test001.miketar+1@gmail.com'\npassword = 'Qwer1234-!@#$', cur_role = 'NoAuth'\n\n    @allure.step(f\"{datetime.now()}   Start Authorization\")\n    # @profile(precision=3)\n    def to_do_authorisation_new(self, d, link, login, password, cur_role):\n        \"\"\"Authorization\"\"\"\n        print(f\"\\n\" f\"{datetime.now()}   Start Authorization\")\n    \n        # Setup wait for later\n        menu = MainMenu(d, link)\n        assert login != \"\", \"Авторизация невозможна. Не указан e-mail\"\n        assert password != \"\", \"Авторизация невозможна. Не указан пароль\"\n    \n        # нажать в хедере на кнопку \"Log in\"\n        try:\n            menu.element_is_clickable(menu.MENU_LOGIN).click()\n        except:\n>           pytest.fail(\"Bug! 'Login' button is not clicked\")\nE           Failed: Bug! 'Login' button is not clicked\n\npages/conditions_v2.py:239: Failed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"d","time":{"start":1742690346863,"stop":1742690347673,"duration":810},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_login","time":{"start":1742690347673,"stop":1742690347673,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"worker_id","time":{"start":1742690347673,"stop":1742690347673,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_password","time":{"start":1742690347674,"stop":1742690347674,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_language","time":{"start":1742690481593,"stop":1742690481593,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"\n        Check:  Menu section  [Trading] (Trading) >\n                Menu item [Applications mobiles] (Mobile apps) >\n                Click the link “CFD” in the block\n                “Les applications mobiles de Capital.com” (Capital.com mobile apps) >\n\n        Language: FR, IT\n        License/Country: CYSEC\n        Role: NoReg, NoAuth, Auth\n        Author: podchasova11\n        ","status":"failed","statusMessage":"Failed: Bug! 'Login' button is not clicked","statusTrace":"self = <pages.conditions_v2.NewConditions object at 0x7f1cf9df20c0>\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"e7702a5a70cb65d178e093042dde61fb\")>\nlink = 'https://capital.com/en-gb', login = 'test001.miketar+1@gmail.com'\npassword = 'Qwer1234-!@#$', cur_role = 'NoAuth'\n\n    @allure.step(f\"{datetime.now()}   Start Authorization\")\n    # @profile(precision=3)\n    def to_do_authorisation_new(self, d, link, login, password, cur_role):\n        \"\"\"Authorization\"\"\"\n        print(f\"\\n\" f\"{datetime.now()}   Start Authorization\")\n    \n        # Setup wait for later\n        menu = MainMenu(d, link)\n        assert login != \"\", \"Авторизация невозможна. Не указан e-mail\"\n        assert password != \"\", \"Авторизация невозможна. Не указан пароль\"\n    \n        # нажать в хедере на кнопку \"Log in\"\n        try:\n>           menu.element_is_clickable(menu.MENU_LOGIN).click()\n\npages/conditions_v2.py:237: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:380: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f1cf9f4d8b0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#21 0x56337e50de76 \\\\u003Cunknown>\\\\n#22 0x7f6e7a69caa4 \\\\u003Cunknown>\\\\n#23 0x7f6e7a729c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button class=\"accountBtns_btn__vOcCs accountBtns_btnEmpty__TCWRE helpers_showLg__UPEqH js-analyticsClick js-analyticsVisible\" data-type=\"btn_header_login\" data-testid=\"login_btn\">...</button> is not clickable at point (1385, 121). Other element would receive the click: <div class=\"modal_overlay__f_YlZ modal_mobileBottomAttached__cTOIu\">...</div>\nE         (Session info: chrome=134.0.6998.88)\nE       Stacktrace:\nE       #0 0x56337e50effa <unknown>\nE       #1 0x56337dfcd970 <unknown>\nE       #2 0x56337e0261ec <unknown>\nE       #3 0x56337e024055 <unknown>\nE       #4 0x56337e0216f2 <unknown>\nE       #5 0x56337e0208ca <unknown>\nE       #6 0x56337e0134cd <unknown>\nE       #7 0x56337e045292 <unknown>\nE       #8 0x56337e012e4a <unknown>\nE       #9 0x56337e04545e <unknown>\nE       #10 0x56337e06b70c <unknown>\nE       #11 0x56337e045063 <unknown>\nE       #12 0x56337e011328 <unknown>\nE       #13 0x56337e012491 <unknown>\nE       #14 0x56337e4d642b <unknown>\nE       #15 0x56337e4da2ec <unknown>\nE       #16 0x56337e4bda22 <unknown>\nE       #17 0x56337e4dae64 <unknown>\nE       #18 0x56337e4a1bef <unknown>\nE       #19 0x56337e4fd558 <unknown>\nE       #20 0x56337e4fd736 <unknown>\nE       #21 0x56337e50de76 <unknown>\nE       #22 0x7f6e7a69caa4 <unknown>\nE       #23 0x7f6e7a729c3c <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <US_55-mila_podchasova_ReTestsManual_test.TestManualDetectedBugs object at 0x7f1cf9f4d790>\nworker_id = 'master'\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"e7702a5a70cb65d178e093042dde61fb\")>\ncur_language = 'de', cur_country = 'de', cur_role = 'NoAuth'\ncur_login = 'test001.miketar+1@gmail.com', cur_password = 'Qwer1234-!@#$'\n\n    @allure.step(\"Start test of link “CFD” in the block 'Capital.com mobile apps' on the page 'Mobile apps'\")\n    @pytest.mark.parametrize('cur_language', ['de'])\n    @pytest.mark.parametrize('cur_country', ['de'])\n    @pytest.mark.parametrize('cur_role', [\"NoReg\", \"Auth\", \"NoAuth\"])\n    @pytest.mark.bug_594\n    def test_594_link_research_silver_cfd_eng_lang(\n            self, worker_id, d, cur_language, cur_country, cur_role, cur_login, cur_password):\n        \"\"\"\n        Check:  Menu section  [Trading] (Trading) >\n                Menu item [Applications mobiles] (Mobile apps) >\n                Click the link “CFD” in the block\n                “Les applications mobiles de Capital.com” (Capital.com mobile apps) >\n    \n        Language: FR, IT\n        License/Country: CYSEC\n        Role: NoReg, NoAuth, Auth\n        Author: podchasova11\n        \"\"\"\n    \n        bid = build_dynamic_arg_for_us_55(\n            d, worker_id, cur_language, cur_country, cur_role,\n            \"55\", \"ReTests of Manual Detected Bugs\",\n            \"594\",\n            \"Menu section [Trading] > Menu item [Mobile apps] >\"\n            \"Click the link [CFD] \",\n            False, True\n        )\n        # Arrange\n>       cur_item_link = apply_preconditions_to_link(d, cur_language, cur_country,\n                                                    cur_role, cur_login, cur_password)\n\ntests/US_55_ReTestsManual/mila_podchasova/US_55-mila_podchasova_ReTestsManual_test.py:634: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/conditions_v2.py:78: in apply_preconditions_to_link\n    return cond.preconditions(d, CapitalComPageSrc.URL_NEW, '', cur_language, cur_country, cur_role,\npages/conditions_v2.py:154: in preconditions\n    self.to_do_authorisation_new(d, host, cur_login, cur_password, cur_role)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.conditions_v2.NewConditions object at 0x7f1cf9df20c0>\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"e7702a5a70cb65d178e093042dde61fb\")>\nlink = 'https://capital.com/en-gb', login = 'test001.miketar+1@gmail.com'\npassword = 'Qwer1234-!@#$', cur_role = 'NoAuth'\n\n    @allure.step(f\"{datetime.now()}   Start Authorization\")\n    # @profile(precision=3)\n    def to_do_authorisation_new(self, d, link, login, password, cur_role):\n        \"\"\"Authorization\"\"\"\n        print(f\"\\n\" f\"{datetime.now()}   Start Authorization\")\n    \n        # Setup wait for later\n        menu = MainMenu(d, link)\n        assert login != \"\", \"Авторизация невозможна. Не указан e-mail\"\n        assert password != \"\", \"Авторизация невозможна. Не указан пароль\"\n    \n        # нажать в хедере на кнопку \"Log in\"\n        try:\n            menu.element_is_clickable(menu.MENU_LOGIN).click()\n        except:\n>           pytest.fail(\"Bug! 'Login' button is not clicked\")\nE           Failed: Bug! 'Login' button is not clicked\n\npages/conditions_v2.py:239: Failed","steps":[{"name":"Start test of link “CFD” in the block 'Capital.com mobile apps' on the page 'Mobile apps'","time":{"start":1742691036806,"stop":1742691042684,"duration":5878},"status":"failed","statusMessage":"Failed: Bug! 'Login' button is not clicked\n","statusTrace":"  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/tests/US_55_ReTestsManual/mila_podchasova/US_55-mila_podchasova_ReTestsManual_test.py\", line 634, in test_594_link_research_silver_cfd_eng_lang\n    cur_item_link = apply_preconditions_to_link(d, cur_language, cur_country,\n                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/conditions_v2.py\", line 78, in apply_preconditions_to_link\n    return cond.preconditions(d, CapitalComPageSrc.URL_NEW, '', cur_language, cur_country, cur_role,\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/conditions_v2.py\", line 154, in preconditions\n    self.to_do_authorisation_new(d, host, cur_login, cur_password, cur_role)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/conditions_v2.py\", line 239, in to_do_authorisation_new\n    pytest.fail(\"Bug! 'Login' button is not clicked\")\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/_pytest/outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n","steps":[{"name":"Build dynamic argument for TCs of US_55","time":{"start":1742691036806,"stop":1742691036808,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"e7702a5a70cb65d178e093042dde61fb\")>"},{"name":"worker_id","value":"'master'"},{"name":"cur_language","value":"'de'"},{"name":"cur_country","value":"'de'"},{"name":"cur_role","value":"'NoAuth'"},{"name":"us","value":"'55'"},{"name":"desc_us","value":"'ReTests of Manual Detected Bugs'"},{"name":"num_tc","value":"'594'"},{"name":"desc_tc","value":"'Menu section [Trading] > Menu item [Mobile apps] >Click the link [CFD] '"},{"name":"manual","value":"False"},{"name":"new_layout","value":"True"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"   Set New preconditions","time":{"start":1742691036808,"stop":1742691042684,"duration":5876},"status":"failed","statusMessage":"Failed: Bug! 'Login' button is not clicked\n","statusTrace":"  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/conditions_v2.py\", line 154, in preconditions\n    self.to_do_authorisation_new(d, host, cur_login, cur_password, cur_role)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/conditions_v2.py\", line 239, in to_do_authorisation_new\n    pytest.fail(\"Bug! 'Login' button is not clicked\")\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/_pytest/outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n","steps":[{"name":"2025-03-23 00:39:06.847105   Start Authorization","time":{"start":1742691041605,"stop":1742691042683,"duration":1078},"status":"failed","statusMessage":"Failed: Bug! 'Login' button is not clicked\n","statusTrace":"  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/conditions_v2.py\", line 239, in to_do_authorisation_new\n    pytest.fail(\"Bug! 'Login' button is not clicked\")\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/_pytest/outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"e7702a5a70cb65d178e093042dde61fb\")>"},{"name":"link","value":"'https://capital.com/en-gb'"},{"name":"login","value":"'test001.miketar+1@gmail.com'"},{"name":"password","value":"'Qwer1234-!@#$'"},{"name":"cur_role","value":"'NoAuth'"}],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"e7702a5a70cb65d178e093042dde61fb\")>"},{"name":"host","value":"'https://capital.com/en-gb'"},{"name":"end_point","value":"''"},{"name":"cur_language","value":"'de'"},{"name":"cur_country","value":"'de'"},{"name":"cur_role","value":"'NoAuth'"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"}],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"worker_id","value":"'master'"},{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"e7702a5a70cb65d178e093042dde61fb\")>"},{"name":"cur_language","value":"'de'"},{"name":"cur_country","value":"'de'"},{"name":"cur_role","value":"'NoAuth'"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"}],"shouldDisplayMessage":false,"stepsCount":3,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"e2f1760b95f73a7b","name":"Screenshot","source":"e2f1760b95f73a7b.png","type":"image/png","size":611094},{"uid":"3c0f74c4cb1bc7b6","name":"stdout","source":"3c0f74c4cb1bc7b6.txt","type":"text/plain","size":2032}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"d::0","time":{"start":1742691043270,"stop":1742691043538,"duration":268},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"epic","value":"TC_55!594 | Menu section [Trading] > Menu item [Mobile apps] >Click the link [CFD] "},{"name":"feature","value":"Role: NoAuth"},{"name":"story","value":"Country: de"},{"name":"tag","value":"bug_594"},{"name":"tag","value":"us_55"},{"name":"parentSuite","value":"tests.US_55_ReTestsManual.mila_podchasova"},{"name":"suite","value":"US_55-mila_podchasova_ReTestsManual_test"},{"name":"subSuite","value":"TestManualDetectedBugs"},{"name":"host","value":"fv-az1335-371"},{"name":"thread","value":"43503-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.US_55_ReTestsManual.mila_podchasova.US_55-mila_podchasova_ReTestsManual_test"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"cur_country","value":"'de'"},{"name":"cur_language","value":"'de'"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"},{"name":"cur_role","value":"'NoAuth'"},{"name":"d","value":"'Chrome'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":15,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":15},"items":[{"uid":"7a4a04899175823b","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/355//#testresult/7a4a04899175823b","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742604560212,"stop":1742604566029,"duration":5817}},{"uid":"2bcc6d4435e37aa8","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/354//#testresult/2bcc6d4435e37aa8","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742517183441,"stop":1742517189267,"duration":5826}},{"uid":"5b7684d1b79f1675","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/353//#testresult/5b7684d1b79f1675","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742430663284,"stop":1742430669254,"duration":5970}},{"uid":"cd889d38410e44af","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/352//#testresult/cd889d38410e44af","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742343791839,"stop":1742343797916,"duration":6077}},{"uid":"356509652dd55bfc","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/351//#testresult/356509652dd55bfc","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742258926339,"stop":1742258932161,"duration":5822}},{"uid":"afeeedb9e466a453","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/350//#testresult/afeeedb9e466a453","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742172321069,"stop":1742172327009,"duration":5940}},{"uid":"f59a757fe1273ed3","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/349//#testresult/f59a757fe1273ed3","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742086374707,"stop":1742086380825,"duration":6118}},{"uid":"c493f0e9f7fe9a31","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/348//#testresult/c493f0e9f7fe9a31","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1741998870729,"stop":1741998876494,"duration":5765}},{"uid":"3bd1fdfa1cd644b8","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/347//#testresult/3bd1fdfa1cd644b8","status":"failed","statusDetails":"Failed: Bug # 594 Opened page have URL: https://capital.com/de-de/ways-to-trade/cfd-trading, and page opened in EN language","time":{"start":1741918763158,"stop":1741918785913,"duration":22755}},{"uid":"a03a997be8005704","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/346//#testresult/a03a997be8005704","status":"failed","statusDetails":"Failed: Bug # 594 Opened page have URL: https://capital.com/de-de/ways-to-trade/cfd-trading, and page opened in EN language","time":{"start":1741831639552,"stop":1741831662011,"duration":22459}},{"uid":"c3c59989e0c26f35","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/345//#testresult/c3c59989e0c26f35","status":"failed","statusDetails":"Failed: Bug # 594 Opened page have URL: https://capital.com/de-de/ways-to-trade/cfd-trading, and page opened in EN language","time":{"start":1741751893485,"stop":1741751916682,"duration":23197}},{"uid":"18c7c56cb1bfb986","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/344//#testresult/18c7c56cb1bfb986","status":"failed","statusDetails":"Failed: Bug # 594 Opened page have URL: https://capital.com/de-de/ways-to-trade/cfd-trading, and page opened in EN language","time":{"start":1741665791060,"stop":1741665814425,"duration":23365}},{"uid":"72bdea96d865494e","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/343//#testresult/72bdea96d865494e","status":"failed","statusDetails":"Failed: Bug # 594 Opened page have URL: https://capital.com/de-de/ways-to-trade/cfd-trading, and page opened in EN language","time":{"start":1741572563988,"stop":1741572586438,"duration":22450}},{"uid":"9c03cd2e86e5c5c2","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/342//#testresult/9c03cd2e86e5c5c2","status":"failed","statusDetails":"Failed: Bug # 594 Opened page have URL: https://capital.com/de-de/ways-to-trade/cfd-trading, and page opened in EN language","time":{"start":1741485667907,"stop":1741485690421,"duration":22514}}]},"tags":["bug_594","us_55"]},"source":"4500cadf45ec9bdf.json","parameterValues":["'de'","'de'","'test001.miketar+1@gmail.com'","'Qwer1234-!@#$'","'NoAuth'","'Chrome'"]}