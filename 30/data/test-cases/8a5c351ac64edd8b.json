{"uid":"8a5c351ac64edd8b","name":"TC_55!039 (Lang: en) | Bid:55!039-en.es.NoAuth","fullName":"tests.US_55_ReTestsManual.tassobaccato.US_55-tassobaccato_ReTestsManual_test.TestManualDetectedBugs#test_039","historyId":"3b9941b5cb48c3b7a07cf87c613a423d","time":{"start":1719682487820,"stop":1719682518009,"duration":30189},"description":"\n        Check: Filters application in the 'Live shares prices' widget\n        Language: All\n        License: CYSEC, SCB, ASIC\n        Author: Kasila\n        ","descriptionHtml":"<pre><code>    Check: Filters application in the 'Live shares prices' widget\n    Language: All\n    License: CYSEC, SCB, ASIC\n    Author: Kasila\n</code></pre>\n","status":"broken","statusMessage":"ValueError: Sample larger than population or is negative","statusTrace":"self = <US_55-tassobaccato_ReTestsManual_test.TestManualDetectedBugs object at 0x7f34cb836210>\nworker_id = 'master'\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"8bbafd26295cd63193b02fb5232cfec0\")>\ncur_language = '', cur_country = 'es', cur_role = 'NoAuth'\ncur_login = 'test001.miketar+1@gmail.com', cur_password = 'Qwer1234-!@#$'\n\n    @allure.step(\"Start retest manual TC_55!00_039 of filters application in the 'Live shares prices' widget\")\n    @pytest.mark.parametrize('cur_country', ['es', 'ua', 'au'])\n    @pytest.mark.parametrize('cur_role', [\"NoReg\", \"Auth\", \"NoAuth\"])\n    @pytest.mark.test_039\n    def test_039(self, worker_id, d, cur_language, cur_country, cur_role, cur_login, cur_password):\n        \"\"\"\n        Check: Filters application in the 'Live shares prices' widget\n        Language: All\n        License: CYSEC, SCB, ASIC\n        Author: Kasila\n        \"\"\"\n    \n        bid = build_dynamic_arg_for_us_55(\n            d, worker_id, cur_language, cur_country, cur_role,\n            \"55\", \"ReTests of Manual Detected Bugs\",\n            \"039\", \"Applied filters 'Region/Sectors' are not displayed after selecting an item from the \"\n                   \"'Most traded' dropdown in the 'Live shares prices'  widget on the 'Shares' page\"\n            )\n    \n        page_conditions = Conditions(d, \"\")\n        link = page_conditions.preconditions(\n            d, CapitalComPageSrc.URL, \"\", cur_language, cur_country, cur_role, cur_login, cur_password)\n    \n        menu = MenuSection(d, link)\n        cur_item_link = menu.open_shares_market_menu(d, cur_language, cur_country, link)\n    \n        test_element = AppliedFilters(d, cur_item_link, bid)\n>       test_element.full_test(d, cur_language, cur_country,cur_role, cur_item_link)\n\ntests/US_55_ReTestsManual/tassobaccato/US_55-tassobaccato_ReTestsManual_test.py:78: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/BugsManual/bag_039.py:23: in full_test\n    self.arrange_(d, cur_item_link)\npages/BugsManual/bag_039.py:52: in arrange_\n    sectors_random_list = random.sample(sectors_checkbox_list, 2)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <random.Random object at 0x55fad55fb6f0>, population = [], k = 2\n\n    def sample(self, population, k, *, counts=None):\n        \"\"\"Chooses k unique random elements from a population sequence.\n    \n        Returns a new list containing elements from the population while\n        leaving the original population unchanged.  The resulting list is\n        in selection order so that all sub-slices will also be valid random\n        samples.  This allows raffle winners (the sample) to be partitioned\n        into grand prize and second place winners (the subslices).\n    \n        Members of the population need not be hashable or unique.  If the\n        population contains repeats, then each occurrence is a possible\n        selection in the sample.\n    \n        Repeated elements can be specified one at a time or with the optional\n        counts parameter.  For example:\n    \n            sample(['red', 'blue'], counts=[4, 2], k=5)\n    \n        is equivalent to:\n    \n            sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)\n    \n        To choose a sample from a range of integers, use range() for the\n        population argument.  This is especially fast and space efficient\n        for sampling from a large population:\n    \n            sample(range(10000000), 60)\n    \n        \"\"\"\n    \n        # Sampling without replacement entails tracking either potential\n        # selections (the pool) in a list or previous selections in a set.\n    \n        # When the number of selections is small compared to the\n        # population, then tracking selections is efficient, requiring\n        # only a small set and an occasional reselection.  For\n        # a larger number of selections, the pool tracking method is\n        # preferred since the list takes less space than the\n        # set and it doesn't suffer from frequent reselections.\n    \n        # The number of calls to _randbelow() is kept at or near k, the\n        # theoretical minimum.  This is important because running time\n        # is dominated by _randbelow() and because it extracts the\n        # least entropy from the underlying random number generators.\n    \n        # Memory requirements are kept to the smaller of a k-length\n        # set or an n-length list.\n    \n        # There are other sampling algorithms that do not require\n        # auxiliary memory, but they were rejected because they made\n        # too many calls to _randbelow(), making them slower and\n        # causing them to eat more entropy than necessary.\n    \n        if not isinstance(population, _Sequence):\n            raise TypeError(\"Population must be a sequence.  \"\n                            \"For dicts or sets, use sorted(d).\")\n        n = len(population)\n        if counts is not None:\n            cum_counts = list(_accumulate(counts))\n            if len(cum_counts) != n:\n                raise ValueError('The number of counts does not match the population')\n            total = cum_counts.pop()\n            if not isinstance(total, int):\n                raise TypeError('Counts must be integers')\n            if total <= 0:\n                raise ValueError('Total of counts must be greater than zero')\n            selections = self.sample(range(total), k=k)\n            bisect = _bisect\n            return [population[bisect(cum_counts, s)] for s in selections]\n        randbelow = self._randbelow\n        if not 0 <= k <= n:\n>           raise ValueError(\"Sample larger than population or is negative\")\nE           ValueError: Sample larger than population or is negative\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/random.py:430: ValueError","flaky":true,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"d","time":{"start":1719682299518,"stop":1719682300607,"duration":1089},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_login","time":{"start":1719682300607,"stop":1719682300607,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_password","time":{"start":1719682300607,"stop":1719682300607,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"worker_id","time":{"start":1719682300607,"stop":1719682300607,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_language","time":{"start":1719682315737,"stop":1719682315737,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"\n        Check: Filters application in the 'Live shares prices' widget\n        Language: All\n        License: CYSEC, SCB, ASIC\n        Author: Kasila\n        ","status":"broken","statusMessage":"ValueError: Sample larger than population or is negative","statusTrace":"self = <US_55-tassobaccato_ReTestsManual_test.TestManualDetectedBugs object at 0x7f34cb836210>\nworker_id = 'master'\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"8bbafd26295cd63193b02fb5232cfec0\")>\ncur_language = '', cur_country = 'es', cur_role = 'NoAuth'\ncur_login = 'test001.miketar+1@gmail.com', cur_password = 'Qwer1234-!@#$'\n\n    @allure.step(\"Start retest manual TC_55!00_039 of filters application in the 'Live shares prices' widget\")\n    @pytest.mark.parametrize('cur_country', ['es', 'ua', 'au'])\n    @pytest.mark.parametrize('cur_role', [\"NoReg\", \"Auth\", \"NoAuth\"])\n    @pytest.mark.test_039\n    def test_039(self, worker_id, d, cur_language, cur_country, cur_role, cur_login, cur_password):\n        \"\"\"\n        Check: Filters application in the 'Live shares prices' widget\n        Language: All\n        License: CYSEC, SCB, ASIC\n        Author: Kasila\n        \"\"\"\n    \n        bid = build_dynamic_arg_for_us_55(\n            d, worker_id, cur_language, cur_country, cur_role,\n            \"55\", \"ReTests of Manual Detected Bugs\",\n            \"039\", \"Applied filters 'Region/Sectors' are not displayed after selecting an item from the \"\n                   \"'Most traded' dropdown in the 'Live shares prices'  widget on the 'Shares' page\"\n            )\n    \n        page_conditions = Conditions(d, \"\")\n        link = page_conditions.preconditions(\n            d, CapitalComPageSrc.URL, \"\", cur_language, cur_country, cur_role, cur_login, cur_password)\n    \n        menu = MenuSection(d, link)\n        cur_item_link = menu.open_shares_market_menu(d, cur_language, cur_country, link)\n    \n        test_element = AppliedFilters(d, cur_item_link, bid)\n>       test_element.full_test(d, cur_language, cur_country,cur_role, cur_item_link)\n\ntests/US_55_ReTestsManual/tassobaccato/US_55-tassobaccato_ReTestsManual_test.py:78: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/BugsManual/bag_039.py:23: in full_test\n    self.arrange_(d, cur_item_link)\npages/BugsManual/bag_039.py:52: in arrange_\n    sectors_random_list = random.sample(sectors_checkbox_list, 2)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <random.Random object at 0x55fad55fb6f0>, population = [], k = 2\n\n    def sample(self, population, k, *, counts=None):\n        \"\"\"Chooses k unique random elements from a population sequence.\n    \n        Returns a new list containing elements from the population while\n        leaving the original population unchanged.  The resulting list is\n        in selection order so that all sub-slices will also be valid random\n        samples.  This allows raffle winners (the sample) to be partitioned\n        into grand prize and second place winners (the subslices).\n    \n        Members of the population need not be hashable or unique.  If the\n        population contains repeats, then each occurrence is a possible\n        selection in the sample.\n    \n        Repeated elements can be specified one at a time or with the optional\n        counts parameter.  For example:\n    \n            sample(['red', 'blue'], counts=[4, 2], k=5)\n    \n        is equivalent to:\n    \n            sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)\n    \n        To choose a sample from a range of integers, use range() for the\n        population argument.  This is especially fast and space efficient\n        for sampling from a large population:\n    \n            sample(range(10000000), 60)\n    \n        \"\"\"\n    \n        # Sampling without replacement entails tracking either potential\n        # selections (the pool) in a list or previous selections in a set.\n    \n        # When the number of selections is small compared to the\n        # population, then tracking selections is efficient, requiring\n        # only a small set and an occasional reselection.  For\n        # a larger number of selections, the pool tracking method is\n        # preferred since the list takes less space than the\n        # set and it doesn't suffer from frequent reselections.\n    \n        # The number of calls to _randbelow() is kept at or near k, the\n        # theoretical minimum.  This is important because running time\n        # is dominated by _randbelow() and because it extracts the\n        # least entropy from the underlying random number generators.\n    \n        # Memory requirements are kept to the smaller of a k-length\n        # set or an n-length list.\n    \n        # There are other sampling algorithms that do not require\n        # auxiliary memory, but they were rejected because they made\n        # too many calls to _randbelow(), making them slower and\n        # causing them to eat more entropy than necessary.\n    \n        if not isinstance(population, _Sequence):\n            raise TypeError(\"Population must be a sequence.  \"\n                            \"For dicts or sets, use sorted(d).\")\n        n = len(population)\n        if counts is not None:\n            cum_counts = list(_accumulate(counts))\n            if len(cum_counts) != n:\n                raise ValueError('The number of counts does not match the population')\n            total = cum_counts.pop()\n            if not isinstance(total, int):\n                raise TypeError('Counts must be integers')\n            if total <= 0:\n                raise ValueError('Total of counts must be greater than zero')\n            selections = self.sample(range(total), k=k)\n            bisect = _bisect\n            return [population[bisect(cum_counts, s)] for s in selections]\n        randbelow = self._randbelow\n        if not 0 <= k <= n:\n>           raise ValueError(\"Sample larger than population or is negative\")\nE           ValueError: Sample larger than population or is negative\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/random.py:430: ValueError","steps":[{"name":"Start retest manual TC_55!00_039 of filters application in the 'Live shares prices' widget","time":{"start":1719682487820,"stop":1719682518008,"duration":30188},"status":"broken","statusMessage":"ValueError: Sample larger than population or is negative\n","statusTrace":"  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/tests/US_55_ReTestsManual/tassobaccato/US_55-tassobaccato_ReTestsManual_test.py\", line 78, in test_039\n    test_element.full_test(d, cur_language, cur_country,cur_role, cur_item_link)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/BugsManual/bag_039.py\", line 23, in full_test\n    self.arrange_(d, cur_item_link)\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/BugsManual/bag_039.py\", line 52, in arrange_\n    sectors_random_list = random.sample(sectors_checkbox_list, 2)\n                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/random.py\", line 430, in sample\n    raise ValueError(\"Sample larger than population or is negative\")\n","steps":[{"name":"Preconditions","time":{"start":1719682487822,"stop":1719682509517,"duration":21695},"status":"passed","steps":[{"name":"2024-06-29 17:31:39.491236   Start Checking Captcha","time":{"start":1719682489372,"stop":1719682490398,"duration":1026},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"2024-06-29 17:31:39.491236   Start Checking Captcha","time":{"start":1719682493276,"stop":1719682494302,"duration":1026},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Open 'Language and Country' menu section.","time":{"start":1719682494305,"stop":1719682495606,"duration":1301},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"test_language","value":"''"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Set country (licence)","time":{"start":1719682495606,"stop":1719682498300,"duration":2694},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"cur_country","value":"'es'"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"2024-06-29 17:31:39.491236   Start Checking Captcha","time":{"start":1719682498300,"stop":1719682499355,"duration":1055},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Open 'Language and Country' menu section.","time":{"start":1719682499357,"stop":1719682500656,"duration":1299},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"test_language","value":"''"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Set language","time":{"start":1719682500656,"stop":1719682502109,"duration":1453},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"cur_language","value":"''"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"2024-06-29 17:31:39.491236   Start Checking Captcha","time":{"start":1719682502109,"stop":1719682503138,"duration":1029},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Authorization","time":{"start":1719682503140,"stop":1719682507311,"duration":4171},"status":"passed","steps":[{"name":"Click [Log In] button","time":{"start":1719682503143,"stop":1719682503199,"duration":56},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Check that form [Login] is opened","time":{"start":1719682503199,"stop":1719682503940,"duration":741},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"8bbafd26295cd63193b02fb5232cfec0\")>"},{"name":"link","value":"'https://capital.com/'"},{"name":"cur_language","value":"''"},{"name":"login","value":"'test001.miketar+1@gmail.com'"},{"name":"password","value":"'Qwer1234-!@#$'"}],"shouldDisplayMessage":false,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"2024-06-29 17:31:39.507426   DeAuthorisation","time":{"start":1719682507313,"stop":1719682509514,"duration":2201},"status":"passed","steps":[{"name":"Click button [My account]","time":{"start":1719682507316,"stop":1719682509429,"duration":2113},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Click 'Logout' button","time":{"start":1719682509429,"stop":1719682509502,"duration":73},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"8bbafd26295cd63193b02fb5232cfec0\")>"},{"name":"link","value":"'https://capital.com/'"}],"shouldDisplayMessage":false,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"8bbafd26295cd63193b02fb5232cfec0\")>"},{"name":"host","value":"'https://capital.com/'"},{"name":"end_point","value":"''"},{"name":"cur_language","value":"''"},{"name":"cur_country","value":"'es'"},{"name":"cur_role","value":"'NoAuth'"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"}],"shouldDisplayMessage":false,"stepsCount":14,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Select \"Markets\" menu, \"Shares\" submenu click","time":{"start":1719682509517,"stop":1719682513407,"duration":3890},"status":"passed","steps":[{"name":"Focus moved to 'Markets' menu","time":{"start":1719682509525,"stop":1719682511619,"duration":2094},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"8bbafd26295cd63193b02fb5232cfec0\")>"},{"name":"test_language","value":"''"},{"name":"test_country","value":"'es'"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Focus move to 'Shares' submenu item and click","time":{"start":1719682511619,"stop":1719682513102,"duration":1483},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"8bbafd26295cd63193b02fb5232cfec0\")>"},{"name":"test_language","value":"''"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"8bbafd26295cd63193b02fb5232cfec0\")>"},{"name":"cur_language","value":"''"},{"name":"cur_country","value":"'es'"},{"name":"link","value":"'https://capital.com/'"}],"shouldDisplayMessage":false,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"2024-06-29 17:31:39.473381   Start full_test of display of applied filters","time":{"start":1719682513407,"stop":1719682517978,"duration":4571},"status":"broken","statusMessage":"ValueError: Sample larger than population or is negative\n","statusTrace":"  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/BugsManual/bag_039.py\", line 23, in full_test\n    self.arrange_(d, cur_item_link)\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/BugsManual/bag_039.py\", line 52, in arrange_\n    sectors_random_list = random.sample(sectors_checkbox_list, 2)\n                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/random.py\", line 430, in sample\n    raise ValueError(\"Sample larger than population or is negative\")\n","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"8bbafd26295cd63193b02fb5232cfec0\")>"},{"name":"cur_language","value":"''"},{"name":"cur_country","value":"'es'"},{"name":"cur_role","value":"'NoAuth'"},{"name":"cur_item_link","value":"'https://capital.com/live-share-prices'"}],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"worker_id","value":"'master'"},{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"8bbafd26295cd63193b02fb5232cfec0\")>"},{"name":"cur_language","value":"''"},{"name":"cur_country","value":"'es'"},{"name":"cur_role","value":"'NoAuth'"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"}],"shouldDisplayMessage":false,"stepsCount":19,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"7d5d8bab0b345af8","name":"Screenshot","source":"7d5d8bab0b345af8.png","type":"image/png","size":416284},{"uid":"ee6ec2a5f48738b7","name":"stdout","source":"ee6ec2a5f48738b7.txt","type":"text/plain","size":7631}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":20,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"d::0","time":{"start":1719682565134,"stop":1719682565281,"duration":147},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"epic","value":"TC_55!039 | Applied filters 'Region/Sectors' are not displayed after selecting an item from the 'Most traded' dropdown in the 'Live shares prices'  widget on the 'Shares' page"},{"name":"feature","value":"Role: NoAuth"},{"name":"story","value":"Country: es"},{"name":"tag","value":"test_039"},{"name":"tag","value":"us_55"},{"name":"parentSuite","value":"tests.US_55_ReTestsManual.tassobaccato"},{"name":"suite","value":"US_55-tassobaccato_ReTestsManual_test"},{"name":"subSuite","value":"TestManualDetectedBugs"},{"name":"host","value":"fv-az659-747"},{"name":"thread","value":"3389-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.US_55_ReTestsManual.tassobaccato.US_55-tassobaccato_ReTestsManual_test"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"cur_country","value":"'es'"},{"name":"cur_language","value":"''"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"},{"name":"cur_role","value":"'NoAuth'"},{"name":"d","value":"'Chrome'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":4,"broken":1,"skipped":0,"passed":1,"unknown":0,"total":6},"items":[{"uid":"9600e440378888f6","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/29//#testresult/9600e440378888f6","status":"passed","time":{"start":1719648249286,"stop":1719648299383,"duration":50097}},{"uid":"69c4749af169ef61","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/27//#testresult/69c4749af169ef61","status":"failed","statusDetails":"AssertionError: Bug#039. Expected result: applied filters \"Region/Sectors\" are displayed ['Japan', 'Norway', 'United States of America', 'Energy', 'ETFs']\nActual result: applied filters \"Region/Sectors\" are not displayed after selecting an item from the \"Most traded\" dropdown ['Japan', 'Norway', 'United States of America', 'Energy']","time":{"start":1719509726612,"stop":1719509779372,"duration":52760}},{"uid":"b8d3a6e3d1f8fc9d","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/26//#testresult/b8d3a6e3d1f8fc9d","status":"failed","statusDetails":"AssertionError: Bug#039. Expected result: applied filters \"Region/Sectors\" are displayed ['Switzerland']\nActual result: applied filters \"Region/Sectors\" are not displayed after selecting an item from the \"Most traded\" dropdown ['Switzerland', 'Telecommunications Services']","time":{"start":1719500897200,"stop":1719500947070,"duration":49870}},{"uid":"fb31625dfd093f91","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/25//#testresult/fb31625dfd093f91","status":"failed","statusDetails":"AssertionError: Bug#039. Expected result: applied filters \"Region/Sectors\" are displayed ['Italy', 'Netherlands', 'Sweden', 'Basic Materials', 'Technology']\nActual result: applied filters \"Region/Sectors\" are not displayed after selecting an item from the \"Most traded\" dropdown ['Italy', 'Netherlands', 'Sweden', 'Technology']","time":{"start":1719389385989,"stop":1719389420714,"duration":34725}},{"uid":"d240aa4638690448","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/24//#testresult/d240aa4638690448","status":"failed","statusDetails":"AssertionError: Bug#039. Expected result: applied filters \"Region/Sectors\" are displayed ['Belgium', 'Germany']\nActual result: applied filters \"Region/Sectors\" are not displayed after selecting an item from the \"Most traded\" dropdown ['Belgium', 'Germany', 'Ireland']","time":{"start":1719318971185,"stop":1719319004648,"duration":33463}}]},"tags":["test_039","us_55"]},"source":"8a5c351ac64edd8b.json","parameterValues":["'es'","''","'test001.miketar+1@gmail.com'","'Qwer1234-!@#$'","'NoAuth'","'Chrome'"]}