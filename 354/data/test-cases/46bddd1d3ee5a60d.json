{"uid":"46bddd1d3ee5a60d","name":"TC_55!444 (Lang: ar) | Bid:55!444-ar.ae.NoAuth","fullName":"tests.US_55_ReTestsManual.K_Alex_N.US_55_K_Alex_N_ReTestsManual_test.TestManualDetectedBugs#test_444","historyId":"d6efbc4054a5904e9cbb4876b8abd0c8","time":{"start":1742517323579,"stop":1742517332350,"duration":8771},"description":"\n         Check: Scroll down to the footer >\n                Click button \"البلد\" (Country) / \"اللغة\" (Language) >\n                Click the arrow button of the dropdown \"البلد\" (Country) in pop up window\n         Language: AR\n         License: SCA\n         Author: Aleksei Kurochkin\n         ","descriptionHtml":"<pre><code>     Check: Scroll down to the footer &gt;\n            Click button &quot;البلد&quot; (Country) / &quot;اللغة&quot; (Language) &gt;\n            Click the arrow button of the dropdown &quot;البلد&quot; (Country) in pop up window\n     Language: AR\n     License: SCA\n     Author: Aleksei Kurochkin\n</code></pre>\n","status":"failed","statusMessage":"Failed: Bug! 'Login' button is not clicked","statusTrace":"self = <pages.conditions_v2.NewConditions object at 0x7f2c80abf1d0>\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"9e1f852b0b6bc5e19469d5cbcc9c03e1\")>\nlink = 'https://capital.com/en-gb', login = 'test001.miketar+1@gmail.com'\npassword = 'Qwer1234-!@#$', cur_role = 'NoAuth'\n\n    @allure.step(f\"{datetime.now()}   Start Authorization\")\n    # @profile(precision=3)\n    def to_do_authorisation_new(self, d, link, login, password, cur_role):\n        \"\"\"Authorization\"\"\"\n        print(f\"\\n\" f\"{datetime.now()}   Start Authorization\")\n    \n        # Setup wait for later\n        menu = MainMenu(d, link)\n        assert login != \"\", \"Авторизация невозможна. Не указан e-mail\"\n        assert password != \"\", \"Авторизация невозможна. Не указан пароль\"\n    \n        # нажать в хедере на кнопку \"Log in\"\n        try:\n>           menu.element_is_clickable(menu.MENU_LOGIN).click()\n\npages/conditions_v2.py:237: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:380: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f2c80ea98e0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#21 0x558d0c32b8a6 \\\\u003Cunknown>\\\\n#22 0x7f97c089caa4 \\\\u003Cunknown>\\\\n#23 0x7f97c0929c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button class=\"accountBtns_btn__vOcCs accountBtns_btnEmpty__TCWRE helpers_showLg__UPEqH js-analyticsClick js-analyticsVisible\" data-type=\"btn_header_login\" data-testid=\"login_btn\">...</button> is not clickable at point (1385, 121). Other element would receive the click: <div class=\"modal_overlay__f_YlZ modal_mobileBottomAttached__cTOIu\">...</div>\nE         (Session info: chrome=134.0.6998.88)\nE       Stacktrace:\nE       #0 0x558d0c32ca2a <unknown>\nE       #1 0x558d0bde4390 <unknown>\nE       #2 0x558d0be3cafc <unknown>\nE       #3 0x558d0be3a95c <unknown>\nE       #4 0x558d0be37ff2 <unknown>\nE       #5 0x558d0be376f0 <unknown>\nE       #6 0x558d0be29e0d <unknown>\nE       #7 0x558d0be5bbd2 <unknown>\nE       #8 0x558d0be2978a <unknown>\nE       #9 0x558d0be5bd9e <unknown>\nE       #10 0x558d0be8207b <unknown>\nE       #11 0x558d0be5b9a3 <unknown>\nE       #12 0x558d0be2760e <unknown>\nE       #13 0x558d0be28dd1 <unknown>\nE       #14 0x558d0c2f2deb <unknown>\nE       #15 0x558d0c2f6ccc <unknown>\nE       #16 0x558d0c2da3a2 <unknown>\nE       #17 0x558d0c2f7844 <unknown>\nE       #18 0x558d0c2be1ff <unknown>\nE       #19 0x558d0c31b048 <unknown>\nE       #20 0x558d0c31b226 <unknown>\nE       #21 0x558d0c32b8a6 <unknown>\nE       #22 0x7f97c089caa4 <unknown>\nE       #23 0x7f97c0929c3c <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <US_55_K_Alex_N_ReTestsManual_test.TestManualDetectedBugs object at 0x7f2c80c39c40>\nworker_id = 'master'\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"9e1f852b0b6bc5e19469d5cbcc9c03e1\")>\ncur_language = 'ar', cur_country = 'ae', cur_role = 'NoAuth'\ncur_login = 'test001.miketar+1@gmail.com', cur_password = 'Qwer1234-!@#$'\n\n    @pytest.mark.parametrize('cur_language', ['ar'])\n    @pytest.mark.parametrize('cur_country', ['ae'])\n    @pytest.mark.parametrize('cur_role', ['NoAuth', 'NoReg'])\n    def test_444(self, worker_id, d, cur_language, cur_country, cur_role, cur_login, cur_password):\n        \"\"\"\n         Check: Scroll down to the footer >\n                Click button \"البلد\" (Country) / \"اللغة\" (Language) >\n                Click the arrow button of the dropdown \"البلد\" (Country) in pop up window\n         Language: AR\n         License: SCA\n         Author: Aleksei Kurochkin\n         \"\"\"\n        bid = build_dynamic_arg_for_us_55(\n            d, worker_id, cur_language, cur_country, cur_role,\n            \"55\", \"ReTests of Manual Detected Bugs\",\n            \"444\",\n            'Placeholder \"Country search\" is displayed in EN language '\n            'in the search field of dropdown \"البلد\" (Country) in the modal window '\n            '\"الإعدادات الإقليمية\" (Regional settings) when AR language and SCA license are selected',\n            False,\n            False\n        )\n    \n        # Arrange\n>       link = apply_preconditions_to_link(d, cur_language, cur_country, cur_role, cur_login, cur_password)\n\ntests/US_55_ReTestsManual/K_Alex_N/US_55_K_Alex_N_ReTestsManual_test.py:226: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/conditions_v2.py:78: in apply_preconditions_to_link\n    return cond.preconditions(d, CapitalComPageSrc.URL_NEW, '', cur_language, cur_country, cur_role,\npages/conditions_v2.py:154: in preconditions\n    self.to_do_authorisation_new(d, host, cur_login, cur_password, cur_role)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.conditions_v2.NewConditions object at 0x7f2c80abf1d0>\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"9e1f852b0b6bc5e19469d5cbcc9c03e1\")>\nlink = 'https://capital.com/en-gb', login = 'test001.miketar+1@gmail.com'\npassword = 'Qwer1234-!@#$', cur_role = 'NoAuth'\n\n    @allure.step(f\"{datetime.now()}   Start Authorization\")\n    # @profile(precision=3)\n    def to_do_authorisation_new(self, d, link, login, password, cur_role):\n        \"\"\"Authorization\"\"\"\n        print(f\"\\n\" f\"{datetime.now()}   Start Authorization\")\n    \n        # Setup wait for later\n        menu = MainMenu(d, link)\n        assert login != \"\", \"Авторизация невозможна. Не указан e-mail\"\n        assert password != \"\", \"Авторизация невозможна. Не указан пароль\"\n    \n        # нажать в хедере на кнопку \"Log in\"\n        try:\n            menu.element_is_clickable(menu.MENU_LOGIN).click()\n        except:\n>           pytest.fail(\"Bug! 'Login' button is not clicked\")\nE           Failed: Bug! 'Login' button is not clicked\n\npages/conditions_v2.py:239: Failed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"d","time":{"start":1742517191283,"stop":1742517192164,"duration":881},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"worker_id","time":{"start":1742517192164,"stop":1742517192164,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_login","time":{"start":1742517297335,"stop":1742517297335,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_password","time":{"start":1742517297335,"stop":1742517297335,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"\n         Check: Scroll down to the footer >\n                Click button \"البلد\" (Country) / \"اللغة\" (Language) >\n                Click the arrow button of the dropdown \"البلد\" (Country) in pop up window\n         Language: AR\n         License: SCA\n         Author: Aleksei Kurochkin\n         ","status":"failed","statusMessage":"Failed: Bug! 'Login' button is not clicked","statusTrace":"self = <pages.conditions_v2.NewConditions object at 0x7f2c80abf1d0>\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"9e1f852b0b6bc5e19469d5cbcc9c03e1\")>\nlink = 'https://capital.com/en-gb', login = 'test001.miketar+1@gmail.com'\npassword = 'Qwer1234-!@#$', cur_role = 'NoAuth'\n\n    @allure.step(f\"{datetime.now()}   Start Authorization\")\n    # @profile(precision=3)\n    def to_do_authorisation_new(self, d, link, login, password, cur_role):\n        \"\"\"Authorization\"\"\"\n        print(f\"\\n\" f\"{datetime.now()}   Start Authorization\")\n    \n        # Setup wait for later\n        menu = MainMenu(d, link)\n        assert login != \"\", \"Авторизация невозможна. Не указан e-mail\"\n        assert password != \"\", \"Авторизация невозможна. Не указан пароль\"\n    \n        # нажать в хедере на кнопку \"Log in\"\n        try:\n>           menu.element_is_clickable(menu.MENU_LOGIN).click()\n\npages/conditions_v2.py:237: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:380: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f2c80ea98e0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#21 0x558d0c32b8a6 \\\\u003Cunknown>\\\\n#22 0x7f97c089caa4 \\\\u003Cunknown>\\\\n#23 0x7f97c0929c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button class=\"accountBtns_btn__vOcCs accountBtns_btnEmpty__TCWRE helpers_showLg__UPEqH js-analyticsClick js-analyticsVisible\" data-type=\"btn_header_login\" data-testid=\"login_btn\">...</button> is not clickable at point (1385, 121). Other element would receive the click: <div class=\"modal_overlay__f_YlZ modal_mobileBottomAttached__cTOIu\">...</div>\nE         (Session info: chrome=134.0.6998.88)\nE       Stacktrace:\nE       #0 0x558d0c32ca2a <unknown>\nE       #1 0x558d0bde4390 <unknown>\nE       #2 0x558d0be3cafc <unknown>\nE       #3 0x558d0be3a95c <unknown>\nE       #4 0x558d0be37ff2 <unknown>\nE       #5 0x558d0be376f0 <unknown>\nE       #6 0x558d0be29e0d <unknown>\nE       #7 0x558d0be5bbd2 <unknown>\nE       #8 0x558d0be2978a <unknown>\nE       #9 0x558d0be5bd9e <unknown>\nE       #10 0x558d0be8207b <unknown>\nE       #11 0x558d0be5b9a3 <unknown>\nE       #12 0x558d0be2760e <unknown>\nE       #13 0x558d0be28dd1 <unknown>\nE       #14 0x558d0c2f2deb <unknown>\nE       #15 0x558d0c2f6ccc <unknown>\nE       #16 0x558d0c2da3a2 <unknown>\nE       #17 0x558d0c2f7844 <unknown>\nE       #18 0x558d0c2be1ff <unknown>\nE       #19 0x558d0c31b048 <unknown>\nE       #20 0x558d0c31b226 <unknown>\nE       #21 0x558d0c32b8a6 <unknown>\nE       #22 0x7f97c089caa4 <unknown>\nE       #23 0x7f97c0929c3c <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <US_55_K_Alex_N_ReTestsManual_test.TestManualDetectedBugs object at 0x7f2c80c39c40>\nworker_id = 'master'\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"9e1f852b0b6bc5e19469d5cbcc9c03e1\")>\ncur_language = 'ar', cur_country = 'ae', cur_role = 'NoAuth'\ncur_login = 'test001.miketar+1@gmail.com', cur_password = 'Qwer1234-!@#$'\n\n    @pytest.mark.parametrize('cur_language', ['ar'])\n    @pytest.mark.parametrize('cur_country', ['ae'])\n    @pytest.mark.parametrize('cur_role', ['NoAuth', 'NoReg'])\n    def test_444(self, worker_id, d, cur_language, cur_country, cur_role, cur_login, cur_password):\n        \"\"\"\n         Check: Scroll down to the footer >\n                Click button \"البلد\" (Country) / \"اللغة\" (Language) >\n                Click the arrow button of the dropdown \"البلد\" (Country) in pop up window\n         Language: AR\n         License: SCA\n         Author: Aleksei Kurochkin\n         \"\"\"\n        bid = build_dynamic_arg_for_us_55(\n            d, worker_id, cur_language, cur_country, cur_role,\n            \"55\", \"ReTests of Manual Detected Bugs\",\n            \"444\",\n            'Placeholder \"Country search\" is displayed in EN language '\n            'in the search field of dropdown \"البلد\" (Country) in the modal window '\n            '\"الإعدادات الإقليمية\" (Regional settings) when AR language and SCA license are selected',\n            False,\n            False\n        )\n    \n        # Arrange\n>       link = apply_preconditions_to_link(d, cur_language, cur_country, cur_role, cur_login, cur_password)\n\ntests/US_55_ReTestsManual/K_Alex_N/US_55_K_Alex_N_ReTestsManual_test.py:226: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/conditions_v2.py:78: in apply_preconditions_to_link\n    return cond.preconditions(d, CapitalComPageSrc.URL_NEW, '', cur_language, cur_country, cur_role,\npages/conditions_v2.py:154: in preconditions\n    self.to_do_authorisation_new(d, host, cur_login, cur_password, cur_role)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.conditions_v2.NewConditions object at 0x7f2c80abf1d0>\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"9e1f852b0b6bc5e19469d5cbcc9c03e1\")>\nlink = 'https://capital.com/en-gb', login = 'test001.miketar+1@gmail.com'\npassword = 'Qwer1234-!@#$', cur_role = 'NoAuth'\n\n    @allure.step(f\"{datetime.now()}   Start Authorization\")\n    # @profile(precision=3)\n    def to_do_authorisation_new(self, d, link, login, password, cur_role):\n        \"\"\"Authorization\"\"\"\n        print(f\"\\n\" f\"{datetime.now()}   Start Authorization\")\n    \n        # Setup wait for later\n        menu = MainMenu(d, link)\n        assert login != \"\", \"Авторизация невозможна. Не указан e-mail\"\n        assert password != \"\", \"Авторизация невозможна. Не указан пароль\"\n    \n        # нажать в хедере на кнопку \"Log in\"\n        try:\n            menu.element_is_clickable(menu.MENU_LOGIN).click()\n        except:\n>           pytest.fail(\"Bug! 'Login' button is not clicked\")\nE           Failed: Bug! 'Login' button is not clicked\n\npages/conditions_v2.py:239: Failed","steps":[{"name":"Build dynamic argument for TCs of US_55","time":{"start":1742517323579,"stop":1742517323580,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"9e1f852b0b6bc5e19469d5cbcc9c03e1\")>"},{"name":"worker_id","value":"'master'"},{"name":"cur_language","value":"'ar'"},{"name":"cur_country","value":"'ae'"},{"name":"cur_role","value":"'NoAuth'"},{"name":"us","value":"'55'"},{"name":"desc_us","value":"'ReTests of Manual Detected Bugs'"},{"name":"num_tc","value":"'444'"},{"name":"desc_tc","value":"'Placeholder \"Country search\" is displayed in EN language in the search field of dropdown \"البلد\" (Country) in the modal window \"الإعدادات الإقليمية\" (Regional settings) when AR language and SCA license are selected'"},{"name":"manual","value":"False"},{"name":"new_layout","value":"False"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"   Set New preconditions","time":{"start":1742517323580,"stop":1742517332349,"duration":8769},"status":"failed","statusMessage":"Failed: Bug! 'Login' button is not clicked\n","statusTrace":"  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/conditions_v2.py\", line 154, in preconditions\n    self.to_do_authorisation_new(d, host, cur_login, cur_password, cur_role)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/conditions_v2.py\", line 239, in to_do_authorisation_new\n    pytest.fail(\"Bug! 'Login' button is not clicked\")\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/_pytest/outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n","steps":[{"name":"2025-03-21 00:33:11.266043   Start Authorization","time":{"start":1742517331283,"stop":1742517332349,"duration":1066},"status":"failed","statusMessage":"Failed: Bug! 'Login' button is not clicked\n","statusTrace":"  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/conditions_v2.py\", line 239, in to_do_authorisation_new\n    pytest.fail(\"Bug! 'Login' button is not clicked\")\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/_pytest/outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"9e1f852b0b6bc5e19469d5cbcc9c03e1\")>"},{"name":"link","value":"'https://capital.com/en-gb'"},{"name":"login","value":"'test001.miketar+1@gmail.com'"},{"name":"password","value":"'Qwer1234-!@#$'"},{"name":"cur_role","value":"'NoAuth'"}],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"9e1f852b0b6bc5e19469d5cbcc9c03e1\")>"},{"name":"host","value":"'https://capital.com/en-gb'"},{"name":"end_point","value":"''"},{"name":"cur_language","value":"'ar'"},{"name":"cur_country","value":"'ae'"},{"name":"cur_role","value":"'NoAuth'"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"}],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"5be839779ca34a12","name":"Screenshot","source":"5be839779ca34a12.png","type":"image/png","size":611094},{"uid":"a2b81a42d0c4a047","name":"stdout","source":"a2b81a42d0c4a047.txt","type":"text/plain","size":2243}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":3,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"d::0","time":{"start":1742517392986,"stop":1742517393097,"duration":111},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"epic","value":"TC_55!444 | Placeholder \"Country search\" is displayed in EN language in the search field of dropdown \"البلد\" (Country) in the modal window \"الإعدادات الإقليمية\" (Regional settings) when AR language and SCA license are selected"},{"name":"feature","value":"Role: NoAuth"},{"name":"story","value":"Country: ae"},{"name":"tag","value":"us_55"},{"name":"parentSuite","value":"tests.US_55_ReTestsManual.K_Alex_N"},{"name":"suite","value":"US_55_K_Alex_N_ReTestsManual_test"},{"name":"subSuite","value":"TestManualDetectedBugs"},{"name":"host","value":"fv-az1319-872"},{"name":"thread","value":"44846-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.US_55_ReTestsManual.K_Alex_N.US_55_K_Alex_N_ReTestsManual_test"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"cur_country","value":"'ae'"},{"name":"cur_language","value":"'ar'"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"},{"name":"cur_role","value":"'NoAuth'"},{"name":"d","value":"'Chrome'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":13,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":13},"items":[{"uid":"950a47960b9e4a22","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/353//#testresult/950a47960b9e4a22","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742430769973,"stop":1742430778160,"duration":8187}},{"uid":"9eeed2411623740","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/352//#testresult/9eeed2411623740","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742343902091,"stop":1742343910414,"duration":8323}},{"uid":"ff27148f230e9242","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/351//#testresult/ff27148f230e9242","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742259055596,"stop":1742259063808,"duration":8212}},{"uid":"4481798f0078ea4e","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/350//#testresult/4481798f0078ea4e","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742172413804,"stop":1742172421994,"duration":8190}},{"uid":"45e359a1cc55a88a","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/349//#testresult/45e359a1cc55a88a","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742086504574,"stop":1742086512730,"duration":8156}},{"uid":"47dc626155413312","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/348//#testresult/47dc626155413312","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1741998976436,"stop":1741998984534,"duration":8098}},{"uid":"308985df5e64cd69","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/347//#testresult/308985df5e64cd69","status":"failed","statusDetails":"Failed: Bug # 55!444 The placeholder is \"Country search\" -> EN instead of AR","time":{"start":1741919132218,"stop":1741919146037,"duration":13819}},{"uid":"d0c5ac482aee35c4","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/346//#testresult/d0c5ac482aee35c4","status":"failed","statusDetails":"Failed: Bug # 55!444 The placeholder is \"Country search\" -> EN instead of AR","time":{"start":1741831982610,"stop":1741831999566,"duration":16956}},{"uid":"7847bfc9f1ece300","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/345//#testresult/7847bfc9f1ece300","status":"failed","statusDetails":"Failed: Bug # 55!444 The placeholder is \"Country search\" -> EN instead of AR","time":{"start":1741752233519,"stop":1741752248494,"duration":14975}},{"uid":"15bd09750d7b8454","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/344//#testresult/15bd09750d7b8454","status":"failed","statusDetails":"Failed: Bug # 55!444 The placeholder is \"Country search\" -> EN instead of AR","time":{"start":1741666136881,"stop":1741666152048,"duration":15167}},{"uid":"13283c9bf5cbba08","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/343//#testresult/13283c9bf5cbba08","status":"failed","statusDetails":"Failed: Bug # 55!444 The placeholder is \"Country search\" -> EN instead of AR","time":{"start":1741572889717,"stop":1741572904493,"duration":14776}},{"uid":"ca5fc08df96c6d28","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/342//#testresult/ca5fc08df96c6d28","status":"failed","statusDetails":"Failed: Bug # 55!444 The placeholder is \"Country search\" -> EN instead of AR","time":{"start":1741486001611,"stop":1741486015339,"duration":13728}}]},"tags":["us_55"]},"source":"46bddd1d3ee5a60d.json","parameterValues":["'ae'","'ar'","'test001.miketar+1@gmail.com'","'Qwer1234-!@#$'","'NoAuth'","'Chrome'"]}