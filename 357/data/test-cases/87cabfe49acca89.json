{"uid":"87cabfe49acca89","name":"TC_55!673 (Lang: ar) | Bid:55!673-ar.ae.Auth","fullName":"tests.US_55_ReTestsManual.artemdashkov.US_55-artemdashkov_ReTestsManual_test.TestManualDetected#test_673_link_learn_more_about_cryptocurrency_trading_on_the_cryptocurrencies_page","historyId":"b6aaece09fa0b8c7c452025108879578","time":{"start":1742771754781,"stop":1742771764319,"duration":9538},"description":"\n        Check:  Scroll to the link [Learn more about cryptocurrency trading]\n                in block \"Why trade cryptocurrencies with Capital.com?\" >\n                Click link [Learn more about cryptocurrency trading] >\n        Language: AR\n        License/Country: SCA\n        Role: NoReg, NoAuth, Auth\n        Author: Artem Dashkov\n        ","descriptionHtml":"<pre><code>    Check:  Scroll to the link [Learn more about cryptocurrency trading]\n            in block &quot;Why trade cryptocurrencies with Capital.com?&quot; &gt;\n            Click link [Learn more about cryptocurrency trading] &gt;\n    Language: AR\n    License/Country: SCA\n    Role: NoReg, NoAuth, Auth\n    Author: Artem Dashkov\n</code></pre>\n","status":"failed","statusMessage":"Failed: Bug! 'Login' button is not clicked","statusTrace":"self = <pages.conditions_v2.NewConditions object at 0x7f5de49da300>\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"93b4bb3d40fdcb144cb52610a1e51707\")>\nlink = 'https://capital.com/en-gb', login = 'test001.miketar+1@gmail.com'\npassword = 'Qwer1234-!@#$', cur_role = 'Auth'\n\n    @allure.step(f\"{datetime.now()}   Start Authorization\")\n    # @profile(precision=3)\n    def to_do_authorisation_new(self, d, link, login, password, cur_role):\n        \"\"\"Authorization\"\"\"\n        print(f\"\\n\" f\"{datetime.now()}   Start Authorization\")\n    \n        # Setup wait for later\n        menu = MainMenu(d, link)\n        assert login != \"\", \"Авторизация невозможна. Не указан e-mail\"\n        assert password != \"\", \"Авторизация невозможна. Не указан пароль\"\n    \n        # нажать в хедере на кнопку \"Log in\"\n        try:\n>           menu.element_is_clickable(menu.MENU_LOGIN).click()\n\npages/conditions_v2.py:237: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:380: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f5de555a720>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#21 0x55c193a53e76 \\\\u003Cunknown>\\\\n#22 0x7f4558e9caa4 \\\\u003Cunknown>\\\\n#23 0x7f4558f29c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button class=\"accountBtns_btn__vOcCs accountBtns_btnEmpty__TCWRE helpers_showLg__UPEqH js-analyticsClick js-analyticsVisible\" data-type=\"btn_header_login\" data-testid=\"login_btn\">...</button> is not clickable at point (1385, 121). Other element would receive the click: <div class=\"modal_overlay__f_YlZ modal_mobileBottomAttached__cTOIu\">...</div>\nE         (Session info: chrome=134.0.6998.88)\nE       Stacktrace:\nE       #0 0x55c193a54ffa <unknown>\nE       #1 0x55c193513970 <unknown>\nE       #2 0x55c19356c1ec <unknown>\nE       #3 0x55c19356a055 <unknown>\nE       #4 0x55c1935676f2 <unknown>\nE       #5 0x55c1935668ca <unknown>\nE       #6 0x55c1935594cd <unknown>\nE       #7 0x55c19358b292 <unknown>\nE       #8 0x55c193558e4a <unknown>\nE       #9 0x55c19358b45e <unknown>\nE       #10 0x55c1935b170c <unknown>\nE       #11 0x55c19358b063 <unknown>\nE       #12 0x55c193557328 <unknown>\nE       #13 0x55c193558491 <unknown>\nE       #14 0x55c193a1c42b <unknown>\nE       #15 0x55c193a202ec <unknown>\nE       #16 0x55c193a03a22 <unknown>\nE       #17 0x55c193a20e64 <unknown>\nE       #18 0x55c1939e7bef <unknown>\nE       #19 0x55c193a43558 <unknown>\nE       #20 0x55c193a43736 <unknown>\nE       #21 0x55c193a53e76 <unknown>\nE       #22 0x7f4558e9caa4 <unknown>\nE       #23 0x7f4558f29c3c <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <US_55-artemdashkov_ReTestsManual_test.TestManualDetected object at 0x7f5de53814c0>\nworker_id = 'master'\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"93b4bb3d40fdcb144cb52610a1e51707\")>\ncur_language = 'ar', cur_country = 'ae', cur_role = 'Auth'\ncur_login = 'test001.miketar+1@gmail.com', cur_password = 'Qwer1234-!@#$'\n\n    @allure.step(\"Start test of the link [Learn more about cryptocurrency trading] on the 'Cryptocurrencies' Page\")\n    @pytest.mark.parametrize('cur_language', [\"ar\"])\n    @pytest.mark.parametrize('cur_country', [\"ae\"])\n    @pytest.mark.parametrize('cur_role', [\"NoReg\", \"Auth\", \"NoAuth\"])\n    @pytest.mark.bug_673\n    def test_673_link_learn_more_about_cryptocurrency_trading_on_the_cryptocurrencies_page(\n            self, worker_id, d, cur_language, cur_country, cur_role, cur_login, cur_password):\n        \"\"\"\n        Check:  Scroll to the link [Learn more about cryptocurrency trading]\n                in block \"Why trade cryptocurrencies with Capital.com?\" >\n                Click link [Learn more about cryptocurrency trading] >\n        Language: AR\n        License/Country: SCA\n        Role: NoReg, NoAuth, Auth\n        Author: Artem Dashkov\n        \"\"\"\n    \n        bid = build_dynamic_arg_for_us_55(\n            d, worker_id, cur_language, cur_country, cur_role,\n            \"55\", \"ReTests of Manual Detected Bugs\",\n            \"673\",\n            \"Scroll to the link [Learn more about cryptocurrency trading] \"\n            \"in block 'Why trade cryptocurrencies with Capital.com?' >\"\n            \"Click link [Learn more about cryptocurrency trading].\",\n            False, True\n        )\n        # Arrange\n>       cur_item_link = apply_preconditions_to_link(d, cur_language, cur_country, cur_role, cur_login, cur_password)\n\ntests/US_55_ReTestsManual/artemdashkov/US_55-artemdashkov_ReTestsManual_test.py:2037: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/conditions_v2.py:78: in apply_preconditions_to_link\n    return cond.preconditions(d, CapitalComPageSrc.URL_NEW, '', cur_language, cur_country, cur_role,\npages/conditions_v2.py:152: in preconditions\n    self.to_do_authorisation_new(d, host, cur_login, cur_password, cur_role)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.conditions_v2.NewConditions object at 0x7f5de49da300>\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"93b4bb3d40fdcb144cb52610a1e51707\")>\nlink = 'https://capital.com/en-gb', login = 'test001.miketar+1@gmail.com'\npassword = 'Qwer1234-!@#$', cur_role = 'Auth'\n\n    @allure.step(f\"{datetime.now()}   Start Authorization\")\n    # @profile(precision=3)\n    def to_do_authorisation_new(self, d, link, login, password, cur_role):\n        \"\"\"Authorization\"\"\"\n        print(f\"\\n\" f\"{datetime.now()}   Start Authorization\")\n    \n        # Setup wait for later\n        menu = MainMenu(d, link)\n        assert login != \"\", \"Авторизация невозможна. Не указан e-mail\"\n        assert password != \"\", \"Авторизация невозможна. Не указан пароль\"\n    \n        # нажать в хедере на кнопку \"Log in\"\n        try:\n            menu.element_is_clickable(menu.MENU_LOGIN).click()\n        except:\n>           pytest.fail(\"Bug! 'Login' button is not clicked\")\nE           Failed: Bug! 'Login' button is not clicked\n\npages/conditions_v2.py:239: Failed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"d","time":{"start":1742769191394,"stop":1742769192166,"duration":772},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"worker_id","time":{"start":1742769192166,"stop":1742769192166,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_password","time":{"start":1742769192166,"stop":1742769192166,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_login","time":{"start":1742769192166,"stop":1742769192166,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"\n        Check:  Scroll to the link [Learn more about cryptocurrency trading]\n                in block \"Why trade cryptocurrencies with Capital.com?\" >\n                Click link [Learn more about cryptocurrency trading] >\n        Language: AR\n        License/Country: SCA\n        Role: NoReg, NoAuth, Auth\n        Author: Artem Dashkov\n        ","status":"failed","statusMessage":"Failed: Bug! 'Login' button is not clicked","statusTrace":"self = <pages.conditions_v2.NewConditions object at 0x7f5de49da300>\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"93b4bb3d40fdcb144cb52610a1e51707\")>\nlink = 'https://capital.com/en-gb', login = 'test001.miketar+1@gmail.com'\npassword = 'Qwer1234-!@#$', cur_role = 'Auth'\n\n    @allure.step(f\"{datetime.now()}   Start Authorization\")\n    # @profile(precision=3)\n    def to_do_authorisation_new(self, d, link, login, password, cur_role):\n        \"\"\"Authorization\"\"\"\n        print(f\"\\n\" f\"{datetime.now()}   Start Authorization\")\n    \n        # Setup wait for later\n        menu = MainMenu(d, link)\n        assert login != \"\", \"Авторизация невозможна. Не указан e-mail\"\n        assert password != \"\", \"Авторизация невозможна. Не указан пароль\"\n    \n        # нажать в хедере на кнопку \"Log in\"\n        try:\n>           menu.element_is_clickable(menu.MENU_LOGIN).click()\n\npages/conditions_v2.py:237: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:380: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f5de555a720>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#21 0x55c193a53e76 \\\\u003Cunknown>\\\\n#22 0x7f4558e9caa4 \\\\u003Cunknown>\\\\n#23 0x7f4558f29c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button class=\"accountBtns_btn__vOcCs accountBtns_btnEmpty__TCWRE helpers_showLg__UPEqH js-analyticsClick js-analyticsVisible\" data-type=\"btn_header_login\" data-testid=\"login_btn\">...</button> is not clickable at point (1385, 121). Other element would receive the click: <div class=\"modal_overlay__f_YlZ modal_mobileBottomAttached__cTOIu\">...</div>\nE         (Session info: chrome=134.0.6998.88)\nE       Stacktrace:\nE       #0 0x55c193a54ffa <unknown>\nE       #1 0x55c193513970 <unknown>\nE       #2 0x55c19356c1ec <unknown>\nE       #3 0x55c19356a055 <unknown>\nE       #4 0x55c1935676f2 <unknown>\nE       #5 0x55c1935668ca <unknown>\nE       #6 0x55c1935594cd <unknown>\nE       #7 0x55c19358b292 <unknown>\nE       #8 0x55c193558e4a <unknown>\nE       #9 0x55c19358b45e <unknown>\nE       #10 0x55c1935b170c <unknown>\nE       #11 0x55c19358b063 <unknown>\nE       #12 0x55c193557328 <unknown>\nE       #13 0x55c193558491 <unknown>\nE       #14 0x55c193a1c42b <unknown>\nE       #15 0x55c193a202ec <unknown>\nE       #16 0x55c193a03a22 <unknown>\nE       #17 0x55c193a20e64 <unknown>\nE       #18 0x55c1939e7bef <unknown>\nE       #19 0x55c193a43558 <unknown>\nE       #20 0x55c193a43736 <unknown>\nE       #21 0x55c193a53e76 <unknown>\nE       #22 0x7f4558e9caa4 <unknown>\nE       #23 0x7f4558f29c3c <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <US_55-artemdashkov_ReTestsManual_test.TestManualDetected object at 0x7f5de53814c0>\nworker_id = 'master'\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"93b4bb3d40fdcb144cb52610a1e51707\")>\ncur_language = 'ar', cur_country = 'ae', cur_role = 'Auth'\ncur_login = 'test001.miketar+1@gmail.com', cur_password = 'Qwer1234-!@#$'\n\n    @allure.step(\"Start test of the link [Learn more about cryptocurrency trading] on the 'Cryptocurrencies' Page\")\n    @pytest.mark.parametrize('cur_language', [\"ar\"])\n    @pytest.mark.parametrize('cur_country', [\"ae\"])\n    @pytest.mark.parametrize('cur_role', [\"NoReg\", \"Auth\", \"NoAuth\"])\n    @pytest.mark.bug_673\n    def test_673_link_learn_more_about_cryptocurrency_trading_on_the_cryptocurrencies_page(\n            self, worker_id, d, cur_language, cur_country, cur_role, cur_login, cur_password):\n        \"\"\"\n        Check:  Scroll to the link [Learn more about cryptocurrency trading]\n                in block \"Why trade cryptocurrencies with Capital.com?\" >\n                Click link [Learn more about cryptocurrency trading] >\n        Language: AR\n        License/Country: SCA\n        Role: NoReg, NoAuth, Auth\n        Author: Artem Dashkov\n        \"\"\"\n    \n        bid = build_dynamic_arg_for_us_55(\n            d, worker_id, cur_language, cur_country, cur_role,\n            \"55\", \"ReTests of Manual Detected Bugs\",\n            \"673\",\n            \"Scroll to the link [Learn more about cryptocurrency trading] \"\n            \"in block 'Why trade cryptocurrencies with Capital.com?' >\"\n            \"Click link [Learn more about cryptocurrency trading].\",\n            False, True\n        )\n        # Arrange\n>       cur_item_link = apply_preconditions_to_link(d, cur_language, cur_country, cur_role, cur_login, cur_password)\n\ntests/US_55_ReTestsManual/artemdashkov/US_55-artemdashkov_ReTestsManual_test.py:2037: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/conditions_v2.py:78: in apply_preconditions_to_link\n    return cond.preconditions(d, CapitalComPageSrc.URL_NEW, '', cur_language, cur_country, cur_role,\npages/conditions_v2.py:152: in preconditions\n    self.to_do_authorisation_new(d, host, cur_login, cur_password, cur_role)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.conditions_v2.NewConditions object at 0x7f5de49da300>\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"93b4bb3d40fdcb144cb52610a1e51707\")>\nlink = 'https://capital.com/en-gb', login = 'test001.miketar+1@gmail.com'\npassword = 'Qwer1234-!@#$', cur_role = 'Auth'\n\n    @allure.step(f\"{datetime.now()}   Start Authorization\")\n    # @profile(precision=3)\n    def to_do_authorisation_new(self, d, link, login, password, cur_role):\n        \"\"\"Authorization\"\"\"\n        print(f\"\\n\" f\"{datetime.now()}   Start Authorization\")\n    \n        # Setup wait for later\n        menu = MainMenu(d, link)\n        assert login != \"\", \"Авторизация невозможна. Не указан e-mail\"\n        assert password != \"\", \"Авторизация невозможна. Не указан пароль\"\n    \n        # нажать в хедере на кнопку \"Log in\"\n        try:\n            menu.element_is_clickable(menu.MENU_LOGIN).click()\n        except:\n>           pytest.fail(\"Bug! 'Login' button is not clicked\")\nE           Failed: Bug! 'Login' button is not clicked\n\npages/conditions_v2.py:239: Failed","steps":[{"name":"Start test of the link [Learn more about cryptocurrency trading] on the 'Cryptocurrencies' Page","time":{"start":1742771754781,"stop":1742771764318,"duration":9537},"status":"failed","statusMessage":"Failed: Bug! 'Login' button is not clicked\n","statusTrace":"  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/tests/US_55_ReTestsManual/artemdashkov/US_55-artemdashkov_ReTestsManual_test.py\", line 2037, in test_673_link_learn_more_about_cryptocurrency_trading_on_the_cryptocurrencies_page\n    cur_item_link = apply_preconditions_to_link(d, cur_language, cur_country, cur_role, cur_login, cur_password)\n                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/conditions_v2.py\", line 78, in apply_preconditions_to_link\n    return cond.preconditions(d, CapitalComPageSrc.URL_NEW, '', cur_language, cur_country, cur_role,\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/conditions_v2.py\", line 152, in preconditions\n    self.to_do_authorisation_new(d, host, cur_login, cur_password, cur_role)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/conditions_v2.py\", line 239, in to_do_authorisation_new\n    pytest.fail(\"Bug! 'Login' button is not clicked\")\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/_pytest/outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n","steps":[{"name":"Build dynamic argument for TCs of US_55","time":{"start":1742771754781,"stop":1742771754783,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"93b4bb3d40fdcb144cb52610a1e51707\")>"},{"name":"worker_id","value":"'master'"},{"name":"cur_language","value":"'ar'"},{"name":"cur_country","value":"'ae'"},{"name":"cur_role","value":"'Auth'"},{"name":"us","value":"'55'"},{"name":"desc_us","value":"'ReTests of Manual Detected Bugs'"},{"name":"num_tc","value":"'673'"},{"name":"desc_tc","value":"'Scroll to the link [Learn more about cryptocurrency trading] in block 'Why trade cryptocurrencies with Capital.com?' >Click link [Learn more about cryptocurrency trading].'"},{"name":"manual","value":"False"},{"name":"new_layout","value":"True"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"   Set New preconditions","time":{"start":1742771754783,"stop":1742771764317,"duration":9534},"status":"failed","statusMessage":"Failed: Bug! 'Login' button is not clicked\n","statusTrace":"  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/conditions_v2.py\", line 152, in preconditions\n    self.to_do_authorisation_new(d, host, cur_login, cur_password, cur_role)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/conditions_v2.py\", line 239, in to_do_authorisation_new\n    pytest.fail(\"Bug! 'Login' button is not clicked\")\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/_pytest/outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n","steps":[{"name":"2025-03-23 22:33:11.341250   Start Authorization","time":{"start":1742771763236,"stop":1742771764317,"duration":1081},"status":"failed","statusMessage":"Failed: Bug! 'Login' button is not clicked\n","statusTrace":"  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/conditions_v2.py\", line 239, in to_do_authorisation_new\n    pytest.fail(\"Bug! 'Login' button is not clicked\")\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/_pytest/outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"93b4bb3d40fdcb144cb52610a1e51707\")>"},{"name":"link","value":"'https://capital.com/en-gb'"},{"name":"login","value":"'test001.miketar+1@gmail.com'"},{"name":"password","value":"'Qwer1234-!@#$'"},{"name":"cur_role","value":"'Auth'"}],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"93b4bb3d40fdcb144cb52610a1e51707\")>"},{"name":"host","value":"'https://capital.com/en-gb'"},{"name":"end_point","value":"''"},{"name":"cur_language","value":"'ar'"},{"name":"cur_country","value":"'ae'"},{"name":"cur_role","value":"'Auth'"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"}],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"worker_id","value":"'master'"},{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"93b4bb3d40fdcb144cb52610a1e51707\")>"},{"name":"cur_language","value":"'ar'"},{"name":"cur_country","value":"'ae'"},{"name":"cur_role","value":"'Auth'"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"}],"shouldDisplayMessage":false,"stepsCount":3,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"6ecf10133ca37ace","name":"Screenshot","source":"6ecf10133ca37ace.png","type":"image/png","size":611094},{"uid":"9915bf4a204b53cd","name":"stdout","source":"9915bf4a204b53cd.txt","type":"text/plain","size":2239}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"d::0","time":{"start":1742771848965,"stop":1742771849310,"duration":345},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"epic","value":"TC_55!673 | Scroll to the link [Learn more about cryptocurrency trading] in block 'Why trade cryptocurrencies with Capital.com?' >Click link [Learn more about cryptocurrency trading]."},{"name":"feature","value":"Role: Auth"},{"name":"story","value":"Country: ae"},{"name":"tag","value":"bug_673"},{"name":"tag","value":"us_55"},{"name":"parentSuite","value":"tests.US_55_ReTestsManual.artemdashkov"},{"name":"suite","value":"US_55-artemdashkov_ReTestsManual_test"},{"name":"subSuite","value":"TestManualDetected"},{"name":"host","value":"fv-az1390-567"},{"name":"thread","value":"5511-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.US_55_ReTestsManual.artemdashkov.US_55-artemdashkov_ReTestsManual_test"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"cur_country","value":"'ae'"},{"name":"cur_language","value":"'ar'"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"},{"name":"cur_role","value":"'Auth'"},{"name":"d","value":"'Chrome'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":16,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":16},"items":[{"uid":"61b18ff6f9d1fb57","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/356//#testresult/61b18ff6f9d1fb57","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742685720063,"stop":1742685728468,"duration":8405}},{"uid":"79eb8ba7d3cb934a","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/355//#testresult/79eb8ba7d3cb934a","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742599431447,"stop":1742599439846,"duration":8399}},{"uid":"acf151991e68628b","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/354//#testresult/acf151991e68628b","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742512022080,"stop":1742512030540,"duration":8460}},{"uid":"658f1a62410bc247","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/353//#testresult/658f1a62410bc247","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742425581832,"stop":1742425590042,"duration":8210}},{"uid":"ec6ed48e658c681d","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/352//#testresult/ec6ed48e658c681d","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742338701280,"stop":1742338709833,"duration":8553}},{"uid":"b81a0c86614a3f9","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/351//#testresult/b81a0c86614a3f9","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742254027226,"stop":1742254035611,"duration":8385}},{"uid":"5861a2e6fc2ee2af","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/350//#testresult/5861a2e6fc2ee2af","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742167403644,"stop":1742167411900,"duration":8256}},{"uid":"baf6f2a07da8559c","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/349//#testresult/baf6f2a07da8559c","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742081294503,"stop":1742081302870,"duration":8367}},{"uid":"361ae164bdc8896b","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/348//#testresult/361ae164bdc8896b","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1741993788249,"stop":1741993796542,"duration":8293}},{"uid":"2da59244c4c3f53a","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/347//#testresult/2da59244c4c3f53a","status":"failed","statusDetails":"Failed: Instead 'Expected' page opened other page. Expected_page is 'https://capital.com/ar-ae/learn/market-guides/what-is-cryptocurrency-trading', current page is 'https://ar-ae/learn/market-guides/what-is-cryptocurrency-trading'","time":{"start":1741909791714,"stop":1741909814044,"duration":22330}},{"uid":"9573f8d38e3f6f51","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/346//#testresult/9573f8d38e3f6f51","status":"failed","statusDetails":"Failed: Instead 'Expected' page opened other page. Expected_page is 'https://capital.com/ar-ae/learn/market-guides/what-is-cryptocurrency-trading', current page is 'https://ar-ae/learn/market-guides/what-is-cryptocurrency-trading'","time":{"start":1741822800781,"stop":1741822823661,"duration":22880}},{"uid":"ce59140f2737d41f","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/345//#testresult/ce59140f2737d41f","status":"failed","statusDetails":"Failed: Instead 'Expected' page opened other page. Expected_page is 'https://capital.com/ar-ae/learn/market-guides/what-is-cryptocurrency-trading', current page is 'https://ar-ae/learn/market-guides/what-is-cryptocurrency-trading'","time":{"start":1741736109879,"stop":1741736132579,"duration":22700}},{"uid":"dc958bd790af297a","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/344//#testresult/dc958bd790af297a","status":"failed","statusDetails":"Failed: Instead 'Expected' page opened other page. Expected_page is 'https://capital.com/ar-ae/learn/market-guides/what-is-cryptocurrency-trading', current page is 'https://ar-ae/learn/market-guides/what-is-cryptocurrency-trading'","time":{"start":1741650320909,"stop":1741650343828,"duration":22919}},{"uid":"f8a4abb1f702d51b","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/343//#testresult/f8a4abb1f702d51b","status":"failed","statusDetails":"Failed: Instead 'Expected' page opened other page. Expected_page is 'https://capital.com/ar-ae/learn/market-guides/what-is-cryptocurrency-trading', current page is 'https://ar-ae/learn/market-guides/what-is-cryptocurrency-trading'","time":{"start":1741564096102,"stop":1741564118073,"duration":21971}},{"uid":"ea3cd33ff2e51eec","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/342//#testresult/ea3cd33ff2e51eec","status":"failed","statusDetails":"Failed: Instead 'Expected' page opened other page. Expected_page is 'https://capital.com/ar-ae/learn/market-guides/what-is-cryptocurrency-trading', current page is 'https://ar-ae/learn/market-guides/what-is-cryptocurrency-trading'","time":{"start":1741476595287,"stop":1741476617415,"duration":22128}}]},"tags":["bug_673","us_55"]},"source":"87cabfe49acca89.json","parameterValues":["'ae'","'ar'","'test001.miketar+1@gmail.com'","'Qwer1234-!@#$'","'Auth'","'Chrome'"]}