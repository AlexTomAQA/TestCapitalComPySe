{"uid":"a013e02e35a385b4","name":"TC_55!634 (Lang: en) | Bid:55!634-en.gb.NoReg","fullName":"tests.US_55_ReTestsManual.K_Alex_N.US_55_K_Alex_N_ReTestsManual_test.TestForFixedBugs#test_634","historyId":"b051aadb1a815714b3131625bfcf5b39","time":{"start":1738203401585,"stop":1738203434028,"duration":32443},"description":"\n         Check: Menu section [Markets] > \n                Menu item [Markets analysis] > \n                Article \"Gold price predictions for the next..\" > \n                Click on [Trade now] link > \n                Click on [Close] button\n         Language: EN\n         License: SCA, FCA, CYSEC or ASIC\n         Author: Aleksei Kurochkin\n         ","descriptionHtml":"<pre><code>     Check: Menu section [Markets] &gt; \n            Menu item [Markets analysis] &gt; \n            Article &quot;Gold price predictions for the next..&quot; &gt; \n            Click on [Trade now] link &gt; \n            Click on [Close] button\n     Language: EN\n     License: SCA, FCA, CYSEC or ASIC\n     Author: Aleksei Kurochkin\n</code></pre>\n","status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <b class=\"\">...</b> is not clickable at point (817, 10). Other element would receive the click: <div>...</div>\n  (Session info: chrome=132.0.6834.110)\nStacktrace:\n#0 0x55864e99353a <unknown>\n#1 0x55864e48ef00 <unknown>\n#2 0x55864e4e58de <unknown>\n#3 0x55864e4e3813 <unknown>\n#4 0x55864e4e0f22 <unknown>\n#5 0x55864e4e0135 <unknown>\n#6 0x55864e4d2dcd <unknown>\n#7 0x55864e5035a2 <unknown>\n#8 0x55864e4d2758 <unknown>\n#9 0x55864e50376e <unknown>\n#10 0x55864e521f84 <unknown>\n#11 0x55864e503343 <unknown>\n#12 0x55864e4d078a <unknown>\n#13 0x55864e4d19de <unknown>\n#14 0x55864e95d2cb <unknown>\n#15 0x55864e961242 <unknown>\n#16 0x55864e94a7ac <unknown>\n#17 0x55864e961df7 <unknown>\n#18 0x55864e92eb2f <unknown>\n#19 0x55864e9821a8 <unknown>\n#20 0x55864e982370 <unknown>\n#21 0x55864e9923b6 <unknown>\n#22 0x7f5020a9ca94 <unknown>\n#23 0x7f5020b29c3c <unknown>","statusTrace":"self = <US_55_K_Alex_N_ReTestsManual_test.TestForFixedBugs object at 0x7eff3bfd4620>\nworker_id = 'master'\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"7e9df78dbc41e6bc0c51cd7c2b03c3a9\")>\ncur_language = '', cur_country = 'gb', cur_role = 'NoReg'\ncur_login = 'test001.miketar+1@gmail.com', cur_password = 'Qwer1234-!@#$'\n\n    @pytest.mark.parametrize('cur_language', [''])\n    @pytest.mark.parametrize('cur_country', ['gb', 'ae', 'au', 'de'])\n    @pytest.mark.parametrize('cur_role', random.sample(['NoAuth', 'NoReg'], 1))\n    def test_634(self, worker_id, d, cur_language, cur_country, cur_role, cur_login, cur_password):\n        \"\"\"\n         Check: Menu section [Markets] >\n                Menu item [Markets analysis] >\n                Article \"Gold price predictions for the next..\" >\n                Click on [Trade now] link >\n                Click on [Close] button\n         Language: EN\n         License: SCA, FCA, CYSEC or ASIC\n         Author: Aleksei Kurochkin\n         \"\"\"\n        test = self\n        self.cur_language = cur_language\n        self.cur_country = cur_country\n        self.driver = d\n    \n        self.bid = build_dynamic_arg_for_us_55(\n            d, worker_id, cur_language, cur_country, cur_role,\n            \"55\", \"ReTests of Manual Detected Bugs\",\n            \"634\",\n            'The loading spinner is displayed continuously on the page \"Gold price '\n            'predictions for the next...\" after click on [Trade now]',\n            False,\n            False\n        )\n    \n        # Arrange\n        self.link = apply_preconditions_to_link(d, cur_language, cur_country, cur_role, cur_login, cur_password)\n        self.bug = Bug634(test)\n        self.bug.open_market_analysis_page(test)\n>       MyCommon.search_and_open_an_article_in_market_analysis_page(d, \"Gold price predictions for the next\")\n\ntests/US_55_ReTestsManual/K_Alex_N/US_55_K_Alex_N_ReTestsManual_test.py:109: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/US_55_ReTestsManual/K_Alex_N/MyCommon.py:50: in search_and_open_an_article_in_market_analysis_page\n    open_the_article()\ntests/US_55_ReTestsManual/K_Alex_N/MyCommon.py:41: in open_the_article\n    driver.find_element(*ARTICLE_LOCATOR).click()\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:380: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7eff3c00c3e0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#21 0x55864e9923b6 \\\\u003Cunknown>\\\\n#22 0x7f5020a9ca94 \\\\u003Cunknown>\\\\n#23 0x7f5020b29c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <b class=\"\">...</b> is not clickable at point (817, 10). Other element would receive the click: <div>...</div>\nE         (Session info: chrome=132.0.6834.110)\nE       Stacktrace:\nE       #0 0x55864e99353a <unknown>\nE       #1 0x55864e48ef00 <unknown>\nE       #2 0x55864e4e58de <unknown>\nE       #3 0x55864e4e3813 <unknown>\nE       #4 0x55864e4e0f22 <unknown>\nE       #5 0x55864e4e0135 <unknown>\nE       #6 0x55864e4d2dcd <unknown>\nE       #7 0x55864e5035a2 <unknown>\nE       #8 0x55864e4d2758 <unknown>\nE       #9 0x55864e50376e <unknown>\nE       #10 0x55864e521f84 <unknown>\nE       #11 0x55864e503343 <unknown>\nE       #12 0x55864e4d078a <unknown>\nE       #13 0x55864e4d19de <unknown>\nE       #14 0x55864e95d2cb <unknown>\nE       #15 0x55864e961242 <unknown>\nE       #16 0x55864e94a7ac <unknown>\nE       #17 0x55864e961df7 <unknown>\nE       #18 0x55864e92eb2f <unknown>\nE       #19 0x55864e9821a8 <unknown>\nE       #20 0x55864e982370 <unknown>\nE       #21 0x55864e9923b6 <unknown>\nE       #22 0x7f5020a9ca94 <unknown>\nE       #23 0x7f5020b29c3c <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"d","time":{"start":1738203323454,"stop":1738203324101,"duration":647},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"worker_id","time":{"start":1738203324101,"stop":1738203324101,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_login","time":{"start":1738203324101,"stop":1738203324101,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_password","time":{"start":1738203324101,"stop":1738203324101,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"\n         Check: Menu section [Markets] > \n                Menu item [Markets analysis] > \n                Article \"Gold price predictions for the next..\" > \n                Click on [Trade now] link > \n                Click on [Close] button\n         Language: EN\n         License: SCA, FCA, CYSEC or ASIC\n         Author: Aleksei Kurochkin\n         ","status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <b class=\"\">...</b> is not clickable at point (817, 10). Other element would receive the click: <div>...</div>\n  (Session info: chrome=132.0.6834.110)\nStacktrace:\n#0 0x55864e99353a <unknown>\n#1 0x55864e48ef00 <unknown>\n#2 0x55864e4e58de <unknown>\n#3 0x55864e4e3813 <unknown>\n#4 0x55864e4e0f22 <unknown>\n#5 0x55864e4e0135 <unknown>\n#6 0x55864e4d2dcd <unknown>\n#7 0x55864e5035a2 <unknown>\n#8 0x55864e4d2758 <unknown>\n#9 0x55864e50376e <unknown>\n#10 0x55864e521f84 <unknown>\n#11 0x55864e503343 <unknown>\n#12 0x55864e4d078a <unknown>\n#13 0x55864e4d19de <unknown>\n#14 0x55864e95d2cb <unknown>\n#15 0x55864e961242 <unknown>\n#16 0x55864e94a7ac <unknown>\n#17 0x55864e961df7 <unknown>\n#18 0x55864e92eb2f <unknown>\n#19 0x55864e9821a8 <unknown>\n#20 0x55864e982370 <unknown>\n#21 0x55864e9923b6 <unknown>\n#22 0x7f5020a9ca94 <unknown>\n#23 0x7f5020b29c3c <unknown>","statusTrace":"self = <US_55_K_Alex_N_ReTestsManual_test.TestForFixedBugs object at 0x7eff3bfd4620>\nworker_id = 'master'\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"7e9df78dbc41e6bc0c51cd7c2b03c3a9\")>\ncur_language = '', cur_country = 'gb', cur_role = 'NoReg'\ncur_login = 'test001.miketar+1@gmail.com', cur_password = 'Qwer1234-!@#$'\n\n    @pytest.mark.parametrize('cur_language', [''])\n    @pytest.mark.parametrize('cur_country', ['gb', 'ae', 'au', 'de'])\n    @pytest.mark.parametrize('cur_role', random.sample(['NoAuth', 'NoReg'], 1))\n    def test_634(self, worker_id, d, cur_language, cur_country, cur_role, cur_login, cur_password):\n        \"\"\"\n         Check: Menu section [Markets] >\n                Menu item [Markets analysis] >\n                Article \"Gold price predictions for the next..\" >\n                Click on [Trade now] link >\n                Click on [Close] button\n         Language: EN\n         License: SCA, FCA, CYSEC or ASIC\n         Author: Aleksei Kurochkin\n         \"\"\"\n        test = self\n        self.cur_language = cur_language\n        self.cur_country = cur_country\n        self.driver = d\n    \n        self.bid = build_dynamic_arg_for_us_55(\n            d, worker_id, cur_language, cur_country, cur_role,\n            \"55\", \"ReTests of Manual Detected Bugs\",\n            \"634\",\n            'The loading spinner is displayed continuously on the page \"Gold price '\n            'predictions for the next...\" after click on [Trade now]',\n            False,\n            False\n        )\n    \n        # Arrange\n        self.link = apply_preconditions_to_link(d, cur_language, cur_country, cur_role, cur_login, cur_password)\n        self.bug = Bug634(test)\n        self.bug.open_market_analysis_page(test)\n>       MyCommon.search_and_open_an_article_in_market_analysis_page(d, \"Gold price predictions for the next\")\n\ntests/US_55_ReTestsManual/K_Alex_N/US_55_K_Alex_N_ReTestsManual_test.py:109: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/US_55_ReTestsManual/K_Alex_N/MyCommon.py:50: in search_and_open_an_article_in_market_analysis_page\n    open_the_article()\ntests/US_55_ReTestsManual/K_Alex_N/MyCommon.py:41: in open_the_article\n    driver.find_element(*ARTICLE_LOCATOR).click()\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:380: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7eff3c00c3e0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#21 0x55864e9923b6 \\\\u003Cunknown>\\\\n#22 0x7f5020a9ca94 \\\\u003Cunknown>\\\\n#23 0x7f5020b29c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <b class=\"\">...</b> is not clickable at point (817, 10). Other element would receive the click: <div>...</div>\nE         (Session info: chrome=132.0.6834.110)\nE       Stacktrace:\nE       #0 0x55864e99353a <unknown>\nE       #1 0x55864e48ef00 <unknown>\nE       #2 0x55864e4e58de <unknown>\nE       #3 0x55864e4e3813 <unknown>\nE       #4 0x55864e4e0f22 <unknown>\nE       #5 0x55864e4e0135 <unknown>\nE       #6 0x55864e4d2dcd <unknown>\nE       #7 0x55864e5035a2 <unknown>\nE       #8 0x55864e4d2758 <unknown>\nE       #9 0x55864e50376e <unknown>\nE       #10 0x55864e521f84 <unknown>\nE       #11 0x55864e503343 <unknown>\nE       #12 0x55864e4d078a <unknown>\nE       #13 0x55864e4d19de <unknown>\nE       #14 0x55864e95d2cb <unknown>\nE       #15 0x55864e961242 <unknown>\nE       #16 0x55864e94a7ac <unknown>\nE       #17 0x55864e961df7 <unknown>\nE       #18 0x55864e92eb2f <unknown>\nE       #19 0x55864e9821a8 <unknown>\nE       #20 0x55864e982370 <unknown>\nE       #21 0x55864e9923b6 <unknown>\nE       #22 0x7f5020a9ca94 <unknown>\nE       #23 0x7f5020b29c3c <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","steps":[{"name":"Build dynamic argument for TCs of US_55","time":{"start":1738203401585,"stop":1738203401589,"duration":4},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"7e9df78dbc41e6bc0c51cd7c2b03c3a9\")>"},{"name":"worker_id","value":"'master'"},{"name":"cur_language","value":"''"},{"name":"cur_country","value":"'gb'"},{"name":"cur_role","value":"'NoReg'"},{"name":"us","value":"'55'"},{"name":"desc_us","value":"'ReTests of Manual Detected Bugs'"},{"name":"num_tc","value":"'634'"},{"name":"desc_tc","value":"'The loading spinner is displayed continuously on the page \"Gold price predictions for the next...\" after click on [Trade now]'"},{"name":"manual","value":"False"},{"name":"new_layout","value":"False"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"   Set New preconditions","time":{"start":1738203401589,"stop":1738203408993,"duration":7404},"status":"passed","steps":[{"name":"2025-01-30 02:15:23.436381   Set language and country","time":{"start":1738203406689,"stop":1738203408986,"duration":2297},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"7e9df78dbc41e6bc0c51cd7c2b03c3a9\")>"},{"name":"cur_language","value":"'en'"},{"name":"cur_country","value":"'gb'"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"7e9df78dbc41e6bc0c51cd7c2b03c3a9\")>"},{"name":"host","value":"'https://capital.com/en-gb'"},{"name":"end_point","value":"''"},{"name":"cur_language","value":"''"},{"name":"cur_country","value":"'gb'"},{"name":"cur_role","value":"'NoReg'"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"}],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Select \"Markets\" menu, \"Market analysis\" submenu","time":{"start":1738203408993,"stop":1738203417332,"duration":8339},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"7e9df78dbc41e6bc0c51cd7c2b03c3a9\")>"},{"name":"cur_language","value":"''"},{"name":"cur_country","value":"'gb'"},{"name":"link","value":"'https://capital.com/en-gb'"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"80b1a91a6336fc62","name":"Screenshot","source":"80b1a91a6336fc62.png","type":"image/png","size":440023},{"uid":"7981b29996592b05","name":"stdout","source":"7981b29996592b05.txt","type":"text/plain","size":3623}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"d::0","time":{"start":1738203986233,"stop":1738203986502,"duration":269},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"epic","value":"TC_55!634 | The loading spinner is displayed continuously on the page \"Gold price predictions for the next...\" after click on [Trade now]"},{"name":"feature","value":"Role: NoReg"},{"name":"story","value":"Country: gb"},{"name":"tag","value":"us_55"},{"name":"parentSuite","value":"tests.US_55_ReTestsManual.K_Alex_N"},{"name":"suite","value":"US_55_K_Alex_N_ReTestsManual_test"},{"name":"subSuite","value":"TestForFixedBugs"},{"name":"host","value":"fv-az1939-240"},{"name":"thread","value":"44293-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.US_55_ReTestsManual.K_Alex_N.US_55_K_Alex_N_ReTestsManual_test"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"cur_country","value":"'gb'"},{"name":"cur_language","value":"''"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"},{"name":"cur_role","value":"'NoReg'"},{"name":"d","value":"'Chrome'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":3,"skipped":0,"passed":14,"unknown":0,"total":20},"items":[{"uid":"d189159ec6577508","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/303//#testresult/d189159ec6577508","status":"broken","statusDetails":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <b class=\"\">...</b> is not clickable at point (817, 54). Other element would receive the click: <div class=\"grid_grid__2D3md topPanel_directions__2gpsL grid_gMdLg__9Xp_H grid_startToCenter__rpi6Z grid_flex__Nv3nG\">...</div>\n  (Session info: chrome=132.0.6834.83)\nStacktrace:\n#0 0x5606423f153a <unknown>\n#1 0x560641eecf00 <unknown>\n#2 0x560641f438de <unknown>\n#3 0x560641f41813 <unknown>\n#4 0x560641f3ef22 <unknown>\n#5 0x560641f3e135 <unknown>\n#6 0x560641f30dcd <unknown>\n#7 0x560641f615a2 <unknown>\n#8 0x560641f30758 <unknown>\n#9 0x560641f6176e <unknown>\n#10 0x560641f7ff84 <unknown>\n#11 0x560641f61343 <unknown>\n#12 0x560641f2e78a <unknown>\n#13 0x560641f2f9de <unknown>\n#14 0x5606423bb2cb <unknown>\n#15 0x5606423bf242 <unknown>\n#16 0x5606423a87ac <unknown>\n#17 0x5606423bfdf7 <unknown>\n#18 0x56064238cb2f <unknown>\n#19 0x5606423e01a8 <unknown>\n#20 0x5606423e0370 <unknown>\n#21 0x5606423f03b6 <unknown>\n#22 0x7fde8469ca94 <unknown>\n#23 0x7fde84729c3c <unknown>","time":{"start":1738117014673,"stop":1738117047426,"duration":32753}},{"uid":"3bc9e4d5ed71fd30","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/300//#testresult/3bc9e4d5ed71fd30","status":"broken","statusDetails":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <b class=\"\">...</b> is not clickable at point (817, 10). Other element would receive the click: <div>...</div>\n  (Session info: chrome=132.0.6834.83)\nStacktrace:\n#0 0x55ee22642dca <unknown>\n#1 0x55ee221393f0 <unknown>\n#2 0x55ee2218fdde <unknown>\n#3 0x55ee2218dd13 <unknown>\n#4 0x55ee2218b422 <unknown>\n#5 0x55ee2218a643 <unknown>\n#6 0x55ee2217d2bd <unknown>\n#7 0x55ee221ada92 <unknown>\n#8 0x55ee2217cc48 <unknown>\n#9 0x55ee221adc5e <unknown>\n#10 0x55ee221cc4b3 <unknown>\n#11 0x55ee221ad833 <unknown>\n#12 0x55ee2217a5a0 <unknown>\n#13 0x55ee2217bece <unknown>\n#14 0x55ee2260cbdb <unknown>\n#15 0x55ee22610b67 <unknown>\n#16 0x55ee225f83bc <unknown>\n#17 0x55ee22611727 <unknown>\n#18 0x55ee225dc74f <unknown>\n#19 0x55ee22631938 <unknown>\n#20 0x55ee22631b00 <unknown>\n#21 0x55ee22641c46 <unknown>\n#22 0x7fd18909ca94 <unknown>\n#23 0x7fd189129c3c <unknown>","time":{"start":1737858032046,"stop":1737858064402,"duration":32356}},{"uid":"42dbbafb7e621fa3","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/299//#testresult/42dbbafb7e621fa3","status":"passed","time":{"start":1737770854689,"stop":1737770882257,"duration":27568}},{"uid":"a79c24d881d48094","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/298//#testresult/a79c24d881d48094","status":"passed","time":{"start":1737685567714,"stop":1737685600375,"duration":32661}},{"uid":"12500770fed8b22e","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/295//#testresult/12500770fed8b22e","status":"passed","time":{"start":1737425105413,"stop":1737425138534,"duration":33121}},{"uid":"b4d800df1e702878","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/292//#testresult/b4d800df1e702878","status":"passed","time":{"start":1737166861642,"stop":1737166894353,"duration":32711}},{"uid":"c6618d91147012af","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/291//#testresult/c6618d91147012af","status":"passed","time":{"start":1737080595827,"stop":1737080628477,"duration":32650}},{"uid":"6443f3faf9a80e19","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/290//#testresult/6443f3faf9a80e19","status":"passed","time":{"start":1736993171342,"stop":1736993203901,"duration":32559}},{"uid":"78f16310f645efb4","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/289//#testresult/78f16310f645efb4","status":"passed","time":{"start":1736906184206,"stop":1736906211952,"duration":27746}},{"uid":"12d55fe0cb78c73b","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/286//#testresult/12d55fe0cb78c73b","status":"passed","time":{"start":1736647085135,"stop":1736647112504,"duration":27369}},{"uid":"632c2e308ca2b098","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/285//#testresult/632c2e308ca2b098","status":"passed","time":{"start":1736560319036,"stop":1736560341665,"duration":22629}},{"uid":"d69d5e2cd5ac375e","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/283//#testresult/d69d5e2cd5ac375e","status":"passed","time":{"start":1736388054518,"stop":1736388077132,"duration":22614}},{"uid":"37bdd3767535c671","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/282//#testresult/37bdd3767535c671","status":"passed","time":{"start":1736302804561,"stop":1736302827551,"duration":22990}},{"uid":"583ffd01bc6aacce","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/279//#testresult/583ffd01bc6aacce","status":"failed","statusDetails":"AssertionError: Button [Accept all cookies] is not visible after 30 sec.","time":{"start":1736042471502,"stop":1736042506627,"duration":35125}},{"uid":"cb98bad18642c104","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/278//#testresult/cb98bad18642c104","status":"passed","time":{"start":1735955500552,"stop":1735955523208,"duration":22656}},{"uid":"ea760c7a3b307ce1","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/275//#testresult/ea760c7a3b307ce1","status":"failed","statusDetails":"AssertionError: Button [Accept all cookies] is not visible after 30 sec.","time":{"start":1735697109116,"stop":1735697144331,"duration":35215}},{"uid":"585c4a221d07f238","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/273//#testresult/585c4a221d07f238","status":"passed","time":{"start":1735522871892,"stop":1735522899524,"duration":27632}},{"uid":"702d3484e61b3d34","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/271//#testresult/702d3484e61b3d34","status":"failed","statusDetails":"AssertionError: Button [Accept all cookies] is not visible after 30 sec.","time":{"start":1735350864159,"stop":1735350899365,"duration":35206}},{"uid":"a4ae56b81d93ed4d","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/269//#testresult/a4ae56b81d93ed4d","status":"passed","time":{"start":1735178111489,"stop":1735178134163,"duration":22674}}]},"tags":["us_55"]},"source":"a013e02e35a385b4.json","parameterValues":["'gb'","''","'test001.miketar+1@gmail.com'","'Qwer1234-!@#$'","'NoReg'","'Chrome'"]}