{"uid":"909de1ab96ac2cae","name":"TC_55!411 (Lang: en) | Bid:55!411-en.gb.NoAuth","fullName":"tests.US_55_ReTestsManual.artemdashkov.US_55-artemdashkov_ReTestsManual_test.TestManualDetected#test_411_link_indices_on_page_what_is_cfd_trading","historyId":"4d3bdb9f4b03a9f1b9fceb273e5fb491","time":{"start":1743376411465,"stop":1743376417272,"duration":5807},"description":"\n        Check:  Menu section [Trading] >\n                Menu item [CFD trading] >\n                Scroll down to the block “Read more before you trade” >\n                Click link \"Go CFD trading guide\" >\n                Scroll down to the block \"What is a contract for difference (CFD)?\" /\n                Click link \"indices\"\n        Language: EN\n        License/Country: FCA\n        Role: NoReg, NoAuth, Auth\n        Author: Artem Dashkov\n        ","descriptionHtml":"<pre><code>    Check:  Menu section [Trading] &gt;\n            Menu item [CFD trading] &gt;\n            Scroll down to the block “Read more before you trade” &gt;\n            Click link &quot;Go CFD trading guide&quot; &gt;\n            Scroll down to the block &quot;What is a contract for difference (CFD)?&quot; /\n            Click link &quot;indices&quot;\n    Language: EN\n    License/Country: FCA\n    Role: NoReg, NoAuth, Auth\n    Author: Artem Dashkov\n</code></pre>\n","status":"failed","statusMessage":"Failed: Bug! 'Login' button is not clicked","statusTrace":"self = <pages.conditions_v2.NewConditions object at 0x7f2a842af080>\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"8adcafc426a16876e6abbca2b2b558bf\")>\nlink = 'https://capital.com/en-gb', login = 'test001.miketar+1@gmail.com'\npassword = 'Qwer1234-!@#$', cur_role = 'NoAuth'\n\n    @allure.step(f\"{datetime.now()}   Start Authorization\")\n    # @profile(precision=3)\n    def to_do_authorisation_new(self, d, link, login, password, cur_role):\n        \"\"\"Authorization\"\"\"\n        print(f\"\\n\" f\"{datetime.now()}   Start Authorization\")\n    \n        # Setup wait for later\n        menu = MainMenu(d, link)\n        assert login != \"\", \"Авторизация невозможна. Не указан e-mail\"\n        assert password != \"\", \"Авторизация невозможна. Не указан пароль\"\n    \n        # нажать в хедере на кнопку \"Log in\"\n        try:\n>           menu.element_is_clickable(menu.MENU_LOGIN).click()\n\npages/conditions_v2.py:237: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:380: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f2a8449bcb0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#21 0x557a1fb2fe76 \\\\u003Cunknown>\\\\n#22 0x7f172a09caa4 \\\\u003Cunknown>\\\\n#23 0x7f172a129c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button class=\"accountBtns_btn__vOcCs accountBtns_btnEmpty__TCWRE helpers_showLg__UPEqH js-analyticsClick js-analyticsVisible\" data-type=\"btn_header_login\" data-testid=\"login_btn\">...</button> is not clickable at point (1385, 121). Other element would receive the click: <div class=\"modal_overlay__f_YlZ modal_mobileBottomAttached__cTOIu\">...</div>\nE         (Session info: chrome=134.0.6998.88)\nE       Stacktrace:\nE       #0 0x557a1fb30ffa <unknown>\nE       #1 0x557a1f5ef970 <unknown>\nE       #2 0x557a1f6481ec <unknown>\nE       #3 0x557a1f646055 <unknown>\nE       #4 0x557a1f6436f2 <unknown>\nE       #5 0x557a1f6428ca <unknown>\nE       #6 0x557a1f6354cd <unknown>\nE       #7 0x557a1f667292 <unknown>\nE       #8 0x557a1f634e4a <unknown>\nE       #9 0x557a1f66745e <unknown>\nE       #10 0x557a1f68d70c <unknown>\nE       #11 0x557a1f667063 <unknown>\nE       #12 0x557a1f633328 <unknown>\nE       #13 0x557a1f634491 <unknown>\nE       #14 0x557a1faf842b <unknown>\nE       #15 0x557a1fafc2ec <unknown>\nE       #16 0x557a1fadfa22 <unknown>\nE       #17 0x557a1fafce64 <unknown>\nE       #18 0x557a1fac3bef <unknown>\nE       #19 0x557a1fb1f558 <unknown>\nE       #20 0x557a1fb1f736 <unknown>\nE       #21 0x557a1fb2fe76 <unknown>\nE       #22 0x7f172a09caa4 <unknown>\nE       #23 0x7f172a129c3c <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <US_55-artemdashkov_ReTestsManual_test.TestManualDetected object at 0x7f2a8464d4c0>\nworker_id = 'master'\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"8adcafc426a16876e6abbca2b2b558bf\")>\ncur_language = '', cur_country = 'gb', cur_role = 'NoAuth'\ncur_login = 'test001.miketar+1@gmail.com', cur_password = 'Qwer1234-!@#$'\n\n    @allure.step(\"Start test of link 'indices' on page 'What is CFD trading?'\")\n    @pytest.mark.parametrize('cur_language', [\"\"])\n    @pytest.mark.parametrize('cur_country', ['gb'])\n    @pytest.mark.parametrize('cur_role', [\"NoReg\", \"Auth\", \"NoAuth\"])\n    @pytest.mark.bug_411\n    def test_411_link_indices_on_page_what_is_cfd_trading(\n            self, worker_id, d, cur_language, cur_country, cur_role, cur_login, cur_password):\n        \"\"\"\n        Check:  Menu section [Trading] >\n                Menu item [CFD trading] >\n                Scroll down to the block “Read more before you trade” >\n                Click link \"Go CFD trading guide\" >\n                Scroll down to the block \"What is a contract for difference (CFD)?\" /\n                Click link \"indices\"\n        Language: EN\n        License/Country: FCA\n        Role: NoReg, NoAuth, Auth\n        Author: Artem Dashkov\n        \"\"\"\n    \n        bid = build_dynamic_arg_for_us_55(\n            d, worker_id, cur_language, cur_country, cur_role,\n            \"55\", \"ReTests of Manual Detected Bugs\",\n            \"411\",\n            \"Menu section [Trading] > Menu item [CFD trading] >\"\n            \"Scroll down to the block “Read more before you trade” > \"\n            \"Click link 'Go CFD trading guide' > \"\n            \"Scroll down to the block 'What is a contract for difference (CFD)?' > \"\n            \"Click link 'indices'\",\n            False, True\n        )\n        # Arrange\n        # pytest.skip(\"Intermediate version\")\n>       cur_item_link = apply_preconditions_to_link(d, cur_language, cur_country, cur_role, cur_login, cur_password)\n\ntests/US_55_ReTestsManual/artemdashkov/US_55-artemdashkov_ReTestsManual_test.py:1210: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/conditions_v2.py:78: in apply_preconditions_to_link\n    return cond.preconditions(d, CapitalComPageSrc.URL_NEW, '', cur_language, cur_country, cur_role,\npages/conditions_v2.py:154: in preconditions\n    self.to_do_authorisation_new(d, host, cur_login, cur_password, cur_role)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.conditions_v2.NewConditions object at 0x7f2a842af080>\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"8adcafc426a16876e6abbca2b2b558bf\")>\nlink = 'https://capital.com/en-gb', login = 'test001.miketar+1@gmail.com'\npassword = 'Qwer1234-!@#$', cur_role = 'NoAuth'\n\n    @allure.step(f\"{datetime.now()}   Start Authorization\")\n    # @profile(precision=3)\n    def to_do_authorisation_new(self, d, link, login, password, cur_role):\n        \"\"\"Authorization\"\"\"\n        print(f\"\\n\" f\"{datetime.now()}   Start Authorization\")\n    \n        # Setup wait for later\n        menu = MainMenu(d, link)\n        assert login != \"\", \"Авторизация невозможна. Не указан e-mail\"\n        assert password != \"\", \"Авторизация невозможна. Не указан пароль\"\n    \n        # нажать в хедере на кнопку \"Log in\"\n        try:\n            menu.element_is_clickable(menu.MENU_LOGIN).click()\n        except:\n>           pytest.fail(\"Bug! 'Login' button is not clicked\")\nE           Failed: Bug! 'Login' button is not clicked\n\npages/conditions_v2.py:239: Failed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"d","time":{"start":1743373952007,"stop":1743373952816,"duration":809},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"worker_id","time":{"start":1743373952816,"stop":1743373952816,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_password","time":{"start":1743373952816,"stop":1743373952816,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_login","time":{"start":1743373952816,"stop":1743373952816,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"\n        Check:  Menu section [Trading] >\n                Menu item [CFD trading] >\n                Scroll down to the block “Read more before you trade” >\n                Click link \"Go CFD trading guide\" >\n                Scroll down to the block \"What is a contract for difference (CFD)?\" /\n                Click link \"indices\"\n        Language: EN\n        License/Country: FCA\n        Role: NoReg, NoAuth, Auth\n        Author: Artem Dashkov\n        ","status":"failed","statusMessage":"Failed: Bug! 'Login' button is not clicked","statusTrace":"self = <pages.conditions_v2.NewConditions object at 0x7f2a842af080>\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"8adcafc426a16876e6abbca2b2b558bf\")>\nlink = 'https://capital.com/en-gb', login = 'test001.miketar+1@gmail.com'\npassword = 'Qwer1234-!@#$', cur_role = 'NoAuth'\n\n    @allure.step(f\"{datetime.now()}   Start Authorization\")\n    # @profile(precision=3)\n    def to_do_authorisation_new(self, d, link, login, password, cur_role):\n        \"\"\"Authorization\"\"\"\n        print(f\"\\n\" f\"{datetime.now()}   Start Authorization\")\n    \n        # Setup wait for later\n        menu = MainMenu(d, link)\n        assert login != \"\", \"Авторизация невозможна. Не указан e-mail\"\n        assert password != \"\", \"Авторизация невозможна. Не указан пароль\"\n    \n        # нажать в хедере на кнопку \"Log in\"\n        try:\n>           menu.element_is_clickable(menu.MENU_LOGIN).click()\n\npages/conditions_v2.py:237: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:380: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f2a8449bcb0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#21 0x557a1fb2fe76 \\\\u003Cunknown>\\\\n#22 0x7f172a09caa4 \\\\u003Cunknown>\\\\n#23 0x7f172a129c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button class=\"accountBtns_btn__vOcCs accountBtns_btnEmpty__TCWRE helpers_showLg__UPEqH js-analyticsClick js-analyticsVisible\" data-type=\"btn_header_login\" data-testid=\"login_btn\">...</button> is not clickable at point (1385, 121). Other element would receive the click: <div class=\"modal_overlay__f_YlZ modal_mobileBottomAttached__cTOIu\">...</div>\nE         (Session info: chrome=134.0.6998.88)\nE       Stacktrace:\nE       #0 0x557a1fb30ffa <unknown>\nE       #1 0x557a1f5ef970 <unknown>\nE       #2 0x557a1f6481ec <unknown>\nE       #3 0x557a1f646055 <unknown>\nE       #4 0x557a1f6436f2 <unknown>\nE       #5 0x557a1f6428ca <unknown>\nE       #6 0x557a1f6354cd <unknown>\nE       #7 0x557a1f667292 <unknown>\nE       #8 0x557a1f634e4a <unknown>\nE       #9 0x557a1f66745e <unknown>\nE       #10 0x557a1f68d70c <unknown>\nE       #11 0x557a1f667063 <unknown>\nE       #12 0x557a1f633328 <unknown>\nE       #13 0x557a1f634491 <unknown>\nE       #14 0x557a1faf842b <unknown>\nE       #15 0x557a1fafc2ec <unknown>\nE       #16 0x557a1fadfa22 <unknown>\nE       #17 0x557a1fafce64 <unknown>\nE       #18 0x557a1fac3bef <unknown>\nE       #19 0x557a1fb1f558 <unknown>\nE       #20 0x557a1fb1f736 <unknown>\nE       #21 0x557a1fb2fe76 <unknown>\nE       #22 0x7f172a09caa4 <unknown>\nE       #23 0x7f172a129c3c <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <US_55-artemdashkov_ReTestsManual_test.TestManualDetected object at 0x7f2a8464d4c0>\nworker_id = 'master'\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"8adcafc426a16876e6abbca2b2b558bf\")>\ncur_language = '', cur_country = 'gb', cur_role = 'NoAuth'\ncur_login = 'test001.miketar+1@gmail.com', cur_password = 'Qwer1234-!@#$'\n\n    @allure.step(\"Start test of link 'indices' on page 'What is CFD trading?'\")\n    @pytest.mark.parametrize('cur_language', [\"\"])\n    @pytest.mark.parametrize('cur_country', ['gb'])\n    @pytest.mark.parametrize('cur_role', [\"NoReg\", \"Auth\", \"NoAuth\"])\n    @pytest.mark.bug_411\n    def test_411_link_indices_on_page_what_is_cfd_trading(\n            self, worker_id, d, cur_language, cur_country, cur_role, cur_login, cur_password):\n        \"\"\"\n        Check:  Menu section [Trading] >\n                Menu item [CFD trading] >\n                Scroll down to the block “Read more before you trade” >\n                Click link \"Go CFD trading guide\" >\n                Scroll down to the block \"What is a contract for difference (CFD)?\" /\n                Click link \"indices\"\n        Language: EN\n        License/Country: FCA\n        Role: NoReg, NoAuth, Auth\n        Author: Artem Dashkov\n        \"\"\"\n    \n        bid = build_dynamic_arg_for_us_55(\n            d, worker_id, cur_language, cur_country, cur_role,\n            \"55\", \"ReTests of Manual Detected Bugs\",\n            \"411\",\n            \"Menu section [Trading] > Menu item [CFD trading] >\"\n            \"Scroll down to the block “Read more before you trade” > \"\n            \"Click link 'Go CFD trading guide' > \"\n            \"Scroll down to the block 'What is a contract for difference (CFD)?' > \"\n            \"Click link 'indices'\",\n            False, True\n        )\n        # Arrange\n        # pytest.skip(\"Intermediate version\")\n>       cur_item_link = apply_preconditions_to_link(d, cur_language, cur_country, cur_role, cur_login, cur_password)\n\ntests/US_55_ReTestsManual/artemdashkov/US_55-artemdashkov_ReTestsManual_test.py:1210: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/conditions_v2.py:78: in apply_preconditions_to_link\n    return cond.preconditions(d, CapitalComPageSrc.URL_NEW, '', cur_language, cur_country, cur_role,\npages/conditions_v2.py:154: in preconditions\n    self.to_do_authorisation_new(d, host, cur_login, cur_password, cur_role)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.conditions_v2.NewConditions object at 0x7f2a842af080>\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"8adcafc426a16876e6abbca2b2b558bf\")>\nlink = 'https://capital.com/en-gb', login = 'test001.miketar+1@gmail.com'\npassword = 'Qwer1234-!@#$', cur_role = 'NoAuth'\n\n    @allure.step(f\"{datetime.now()}   Start Authorization\")\n    # @profile(precision=3)\n    def to_do_authorisation_new(self, d, link, login, password, cur_role):\n        \"\"\"Authorization\"\"\"\n        print(f\"\\n\" f\"{datetime.now()}   Start Authorization\")\n    \n        # Setup wait for later\n        menu = MainMenu(d, link)\n        assert login != \"\", \"Авторизация невозможна. Не указан e-mail\"\n        assert password != \"\", \"Авторизация невозможна. Не указан пароль\"\n    \n        # нажать в хедере на кнопку \"Log in\"\n        try:\n            menu.element_is_clickable(menu.MENU_LOGIN).click()\n        except:\n>           pytest.fail(\"Bug! 'Login' button is not clicked\")\nE           Failed: Bug! 'Login' button is not clicked\n\npages/conditions_v2.py:239: Failed","steps":[{"name":"Start test of link 'indices' on page 'What is CFD trading?'","time":{"start":1743376411465,"stop":1743376417272,"duration":5807},"status":"failed","statusMessage":"Failed: Bug! 'Login' button is not clicked\n","statusTrace":"  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/tests/US_55_ReTestsManual/artemdashkov/US_55-artemdashkov_ReTestsManual_test.py\", line 1210, in test_411_link_indices_on_page_what_is_cfd_trading\n    cur_item_link = apply_preconditions_to_link(d, cur_language, cur_country, cur_role, cur_login, cur_password)\n                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/conditions_v2.py\", line 78, in apply_preconditions_to_link\n    return cond.preconditions(d, CapitalComPageSrc.URL_NEW, '', cur_language, cur_country, cur_role,\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/conditions_v2.py\", line 154, in preconditions\n    self.to_do_authorisation_new(d, host, cur_login, cur_password, cur_role)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/conditions_v2.py\", line 239, in to_do_authorisation_new\n    pytest.fail(\"Bug! 'Login' button is not clicked\")\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/_pytest/outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n","steps":[{"name":"Build dynamic argument for TCs of US_55","time":{"start":1743376411465,"stop":1743376411467,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"8adcafc426a16876e6abbca2b2b558bf\")>"},{"name":"worker_id","value":"'master'"},{"name":"cur_language","value":"''"},{"name":"cur_country","value":"'gb'"},{"name":"cur_role","value":"'NoAuth'"},{"name":"us","value":"'55'"},{"name":"desc_us","value":"'ReTests of Manual Detected Bugs'"},{"name":"num_tc","value":"'411'"},{"name":"desc_tc","value":"'Menu section [Trading] > Menu item [CFD trading] >Scroll down to the block “Read more before you trade” > Click link 'Go CFD trading guide' > Scroll down to the block 'What is a contract for difference (CFD)?' > Click link 'indices''"},{"name":"manual","value":"False"},{"name":"new_layout","value":"True"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"   Set New preconditions","time":{"start":1743376411467,"stop":1743376417271,"duration":5804},"status":"failed","statusMessage":"Failed: Bug! 'Login' button is not clicked\n","statusTrace":"  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/conditions_v2.py\", line 154, in preconditions\n    self.to_do_authorisation_new(d, host, cur_login, cur_password, cur_role)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/conditions_v2.py\", line 239, in to_do_authorisation_new\n    pytest.fail(\"Bug! 'Login' button is not clicked\")\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/_pytest/outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n","steps":[{"name":"2025-03-30 22:32:31.951433   Start Authorization","time":{"start":1743376416196,"stop":1743376417270,"duration":1074},"status":"failed","statusMessage":"Failed: Bug! 'Login' button is not clicked\n","statusTrace":"  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/conditions_v2.py\", line 239, in to_do_authorisation_new\n    pytest.fail(\"Bug! 'Login' button is not clicked\")\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/_pytest/outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"8adcafc426a16876e6abbca2b2b558bf\")>"},{"name":"link","value":"'https://capital.com/en-gb'"},{"name":"login","value":"'test001.miketar+1@gmail.com'"},{"name":"password","value":"'Qwer1234-!@#$'"},{"name":"cur_role","value":"'NoAuth'"}],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"8adcafc426a16876e6abbca2b2b558bf\")>"},{"name":"host","value":"'https://capital.com/en-gb'"},{"name":"end_point","value":"''"},{"name":"cur_language","value":"''"},{"name":"cur_country","value":"'gb'"},{"name":"cur_role","value":"'NoAuth'"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"}],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"worker_id","value":"'master'"},{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"8adcafc426a16876e6abbca2b2b558bf\")>"},{"name":"cur_language","value":"''"},{"name":"cur_country","value":"'gb'"},{"name":"cur_role","value":"'NoAuth'"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"}],"shouldDisplayMessage":false,"stepsCount":3,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"784b1724c793a1b8","name":"Screenshot","source":"784b1724c793a1b8.png","type":"image/png","size":611008},{"uid":"7796dc4f6007b93e","name":"stdout","source":"7796dc4f6007b93e.txt","type":"text/plain","size":1962}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"d::0","time":{"start":1743377006530,"stop":1743377006905,"duration":375},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"epic","value":"TC_55!411 | Menu section [Trading] > Menu item [CFD trading] >Scroll down to the block “Read more before you trade” > Click link 'Go CFD trading guide' > Scroll down to the block 'What is a contract for difference (CFD)?' > Click link 'indices'"},{"name":"feature","value":"Role: NoAuth"},{"name":"story","value":"Country: gb"},{"name":"tag","value":"bug_411"},{"name":"tag","value":"us_55"},{"name":"parentSuite","value":"tests.US_55_ReTestsManual.artemdashkov"},{"name":"suite","value":"US_55-artemdashkov_ReTestsManual_test"},{"name":"subSuite","value":"TestManualDetected"},{"name":"host","value":"fv-az2211-234"},{"name":"thread","value":"5571-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.US_55_ReTestsManual.artemdashkov.US_55-artemdashkov_ReTestsManual_test"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"cur_country","value":"'gb'"},{"name":"cur_language","value":"''"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"},{"name":"cur_role","value":"'NoAuth'"},{"name":"d","value":"'Chrome'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":23,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":23},"items":[{"uid":"75f94588b06d8417","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/363//#testresult/75f94588b06d8417","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1743290300314,"stop":1743290306351,"duration":6037}},{"uid":"925286c07755418f","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/362//#testresult/925286c07755418f","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1743203890699,"stop":1743203896612,"duration":5913}},{"uid":"33b8458f7950cf1f","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/361//#testresult/33b8458f7950cf1f","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1743117421067,"stop":1743117427147,"duration":6080}},{"uid":"75bf54843f89ba02","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/360//#testresult/75bf54843f89ba02","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1743030296356,"stop":1743030302258,"duration":5902}},{"uid":"1277cb8bdac7aac","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/359//#testresult/1277cb8bdac7aac","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742943817617,"stop":1742943823456,"duration":5839}},{"uid":"bda53a74560a827f","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/358//#testresult/bda53a74560a827f","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742857331091,"stop":1742857337104,"duration":6013}},{"uid":"9d2e307b70f84a05","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/357//#testresult/9d2e307b70f84a05","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742771258999,"stop":1742771264784,"duration":5785}},{"uid":"56b7548270b397a","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/356//#testresult/56b7548270b397a","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742685204790,"stop":1742685210871,"duration":6081}},{"uid":"59eecec9604a6bed","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/355//#testresult/59eecec9604a6bed","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742598924252,"stop":1742598930321,"duration":6069}},{"uid":"921f3a187ace5f64","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/354//#testresult/921f3a187ace5f64","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742511515145,"stop":1742511520979,"duration":5834}},{"uid":"6b8b35c446c76046","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/353//#testresult/6b8b35c446c76046","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742425041222,"stop":1742425047070,"duration":5848}},{"uid":"ff3b5be4ef859fd","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/352//#testresult/ff3b5be4ef859fd","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742338189773,"stop":1742338195869,"duration":6096}},{"uid":"2e8b9a83d7c96b44","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/351//#testresult/2e8b9a83d7c96b44","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742253528084,"stop":1742253534036,"duration":5952}},{"uid":"e2df27951542a374","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/350//#testresult/e2df27951542a374","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742166902547,"stop":1742166908345,"duration":5798}},{"uid":"24e2305a9848d98a","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/349//#testresult/24e2305a9848d98a","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742080791507,"stop":1742080797452,"duration":5945}},{"uid":"1b3d4a3d24fa6db1","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/348//#testresult/1b3d4a3d24fa6db1","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1741993284438,"stop":1741993290369,"duration":5931}},{"uid":"2505081cf3925799","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/347//#testresult/2505081cf3925799","status":"failed","statusDetails":"Failed: Page don't have link 'indices' in DOM","time":{"start":1741908535853,"stop":1741908562803,"duration":26950}},{"uid":"450e2736258c32f7","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/346//#testresult/450e2736258c32f7","status":"failed","statusDetails":"Failed: Page don't have link 'indices' in DOM","time":{"start":1741821549537,"stop":1741821577082,"duration":27545}},{"uid":"ae273aac38fc0f57","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/345//#testresult/ae273aac38fc0f57","status":"failed","statusDetails":"Failed: Page don't have link 'indices' in DOM","time":{"start":1741734829087,"stop":1741734857390,"duration":28303}},{"uid":"ad507aabb35187b3","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/344//#testresult/ad507aabb35187b3","status":"failed","statusDetails":"Failed: Page don't have link 'indices' in DOM","time":{"start":1741648964902,"stop":1741648993034,"duration":28132}}]},"tags":["us_55","bug_411"]},"source":"909de1ab96ac2cae.json","parameterValues":["'gb'","''","'test001.miketar+1@gmail.com'","'Qwer1234-!@#$'","'NoAuth'","'Chrome'"]}