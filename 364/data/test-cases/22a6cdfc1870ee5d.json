{"uid":"22a6cdfc1870ee5d","name":"TC_55!507 (Lang: en) | Bid:55!507-en.au.NoAuth","fullName":"tests.US_55_ReTestsManual.saii-d3v.US_55-saii-d3v_ReTestsManual_test.TestManualDetectedBugs#test_507","historyId":"145fad968c0e603df41e4c97b2b516b9","time":{"start":1743379467984,"stop":1743379473759,"duration":5775},"description":"\n         Check: The \"Trading Conditions\" table is not visible on the page \"Trade Australia 200 - AU200au CFD\"\n         Language: DE, EN.\n         License: ASIC, CYSEC.\n         Author: Sergey Aiidzhanov\n         ","descriptionHtml":"<pre><code>     Check: The &quot;Trading Conditions&quot; table is not visible on the page &quot;Trade Australia 200 - AU200au CFD&quot;\n     Language: DE, EN.\n     License: ASIC, CYSEC.\n     Author: Sergey Aiidzhanov\n</code></pre>\n","status":"failed","statusMessage":"Failed: Bug! 'Login' button is not clicked","statusTrace":"self = <pages.conditions_v2.NewConditions object at 0x7f361dfe7650>\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"cf07fdc702da39d2de9655e54cac0e0f\")>\nlink = 'https://capital.com/en-gb', login = 'test001.miketar+1@gmail.com'\npassword = 'Qwer1234-!@#$', cur_role = 'NoAuth'\n\n    @allure.step(f\"{datetime.now()}   Start Authorization\")\n    # @profile(precision=3)\n    def to_do_authorisation_new(self, d, link, login, password, cur_role):\n        \"\"\"Authorization\"\"\"\n        print(f\"\\n\" f\"{datetime.now()}   Start Authorization\")\n    \n        # Setup wait for later\n        menu = MainMenu(d, link)\n        assert login != \"\", \"Авторизация невозможна. Не указан e-mail\"\n        assert password != \"\", \"Авторизация невозможна. Не указан пароль\"\n    \n        # нажать в хедере на кнопку \"Log in\"\n        try:\n>           menu.element_is_clickable(menu.MENU_LOGIN).click()\n\npages/conditions_v2.py:237: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:380: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f361e80d880>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#21 0x563b92286e76 \\\\u003Cunknown>\\\\n#22 0x7f0d9a89caa4 \\\\u003Cunknown>\\\\n#23 0x7f0d9a929c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button class=\"accountBtns_btn__vOcCs accountBtns_btnEmpty__TCWRE helpers_showLg__UPEqH js-analyticsClick js-analyticsVisible\" data-type=\"btn_header_login\" data-testid=\"login_btn\">...</button> is not clickable at point (1385, 121). Other element would receive the click: <div class=\"modal_overlay__f_YlZ modal_mobileBottomAttached__cTOIu\">...</div>\nE         (Session info: chrome=134.0.6998.88)\nE       Stacktrace:\nE       #0 0x563b92287ffa <unknown>\nE       #1 0x563b91d46970 <unknown>\nE       #2 0x563b91d9f1ec <unknown>\nE       #3 0x563b91d9d055 <unknown>\nE       #4 0x563b91d9a6f2 <unknown>\nE       #5 0x563b91d998ca <unknown>\nE       #6 0x563b91d8c4cd <unknown>\nE       #7 0x563b91dbe292 <unknown>\nE       #8 0x563b91d8be4a <unknown>\nE       #9 0x563b91dbe45e <unknown>\nE       #10 0x563b91de470c <unknown>\nE       #11 0x563b91dbe063 <unknown>\nE       #12 0x563b91d8a328 <unknown>\nE       #13 0x563b91d8b491 <unknown>\nE       #14 0x563b9224f42b <unknown>\nE       #15 0x563b922532ec <unknown>\nE       #16 0x563b92236a22 <unknown>\nE       #17 0x563b92253e64 <unknown>\nE       #18 0x563b9221abef <unknown>\nE       #19 0x563b92276558 <unknown>\nE       #20 0x563b92276736 <unknown>\nE       #21 0x563b92286e76 <unknown>\nE       #22 0x7f0d9a89caa4 <unknown>\nE       #23 0x7f0d9a929c3c <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <US_55-saii-d3v_ReTestsManual_test.TestManualDetectedBugs object at 0x7f361e7edd90>\nworker_id = 'master'\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"cf07fdc702da39d2de9655e54cac0e0f\")>\ncur_language = '', cur_country = 'au', cur_role = 'NoAuth'\ncur_login = 'test001.miketar+1@gmail.com', cur_password = 'Qwer1234-!@#$'\n\n    @allure.step(\n        'Start retest manual TC_55!507 | The \"Trading Conditions\" table is not visible '\n        'on the page \"Trade Australia 200 - AU200au CFD\"')\n    @pytest.mark.parametrize('cur_language', ['de', ''])\n    @pytest.mark.parametrize('cur_country', ['au', 'de'])\n    @pytest.mark.parametrize('cur_role', ['Auth', 'NoAuth', 'NoReg'])\n    @pytest.mark.bug_507\n    def test_507(self, worker_id, d, cur_language, cur_country, cur_role, cur_login, cur_password):\n        \"\"\"\n         Check: The \"Trading Conditions\" table is not visible on the page \"Trade Australia 200 - AU200au CFD\"\n         Language: DE, EN.\n         License: ASIC, CYSEC.\n         Author: Sergey Aiidzhanov\n         \"\"\"\n        bid = build_dynamic_arg_for_us_55(\n            d, worker_id, cur_language, cur_country, cur_role,\n            \"55\", \"ReTests of Manual Detected Bugs\",\n            \"507\",\n            'The \"Trading Conditions\" table is not visible '\n            'on the page \"Trade Australia 200 - AU200au CFD\"',\n            False,\n            False\n        )\n    \n        if cur_country == 'au' and cur_language == 'de':\n            pytest.skip('ASIC licence does not have DE language')\n    \n        # Arrange\n>       link = apply_preconditions_to_link(d, cur_language, cur_country, cur_role, cur_login, cur_password)\n\ntests/US_55_ReTestsManual/saii-d3v/US_55-saii-d3v_ReTestsManual_test.py:1508: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/conditions_v2.py:78: in apply_preconditions_to_link\n    return cond.preconditions(d, CapitalComPageSrc.URL_NEW, '', cur_language, cur_country, cur_role,\npages/conditions_v2.py:154: in preconditions\n    self.to_do_authorisation_new(d, host, cur_login, cur_password, cur_role)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.conditions_v2.NewConditions object at 0x7f361dfe7650>\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"cf07fdc702da39d2de9655e54cac0e0f\")>\nlink = 'https://capital.com/en-gb', login = 'test001.miketar+1@gmail.com'\npassword = 'Qwer1234-!@#$', cur_role = 'NoAuth'\n\n    @allure.step(f\"{datetime.now()}   Start Authorization\")\n    # @profile(precision=3)\n    def to_do_authorisation_new(self, d, link, login, password, cur_role):\n        \"\"\"Authorization\"\"\"\n        print(f\"\\n\" f\"{datetime.now()}   Start Authorization\")\n    \n        # Setup wait for later\n        menu = MainMenu(d, link)\n        assert login != \"\", \"Авторизация невозможна. Не указан e-mail\"\n        assert password != \"\", \"Авторизация невозможна. Не указан пароль\"\n    \n        # нажать в хедере на кнопку \"Log in\"\n        try:\n            menu.element_is_clickable(menu.MENU_LOGIN).click()\n        except:\n>           pytest.fail(\"Bug! 'Login' button is not clicked\")\nE           Failed: Bug! 'Login' button is not clicked\n\npages/conditions_v2.py:239: Failed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"d","time":{"start":1743377008115,"stop":1743377008947,"duration":832},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_password","time":{"start":1743377008947,"stop":1743377008947,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"worker_id","time":{"start":1743377008947,"stop":1743377008947,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_login","time":{"start":1743377008947,"stop":1743377008947,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"\n         Check: The \"Trading Conditions\" table is not visible on the page \"Trade Australia 200 - AU200au CFD\"\n         Language: DE, EN.\n         License: ASIC, CYSEC.\n         Author: Sergey Aiidzhanov\n         ","status":"failed","statusMessage":"Failed: Bug! 'Login' button is not clicked","statusTrace":"self = <pages.conditions_v2.NewConditions object at 0x7f361dfe7650>\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"cf07fdc702da39d2de9655e54cac0e0f\")>\nlink = 'https://capital.com/en-gb', login = 'test001.miketar+1@gmail.com'\npassword = 'Qwer1234-!@#$', cur_role = 'NoAuth'\n\n    @allure.step(f\"{datetime.now()}   Start Authorization\")\n    # @profile(precision=3)\n    def to_do_authorisation_new(self, d, link, login, password, cur_role):\n        \"\"\"Authorization\"\"\"\n        print(f\"\\n\" f\"{datetime.now()}   Start Authorization\")\n    \n        # Setup wait for later\n        menu = MainMenu(d, link)\n        assert login != \"\", \"Авторизация невозможна. Не указан e-mail\"\n        assert password != \"\", \"Авторизация невозможна. Не указан пароль\"\n    \n        # нажать в хедере на кнопку \"Log in\"\n        try:\n>           menu.element_is_clickable(menu.MENU_LOGIN).click()\n\npages/conditions_v2.py:237: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:380: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f361e80d880>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#21 0x563b92286e76 \\\\u003Cunknown>\\\\n#22 0x7f0d9a89caa4 \\\\u003Cunknown>\\\\n#23 0x7f0d9a929c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button class=\"accountBtns_btn__vOcCs accountBtns_btnEmpty__TCWRE helpers_showLg__UPEqH js-analyticsClick js-analyticsVisible\" data-type=\"btn_header_login\" data-testid=\"login_btn\">...</button> is not clickable at point (1385, 121). Other element would receive the click: <div class=\"modal_overlay__f_YlZ modal_mobileBottomAttached__cTOIu\">...</div>\nE         (Session info: chrome=134.0.6998.88)\nE       Stacktrace:\nE       #0 0x563b92287ffa <unknown>\nE       #1 0x563b91d46970 <unknown>\nE       #2 0x563b91d9f1ec <unknown>\nE       #3 0x563b91d9d055 <unknown>\nE       #4 0x563b91d9a6f2 <unknown>\nE       #5 0x563b91d998ca <unknown>\nE       #6 0x563b91d8c4cd <unknown>\nE       #7 0x563b91dbe292 <unknown>\nE       #8 0x563b91d8be4a <unknown>\nE       #9 0x563b91dbe45e <unknown>\nE       #10 0x563b91de470c <unknown>\nE       #11 0x563b91dbe063 <unknown>\nE       #12 0x563b91d8a328 <unknown>\nE       #13 0x563b91d8b491 <unknown>\nE       #14 0x563b9224f42b <unknown>\nE       #15 0x563b922532ec <unknown>\nE       #16 0x563b92236a22 <unknown>\nE       #17 0x563b92253e64 <unknown>\nE       #18 0x563b9221abef <unknown>\nE       #19 0x563b92276558 <unknown>\nE       #20 0x563b92276736 <unknown>\nE       #21 0x563b92286e76 <unknown>\nE       #22 0x7f0d9a89caa4 <unknown>\nE       #23 0x7f0d9a929c3c <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <US_55-saii-d3v_ReTestsManual_test.TestManualDetectedBugs object at 0x7f361e7edd90>\nworker_id = 'master'\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"cf07fdc702da39d2de9655e54cac0e0f\")>\ncur_language = '', cur_country = 'au', cur_role = 'NoAuth'\ncur_login = 'test001.miketar+1@gmail.com', cur_password = 'Qwer1234-!@#$'\n\n    @allure.step(\n        'Start retest manual TC_55!507 | The \"Trading Conditions\" table is not visible '\n        'on the page \"Trade Australia 200 - AU200au CFD\"')\n    @pytest.mark.parametrize('cur_language', ['de', ''])\n    @pytest.mark.parametrize('cur_country', ['au', 'de'])\n    @pytest.mark.parametrize('cur_role', ['Auth', 'NoAuth', 'NoReg'])\n    @pytest.mark.bug_507\n    def test_507(self, worker_id, d, cur_language, cur_country, cur_role, cur_login, cur_password):\n        \"\"\"\n         Check: The \"Trading Conditions\" table is not visible on the page \"Trade Australia 200 - AU200au CFD\"\n         Language: DE, EN.\n         License: ASIC, CYSEC.\n         Author: Sergey Aiidzhanov\n         \"\"\"\n        bid = build_dynamic_arg_for_us_55(\n            d, worker_id, cur_language, cur_country, cur_role,\n            \"55\", \"ReTests of Manual Detected Bugs\",\n            \"507\",\n            'The \"Trading Conditions\" table is not visible '\n            'on the page \"Trade Australia 200 - AU200au CFD\"',\n            False,\n            False\n        )\n    \n        if cur_country == 'au' and cur_language == 'de':\n            pytest.skip('ASIC licence does not have DE language')\n    \n        # Arrange\n>       link = apply_preconditions_to_link(d, cur_language, cur_country, cur_role, cur_login, cur_password)\n\ntests/US_55_ReTestsManual/saii-d3v/US_55-saii-d3v_ReTestsManual_test.py:1508: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/conditions_v2.py:78: in apply_preconditions_to_link\n    return cond.preconditions(d, CapitalComPageSrc.URL_NEW, '', cur_language, cur_country, cur_role,\npages/conditions_v2.py:154: in preconditions\n    self.to_do_authorisation_new(d, host, cur_login, cur_password, cur_role)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.conditions_v2.NewConditions object at 0x7f361dfe7650>\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"cf07fdc702da39d2de9655e54cac0e0f\")>\nlink = 'https://capital.com/en-gb', login = 'test001.miketar+1@gmail.com'\npassword = 'Qwer1234-!@#$', cur_role = 'NoAuth'\n\n    @allure.step(f\"{datetime.now()}   Start Authorization\")\n    # @profile(precision=3)\n    def to_do_authorisation_new(self, d, link, login, password, cur_role):\n        \"\"\"Authorization\"\"\"\n        print(f\"\\n\" f\"{datetime.now()}   Start Authorization\")\n    \n        # Setup wait for later\n        menu = MainMenu(d, link)\n        assert login != \"\", \"Авторизация невозможна. Не указан e-mail\"\n        assert password != \"\", \"Авторизация невозможна. Не указан пароль\"\n    \n        # нажать в хедере на кнопку \"Log in\"\n        try:\n            menu.element_is_clickable(menu.MENU_LOGIN).click()\n        except:\n>           pytest.fail(\"Bug! 'Login' button is not clicked\")\nE           Failed: Bug! 'Login' button is not clicked\n\npages/conditions_v2.py:239: Failed","steps":[{"name":"Start retest manual TC_55!507 | The \"Trading Conditions\" table is not visible on the page \"Trade Australia 200 - AU200au CFD\"","time":{"start":1743379467984,"stop":1743379473758,"duration":5774},"status":"failed","statusMessage":"Failed: Bug! 'Login' button is not clicked\n","statusTrace":"  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/tests/US_55_ReTestsManual/saii-d3v/US_55-saii-d3v_ReTestsManual_test.py\", line 1508, in test_507\n    link = apply_preconditions_to_link(d, cur_language, cur_country, cur_role, cur_login, cur_password)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/conditions_v2.py\", line 78, in apply_preconditions_to_link\n    return cond.preconditions(d, CapitalComPageSrc.URL_NEW, '', cur_language, cur_country, cur_role,\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/conditions_v2.py\", line 154, in preconditions\n    self.to_do_authorisation_new(d, host, cur_login, cur_password, cur_role)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/conditions_v2.py\", line 239, in to_do_authorisation_new\n    pytest.fail(\"Bug! 'Login' button is not clicked\")\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/_pytest/outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n","steps":[{"name":"Build dynamic argument for TCs of US_55","time":{"start":1743379467984,"stop":1743379467985,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"cf07fdc702da39d2de9655e54cac0e0f\")>"},{"name":"worker_id","value":"'master'"},{"name":"cur_language","value":"''"},{"name":"cur_country","value":"'au'"},{"name":"cur_role","value":"'NoAuth'"},{"name":"us","value":"'55'"},{"name":"desc_us","value":"'ReTests of Manual Detected Bugs'"},{"name":"num_tc","value":"'507'"},{"name":"desc_tc","value":"'The \"Trading Conditions\" table is not visible on the page \"Trade Australia 200 - AU200au CFD\"'"},{"name":"manual","value":"False"},{"name":"new_layout","value":"False"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"   Set New preconditions","time":{"start":1743379467986,"stop":1743379473758,"duration":5772},"status":"failed","statusMessage":"Failed: Bug! 'Login' button is not clicked\n","statusTrace":"  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/conditions_v2.py\", line 154, in preconditions\n    self.to_do_authorisation_new(d, host, cur_login, cur_password, cur_role)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/conditions_v2.py\", line 239, in to_do_authorisation_new\n    pytest.fail(\"Bug! 'Login' button is not clicked\")\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/_pytest/outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n","steps":[{"name":"2025-03-30 23:23:28.048038   Start Authorization","time":{"start":1743379472680,"stop":1743379473757,"duration":1077},"status":"failed","statusMessage":"Failed: Bug! 'Login' button is not clicked\n","statusTrace":"  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/conditions_v2.py\", line 239, in to_do_authorisation_new\n    pytest.fail(\"Bug! 'Login' button is not clicked\")\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/_pytest/outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"cf07fdc702da39d2de9655e54cac0e0f\")>"},{"name":"link","value":"'https://capital.com/en-gb'"},{"name":"login","value":"'test001.miketar+1@gmail.com'"},{"name":"password","value":"'Qwer1234-!@#$'"},{"name":"cur_role","value":"'NoAuth'"}],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"cf07fdc702da39d2de9655e54cac0e0f\")>"},{"name":"host","value":"'https://capital.com/en-gb'"},{"name":"end_point","value":"''"},{"name":"cur_language","value":"''"},{"name":"cur_country","value":"'au'"},{"name":"cur_role","value":"'NoAuth'"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"}],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"worker_id","value":"'master'"},{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"cf07fdc702da39d2de9655e54cac0e0f\")>"},{"name":"cur_language","value":"''"},{"name":"cur_country","value":"'au'"},{"name":"cur_role","value":"'NoAuth'"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"}],"shouldDisplayMessage":false,"stepsCount":3,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"f4e4a9f9641f00c7","name":"Screenshot","source":"f4e4a9f9641f00c7.png","type":"image/png","size":611008},{"uid":"7f7235d438950a36","name":"stdout","source":"7f7235d438950a36.txt","type":"text/plain","size":1962}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"d::0","time":{"start":1743379619113,"stop":1743379619494,"duration":381},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"epic","value":"TC_55!507 | The \"Trading Conditions\" table is not visible on the page \"Trade Australia 200 - AU200au CFD\""},{"name":"feature","value":"Role: NoAuth"},{"name":"story","value":"Country: au"},{"name":"tag","value":"bug_507"},{"name":"tag","value":"us_55"},{"name":"parentSuite","value":"tests.US_55_ReTestsManual.saii-d3v"},{"name":"suite","value":"US_55-saii-d3v_ReTestsManual_test"},{"name":"subSuite","value":"TestManualDetectedBugs"},{"name":"host","value":"fv-az2211-234"},{"name":"thread","value":"19359-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.US_55_ReTestsManual.saii-d3v.US_55-saii-d3v_ReTestsManual_test"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"cur_country","value":"'au'"},{"name":"cur_language","value":"''"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"},{"name":"cur_role","value":"'NoAuth'"},{"name":"d","value":"'Chrome'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":18,"broken":0,"skipped":0,"passed":5,"unknown":0,"total":23},"items":[{"uid":"eed73d08c9f6aec5","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/363//#testresult/eed73d08c9f6aec5","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1743293512744,"stop":1743293518576,"duration":5832}},{"uid":"78819c545c00d2f1","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/362//#testresult/78819c545c00d2f1","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1743207000209,"stop":1743207005968,"duration":5759}},{"uid":"38ea642699ebabca","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/361//#testresult/38ea642699ebabca","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1743120657681,"stop":1743120663596,"duration":5915}},{"uid":"4e45f930df8d91b","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/360//#testresult/4e45f930df8d91b","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1743033453434,"stop":1743033459356,"duration":5922}},{"uid":"9582894c27617e69","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/359//#testresult/9582894c27617e69","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742947044676,"stop":1742947050497,"duration":5821}},{"uid":"f792b3bac488447b","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/358//#testresult/f792b3bac488447b","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742860359226,"stop":1742860365101,"duration":5875}},{"uid":"1df6df6b855d10df","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/357//#testresult/1df6df6b855d10df","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742774246372,"stop":1742774252157,"duration":5785}},{"uid":"dfc6c6d0d5e2a7f2","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/356//#testresult/dfc6c6d0d5e2a7f2","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742688525093,"stop":1742688531039,"duration":5946}},{"uid":"96ec9ee8be910f67","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/355//#testresult/96ec9ee8be910f67","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742602100747,"stop":1742602106768,"duration":6021}},{"uid":"8e53471270a4b8b8","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/354//#testresult/8e53471270a4b8b8","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742514654077,"stop":1742514659899,"duration":5822}},{"uid":"6082fd43be240e5c","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/353//#testresult/6082fd43be240e5c","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742428344519,"stop":1742428350524,"duration":6005}},{"uid":"b91d2fa612afb67a","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/352//#testresult/b91d2fa612afb67a","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742341435341,"stop":1742341441401,"duration":6060}},{"uid":"eb4100b82832e1f5","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/351//#testresult/eb4100b82832e1f5","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742256530792,"stop":1742256536867,"duration":6075}},{"uid":"7d9d227a0087df40","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/350//#testresult/7d9d227a0087df40","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742170030516,"stop":1742170036493,"duration":5977}},{"uid":"4aa6870e4fcce255","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/349//#testresult/4aa6870e4fcce255","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742083826126,"stop":1742083832113,"duration":5987}},{"uid":"6c2f9bf97dac19c4","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/348//#testresult/6c2f9bf97dac19c4","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1741996392551,"stop":1741996398493,"duration":5942}},{"uid":"2918e8fb392c90ae","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/347//#testresult/2918e8fb392c90ae","status":"passed","time":{"start":1741914073832,"stop":1741914099575,"duration":25743}},{"uid":"ba324b0f843ae2e0","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/346//#testresult/ba324b0f843ae2e0","status":"passed","time":{"start":1741826924974,"stop":1741826949419,"duration":24445}},{"uid":"1a4f4e87ee41766c","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/345//#testresult/1a4f4e87ee41766c","status":"passed","time":{"start":1741747095459,"stop":1741747120353,"duration":24894}},{"uid":"310415831373eff0","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/344//#testresult/310415831373eff0","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1741660914435,"stop":1741660920619,"duration":6184}}]},"tags":["bug_507","us_55"]},"source":"22a6cdfc1870ee5d.json","parameterValues":["'au'","''","'test001.miketar+1@gmail.com'","'Qwer1234-!@#$'","'NoAuth'","'Chrome'"]}