{"uid":"5b04063cb1aeb456","name":"TC_55!668 (Lang: en) | Bid:55!668-en.ae.Auth","fullName":"tests.US_55_ReTestsManual.artemdashkov.US_55-artemdashkov_ReTestsManual_test.TestManualDetected#test_668_button_try_demo_on_the_main_page","historyId":"81160e8fb653343d3b3898b156fa65cb","time":{"start":1743376896696,"stop":1743376902601,"duration":5905},"description":"\n        Check:  Scroll to the button [Try demo] in block \"Award-winning trading platform, here in the UAE\" >\n                Click button [Try demo] >\n                Return to the main page >\n                Click button [Try demo] >\n        Language: EN\n        License/Country: SCA\n        Role: Auth\n        Author: Artem Dashkov\n        ","descriptionHtml":"<pre><code>    Check:  Scroll to the button [Try demo] in block &quot;Award-winning trading platform, here in the UAE&quot; &gt;\n            Click button [Try demo] &gt;\n            Return to the main page &gt;\n            Click button [Try demo] &gt;\n    Language: EN\n    License/Country: SCA\n    Role: Auth\n    Author: Artem Dashkov\n</code></pre>\n","status":"failed","statusMessage":"Failed: Bug! 'Login' button is not clicked","statusTrace":"self = <pages.conditions_v2.NewConditions object at 0x7f2a83de9f10>\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"8adcafc426a16876e6abbca2b2b558bf\")>\nlink = 'https://capital.com/en-gb', login = 'test001.miketar+1@gmail.com'\npassword = 'Qwer1234-!@#$', cur_role = 'Auth'\n\n    @allure.step(f\"{datetime.now()}   Start Authorization\")\n    # @profile(precision=3)\n    def to_do_authorisation_new(self, d, link, login, password, cur_role):\n        \"\"\"Authorization\"\"\"\n        print(f\"\\n\" f\"{datetime.now()}   Start Authorization\")\n    \n        # Setup wait for later\n        menu = MainMenu(d, link)\n        assert login != \"\", \"Авторизация невозможна. Не указан e-mail\"\n        assert password != \"\", \"Авторизация невозможна. Не указан пароль\"\n    \n        # нажать в хедере на кнопку \"Log in\"\n        try:\n>           menu.element_is_clickable(menu.MENU_LOGIN).click()\n\npages/conditions_v2.py:237: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:380: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f2a8449bcb0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#21 0x557a1fb2fe76 \\\\u003Cunknown>\\\\n#22 0x7f172a09caa4 \\\\u003Cunknown>\\\\n#23 0x7f172a129c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button class=\"accountBtns_btn__vOcCs accountBtns_btnEmpty__TCWRE helpers_showLg__UPEqH js-analyticsClick js-analyticsVisible\" data-type=\"btn_header_login\" data-testid=\"login_btn\">...</button> is not clickable at point (1385, 121). Other element would receive the click: <div class=\"modal_overlay__f_YlZ modal_mobileBottomAttached__cTOIu\">...</div>\nE         (Session info: chrome=134.0.6998.88)\nE       Stacktrace:\nE       #0 0x557a1fb30ffa <unknown>\nE       #1 0x557a1f5ef970 <unknown>\nE       #2 0x557a1f6481ec <unknown>\nE       #3 0x557a1f646055 <unknown>\nE       #4 0x557a1f6436f2 <unknown>\nE       #5 0x557a1f6428ca <unknown>\nE       #6 0x557a1f6354cd <unknown>\nE       #7 0x557a1f667292 <unknown>\nE       #8 0x557a1f634e4a <unknown>\nE       #9 0x557a1f66745e <unknown>\nE       #10 0x557a1f68d70c <unknown>\nE       #11 0x557a1f667063 <unknown>\nE       #12 0x557a1f633328 <unknown>\nE       #13 0x557a1f634491 <unknown>\nE       #14 0x557a1faf842b <unknown>\nE       #15 0x557a1fafc2ec <unknown>\nE       #16 0x557a1fadfa22 <unknown>\nE       #17 0x557a1fafce64 <unknown>\nE       #18 0x557a1fac3bef <unknown>\nE       #19 0x557a1fb1f558 <unknown>\nE       #20 0x557a1fb1f736 <unknown>\nE       #21 0x557a1fb2fe76 <unknown>\nE       #22 0x7f172a09caa4 <unknown>\nE       #23 0x7f172a129c3c <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <US_55-artemdashkov_ReTestsManual_test.TestManualDetected object at 0x7f2a84498650>\nworker_id = 'master'\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"8adcafc426a16876e6abbca2b2b558bf\")>\ncur_language = 'en', cur_country = 'ae', cur_role = 'Auth'\ncur_login = 'test001.miketar+1@gmail.com', cur_password = 'Qwer1234-!@#$'\n\n    @allure.step(\"Start test of the button [Try demo] on the Main Page\")\n    @pytest.mark.parametrize('cur_language', [\"en\"])\n    @pytest.mark.parametrize('cur_country', [\"ae\"])\n    @pytest.mark.parametrize('cur_role', [\"Auth\"])\n    @pytest.mark.bug_668\n    def test_668_button_try_demo_on_the_main_page(\n            self, worker_id, d, cur_language, cur_country, cur_role, cur_login, cur_password):\n        \"\"\"\n        Check:  Scroll to the button [Try demo] in block \"Award-winning trading platform, here in the UAE\" >\n                Click button [Try demo] >\n                Return to the main page >\n                Click button [Try demo] >\n        Language: EN\n        License/Country: SCA\n        Role: Auth\n        Author: Artem Dashkov\n        \"\"\"\n    \n        bid = build_dynamic_arg_for_us_55(\n            d, worker_id, cur_language, cur_country, cur_role,\n            \"55\", \"ReTests of Manual Detected Bugs\",\n            \"668\",\n            \"Scroll to the button [Try demo] in block 'Award-winning trading platform, here in the UAE' >\"\n            \"Click button [Try demo] > \"\n            \"Return to the main page > \"\n            \"Click button [Try demo] > \",\n            False, True\n        )\n        # Arrange\n>       link = apply_preconditions_to_link(d, cur_language, cur_country, cur_role, cur_login, cur_password)\n\ntests/US_55_ReTestsManual/artemdashkov/US_55-artemdashkov_ReTestsManual_test.py:1995: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/conditions_v2.py:78: in apply_preconditions_to_link\n    return cond.preconditions(d, CapitalComPageSrc.URL_NEW, '', cur_language, cur_country, cur_role,\npages/conditions_v2.py:152: in preconditions\n    self.to_do_authorisation_new(d, host, cur_login, cur_password, cur_role)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.conditions_v2.NewConditions object at 0x7f2a83de9f10>\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"8adcafc426a16876e6abbca2b2b558bf\")>\nlink = 'https://capital.com/en-gb', login = 'test001.miketar+1@gmail.com'\npassword = 'Qwer1234-!@#$', cur_role = 'Auth'\n\n    @allure.step(f\"{datetime.now()}   Start Authorization\")\n    # @profile(precision=3)\n    def to_do_authorisation_new(self, d, link, login, password, cur_role):\n        \"\"\"Authorization\"\"\"\n        print(f\"\\n\" f\"{datetime.now()}   Start Authorization\")\n    \n        # Setup wait for later\n        menu = MainMenu(d, link)\n        assert login != \"\", \"Авторизация невозможна. Не указан e-mail\"\n        assert password != \"\", \"Авторизация невозможна. Не указан пароль\"\n    \n        # нажать в хедере на кнопку \"Log in\"\n        try:\n            menu.element_is_clickable(menu.MENU_LOGIN).click()\n        except:\n>           pytest.fail(\"Bug! 'Login' button is not clicked\")\nE           Failed: Bug! 'Login' button is not clicked\n\npages/conditions_v2.py:239: Failed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"d","time":{"start":1743373952007,"stop":1743373952816,"duration":809},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"worker_id","time":{"start":1743373952816,"stop":1743373952816,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_password","time":{"start":1743373952816,"stop":1743373952816,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_login","time":{"start":1743373952816,"stop":1743373952816,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"\n        Check:  Scroll to the button [Try demo] in block \"Award-winning trading platform, here in the UAE\" >\n                Click button [Try demo] >\n                Return to the main page >\n                Click button [Try demo] >\n        Language: EN\n        License/Country: SCA\n        Role: Auth\n        Author: Artem Dashkov\n        ","status":"failed","statusMessage":"Failed: Bug! 'Login' button is not clicked","statusTrace":"self = <pages.conditions_v2.NewConditions object at 0x7f2a83de9f10>\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"8adcafc426a16876e6abbca2b2b558bf\")>\nlink = 'https://capital.com/en-gb', login = 'test001.miketar+1@gmail.com'\npassword = 'Qwer1234-!@#$', cur_role = 'Auth'\n\n    @allure.step(f\"{datetime.now()}   Start Authorization\")\n    # @profile(precision=3)\n    def to_do_authorisation_new(self, d, link, login, password, cur_role):\n        \"\"\"Authorization\"\"\"\n        print(f\"\\n\" f\"{datetime.now()}   Start Authorization\")\n    \n        # Setup wait for later\n        menu = MainMenu(d, link)\n        assert login != \"\", \"Авторизация невозможна. Не указан e-mail\"\n        assert password != \"\", \"Авторизация невозможна. Не указан пароль\"\n    \n        # нажать в хедере на кнопку \"Log in\"\n        try:\n>           menu.element_is_clickable(menu.MENU_LOGIN).click()\n\npages/conditions_v2.py:237: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:380: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f2a8449bcb0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#21 0x557a1fb2fe76 \\\\u003Cunknown>\\\\n#22 0x7f172a09caa4 \\\\u003Cunknown>\\\\n#23 0x7f172a129c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button class=\"accountBtns_btn__vOcCs accountBtns_btnEmpty__TCWRE helpers_showLg__UPEqH js-analyticsClick js-analyticsVisible\" data-type=\"btn_header_login\" data-testid=\"login_btn\">...</button> is not clickable at point (1385, 121). Other element would receive the click: <div class=\"modal_overlay__f_YlZ modal_mobileBottomAttached__cTOIu\">...</div>\nE         (Session info: chrome=134.0.6998.88)\nE       Stacktrace:\nE       #0 0x557a1fb30ffa <unknown>\nE       #1 0x557a1f5ef970 <unknown>\nE       #2 0x557a1f6481ec <unknown>\nE       #3 0x557a1f646055 <unknown>\nE       #4 0x557a1f6436f2 <unknown>\nE       #5 0x557a1f6428ca <unknown>\nE       #6 0x557a1f6354cd <unknown>\nE       #7 0x557a1f667292 <unknown>\nE       #8 0x557a1f634e4a <unknown>\nE       #9 0x557a1f66745e <unknown>\nE       #10 0x557a1f68d70c <unknown>\nE       #11 0x557a1f667063 <unknown>\nE       #12 0x557a1f633328 <unknown>\nE       #13 0x557a1f634491 <unknown>\nE       #14 0x557a1faf842b <unknown>\nE       #15 0x557a1fafc2ec <unknown>\nE       #16 0x557a1fadfa22 <unknown>\nE       #17 0x557a1fafce64 <unknown>\nE       #18 0x557a1fac3bef <unknown>\nE       #19 0x557a1fb1f558 <unknown>\nE       #20 0x557a1fb1f736 <unknown>\nE       #21 0x557a1fb2fe76 <unknown>\nE       #22 0x7f172a09caa4 <unknown>\nE       #23 0x7f172a129c3c <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <US_55-artemdashkov_ReTestsManual_test.TestManualDetected object at 0x7f2a84498650>\nworker_id = 'master'\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"8adcafc426a16876e6abbca2b2b558bf\")>\ncur_language = 'en', cur_country = 'ae', cur_role = 'Auth'\ncur_login = 'test001.miketar+1@gmail.com', cur_password = 'Qwer1234-!@#$'\n\n    @allure.step(\"Start test of the button [Try demo] on the Main Page\")\n    @pytest.mark.parametrize('cur_language', [\"en\"])\n    @pytest.mark.parametrize('cur_country', [\"ae\"])\n    @pytest.mark.parametrize('cur_role', [\"Auth\"])\n    @pytest.mark.bug_668\n    def test_668_button_try_demo_on_the_main_page(\n            self, worker_id, d, cur_language, cur_country, cur_role, cur_login, cur_password):\n        \"\"\"\n        Check:  Scroll to the button [Try demo] in block \"Award-winning trading platform, here in the UAE\" >\n                Click button [Try demo] >\n                Return to the main page >\n                Click button [Try demo] >\n        Language: EN\n        License/Country: SCA\n        Role: Auth\n        Author: Artem Dashkov\n        \"\"\"\n    \n        bid = build_dynamic_arg_for_us_55(\n            d, worker_id, cur_language, cur_country, cur_role,\n            \"55\", \"ReTests of Manual Detected Bugs\",\n            \"668\",\n            \"Scroll to the button [Try demo] in block 'Award-winning trading platform, here in the UAE' >\"\n            \"Click button [Try demo] > \"\n            \"Return to the main page > \"\n            \"Click button [Try demo] > \",\n            False, True\n        )\n        # Arrange\n>       link = apply_preconditions_to_link(d, cur_language, cur_country, cur_role, cur_login, cur_password)\n\ntests/US_55_ReTestsManual/artemdashkov/US_55-artemdashkov_ReTestsManual_test.py:1995: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/conditions_v2.py:78: in apply_preconditions_to_link\n    return cond.preconditions(d, CapitalComPageSrc.URL_NEW, '', cur_language, cur_country, cur_role,\npages/conditions_v2.py:152: in preconditions\n    self.to_do_authorisation_new(d, host, cur_login, cur_password, cur_role)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.conditions_v2.NewConditions object at 0x7f2a83de9f10>\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"8adcafc426a16876e6abbca2b2b558bf\")>\nlink = 'https://capital.com/en-gb', login = 'test001.miketar+1@gmail.com'\npassword = 'Qwer1234-!@#$', cur_role = 'Auth'\n\n    @allure.step(f\"{datetime.now()}   Start Authorization\")\n    # @profile(precision=3)\n    def to_do_authorisation_new(self, d, link, login, password, cur_role):\n        \"\"\"Authorization\"\"\"\n        print(f\"\\n\" f\"{datetime.now()}   Start Authorization\")\n    \n        # Setup wait for later\n        menu = MainMenu(d, link)\n        assert login != \"\", \"Авторизация невозможна. Не указан e-mail\"\n        assert password != \"\", \"Авторизация невозможна. Не указан пароль\"\n    \n        # нажать в хедере на кнопку \"Log in\"\n        try:\n            menu.element_is_clickable(menu.MENU_LOGIN).click()\n        except:\n>           pytest.fail(\"Bug! 'Login' button is not clicked\")\nE           Failed: Bug! 'Login' button is not clicked\n\npages/conditions_v2.py:239: Failed","steps":[{"name":"Start test of the button [Try demo] on the Main Page","time":{"start":1743376896697,"stop":1743376902600,"duration":5903},"status":"failed","statusMessage":"Failed: Bug! 'Login' button is not clicked\n","statusTrace":"  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/tests/US_55_ReTestsManual/artemdashkov/US_55-artemdashkov_ReTestsManual_test.py\", line 1995, in test_668_button_try_demo_on_the_main_page\n    link = apply_preconditions_to_link(d, cur_language, cur_country, cur_role, cur_login, cur_password)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/conditions_v2.py\", line 78, in apply_preconditions_to_link\n    return cond.preconditions(d, CapitalComPageSrc.URL_NEW, '', cur_language, cur_country, cur_role,\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/conditions_v2.py\", line 152, in preconditions\n    self.to_do_authorisation_new(d, host, cur_login, cur_password, cur_role)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/conditions_v2.py\", line 239, in to_do_authorisation_new\n    pytest.fail(\"Bug! 'Login' button is not clicked\")\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/_pytest/outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n","steps":[{"name":"Build dynamic argument for TCs of US_55","time":{"start":1743376896697,"stop":1743376896698,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"8adcafc426a16876e6abbca2b2b558bf\")>"},{"name":"worker_id","value":"'master'"},{"name":"cur_language","value":"'en'"},{"name":"cur_country","value":"'ae'"},{"name":"cur_role","value":"'Auth'"},{"name":"us","value":"'55'"},{"name":"desc_us","value":"'ReTests of Manual Detected Bugs'"},{"name":"num_tc","value":"'668'"},{"name":"desc_tc","value":"'Scroll to the button [Try demo] in block 'Award-winning trading platform, here in the UAE' >Click button [Try demo] > Return to the main page > Click button [Try demo] > '"},{"name":"manual","value":"False"},{"name":"new_layout","value":"True"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"   Set New preconditions","time":{"start":1743376896699,"stop":1743376902600,"duration":5901},"status":"failed","statusMessage":"Failed: Bug! 'Login' button is not clicked\n","statusTrace":"  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/conditions_v2.py\", line 152, in preconditions\n    self.to_do_authorisation_new(d, host, cur_login, cur_password, cur_role)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/conditions_v2.py\", line 239, in to_do_authorisation_new\n    pytest.fail(\"Bug! 'Login' button is not clicked\")\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/_pytest/outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n","steps":[{"name":"2025-03-30 22:32:31.951433   Start Authorization","time":{"start":1743376901530,"stop":1743376902599,"duration":1069},"status":"failed","statusMessage":"Failed: Bug! 'Login' button is not clicked\n","statusTrace":"  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/conditions_v2.py\", line 239, in to_do_authorisation_new\n    pytest.fail(\"Bug! 'Login' button is not clicked\")\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/_pytest/outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"8adcafc426a16876e6abbca2b2b558bf\")>"},{"name":"link","value":"'https://capital.com/en-gb'"},{"name":"login","value":"'test001.miketar+1@gmail.com'"},{"name":"password","value":"'Qwer1234-!@#$'"},{"name":"cur_role","value":"'Auth'"}],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"8adcafc426a16876e6abbca2b2b558bf\")>"},{"name":"host","value":"'https://capital.com/en-gb'"},{"name":"end_point","value":"''"},{"name":"cur_language","value":"'en'"},{"name":"cur_country","value":"'ae'"},{"name":"cur_role","value":"'Auth'"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"}],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"worker_id","value":"'master'"},{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"8adcafc426a16876e6abbca2b2b558bf\")>"},{"name":"cur_language","value":"'en'"},{"name":"cur_country","value":"'ae'"},{"name":"cur_role","value":"'Auth'"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"}],"shouldDisplayMessage":false,"stepsCount":3,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"766f2d8aca448649","name":"Screenshot","source":"766f2d8aca448649.png","type":"image/png","size":611008},{"uid":"b96c8dbb550727d1","name":"stdout","source":"b96c8dbb550727d1.txt","type":"text/plain","size":1958}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"d::0","time":{"start":1743377006530,"stop":1743377006905,"duration":375},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"epic","value":"TC_55!668 | Scroll to the button [Try demo] in block 'Award-winning trading platform, here in the UAE' >Click button [Try demo] > Return to the main page > Click button [Try demo] > "},{"name":"feature","value":"Role: Auth"},{"name":"story","value":"Country: ae"},{"name":"tag","value":"bug_668"},{"name":"tag","value":"us_55"},{"name":"parentSuite","value":"tests.US_55_ReTestsManual.artemdashkov"},{"name":"suite","value":"US_55-artemdashkov_ReTestsManual_test"},{"name":"subSuite","value":"TestManualDetected"},{"name":"host","value":"fv-az2211-234"},{"name":"thread","value":"5571-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.US_55_ReTestsManual.artemdashkov.US_55-artemdashkov_ReTestsManual_test"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"cur_country","value":"'ae'"},{"name":"cur_language","value":"'en'"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"},{"name":"cur_role","value":"'Auth'"},{"name":"d","value":"'Chrome'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":17,"broken":0,"skipped":0,"passed":6,"unknown":0,"total":23},"items":[{"uid":"cb38534e0c5501f1","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/363//#testresult/cb38534e0c5501f1","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1743290794867,"stop":1743290800848,"duration":5981}},{"uid":"393119a32f58536a","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/362//#testresult/393119a32f58536a","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1743204368862,"stop":1743204374779,"duration":5917}},{"uid":"9f42853dfee0d26b","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/361//#testresult/9f42853dfee0d26b","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1743117911416,"stop":1743117917368,"duration":5952}},{"uid":"301dfdf91f0c1d94","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/360//#testresult/301dfdf91f0c1d94","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1743030791449,"stop":1743030797502,"duration":6053}},{"uid":"d05a4c22de389a17","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/359//#testresult/d05a4c22de389a17","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742944302879,"stop":1742944308721,"duration":5842}},{"uid":"6d3642b595ca5e67","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/358//#testresult/6d3642b595ca5e67","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742857823720,"stop":1742857829628,"duration":5908}},{"uid":"b30764d7a0a6276e","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/357//#testresult/b30764d7a0a6276e","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742771737671,"stop":1742771743767,"duration":6096}},{"uid":"818120b613e1c089","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/356//#testresult/818120b613e1c089","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742685702916,"stop":1742685708844,"duration":5928}},{"uid":"f272a87f0aaf4349","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/355//#testresult/f272a87f0aaf4349","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742599414515,"stop":1742599420417,"duration":5902}},{"uid":"c295c1caf56b2a5c","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/354//#testresult/c295c1caf56b2a5c","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742512004779,"stop":1742512010866,"duration":6087}},{"uid":"ff54b4fbcea2a101","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/353//#testresult/ff54b4fbcea2a101","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742425565421,"stop":1742425571253,"duration":5832}},{"uid":"bdcb39318c9732fa","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/352//#testresult/bdcb39318c9732fa","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742338684066,"stop":1742338690100,"duration":6034}},{"uid":"19373fb1a2be07c0","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/351//#testresult/19373fb1a2be07c0","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742254010269,"stop":1742254016169,"duration":5900}},{"uid":"5494bfb07bf78d9","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/350//#testresult/5494bfb07bf78d9","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742167387212,"stop":1742167393036,"duration":5824}},{"uid":"64a311034f02e5b","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/349//#testresult/64a311034f02e5b","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1742081277505,"stop":1742081283463,"duration":5958}},{"uid":"852f9041779701b4","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/348//#testresult/852f9041779701b4","status":"failed","statusDetails":"Failed: Bug! 'Login' button is not clicked","time":{"start":1741993771232,"stop":1741993777226,"duration":5994}},{"uid":"de9af2f2ce9d2503","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/347//#testresult/de9af2f2ce9d2503","status":"passed","time":{"start":1741909757149,"stop":1741909772953,"duration":15804}},{"uid":"3d80c1215b0e1adb","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/346//#testresult/3d80c1215b0e1adb","status":"passed","time":{"start":1741822762753,"stop":1741822781923,"duration":19170}},{"uid":"4abfc607788b16e","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/345//#testresult/4abfc607788b16e","status":"passed","time":{"start":1741736075507,"stop":1741736090853,"duration":15346}},{"uid":"22c0115e0cceb33","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/344//#testresult/22c0115e0cceb33","status":"passed","time":{"start":1741650285904,"stop":1741650301617,"duration":15713}}]},"tags":["us_55","bug_668"]},"source":"5b04063cb1aeb456.json","parameterValues":["'ae'","'en'","'test001.miketar+1@gmail.com'","'Qwer1234-!@#$'","'Auth'","'Chrome'"]}