{"uid":"f3b11eb645b7f63c","name":"TC_11.02.02.01_01 | Testing button [Start Trading] on Main banner. BID#11.02.02.01_01-engbNoReg","fullName":"tests.US_11_Education.US_11-02-02_Shares_trading.US_11-02-02-01_Shares_trading_test.TestSharesTradingItems#test_01_main_banner_start_trading_button","historyId":"d12a96832fdf7ddd27b79ea9b1d1d7ec","time":{"start":1703194872097,"stop":1703194889009,"duration":16912},"description":"\n        Check: Button [Start Trading] on Main banner\n        Language: All (Except: EL, HU, NL). License: All.\n        ","descriptionHtml":"<pre><code>    Check: Button [Start Trading] on Main banner\n    Language: All (Except: EL, HU, NL). License: All.\n</code></pre>\n","status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"https://capital.com/trading/signup\" class=\"cc-banner__btn btn btn--darkText js_signup js-analyticsClick\" data-type=\"top_banner_btn\">...</a> is not clickable at point (196, 300). Other element would receive the click: <div class=\"overlay overlay--uk\" id=\"uk_overlay\">...</div>\n  (Session info: chrome=120.0.6099.109)\nStacktrace:\n#0 0x55fd8632ff83 <unknown>\n#1 0x55fd85fe8cf7 <unknown>\n#2 0x55fd86040d92 <unknown>\n#3 0x55fd8603e7f4 <unknown>\n#4 0x55fd8603b894 <unknown>\n#5 0x55fd8603a4b9 <unknown>\n#6 0x55fd8602c313 <unknown>\n#7 0x55fd860620b2 <unknown>\n#8 0x55fd8602bb49 <unknown>\n#9 0x55fd860624ce <unknown>\n#10 0x55fd86081006 <unknown>\n#11 0x55fd86061e53 <unknown>\n#12 0x55fd86029dd4 <unknown>\n#13 0x55fd8602b1de <unknown>\n#14 0x55fd862f4531 <unknown>\n#15 0x55fd862f8455 <unknown>\n#16 0x55fd862e0f55 <unknown>\n#17 0x55fd862f90ef <unknown>\n#18 0x55fd862c499f <unknown>\n#19 0x55fd8631d008 <unknown>\n#20 0x55fd8631d1d7 <unknown>\n#21 0x55fd8632f124 <unknown>\n#22 0x7fdd1c094ac3 <unknown>","statusTrace":"self = <pages.Elements.ButtonStartTradingMainBanner.MainBannerStartTrading object at 0x7f7e64c91c50>\n\n    @allure.step(\"Click button [Start Trading] on Main banner\")\n    def element_click(self):\n        print(f\"\\n{datetime.now()}   2. Act_v0\")\n        print(f\"{datetime.now()}   Start Click button [Start Trading] =>\")\n        button_list = self.browser.find_elements(*MainBannerLocators.BUTTON_START_TRADING)\n    \n        print(f\"{datetime.now()}   BUTTON_START_TRADING is clickable? =>\")\n        time_out = 3\n        if not self.element_is_clickable(button_list[0], time_out):\n            print(f\"{datetime.now()}   => BUTTON_START_TRADING is not clickable after {time_out} sec. Stop TC>\")\n            pytest.fail(f\"BUTTON_START_TRADING is not clickable after {time_out} sec.\")\n    \n        print(f\"{datetime.now()}   BUTTON_START_TRADING click =>\")\n        try:\n>           button_list[0].click()\n\npages/Elements/ButtonStartTradingMainBanner.py:93: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/testcapitalcom-CcJ6hTD8-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/testcapitalcom-CcJ6hTD8-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/testcapitalcom-CcJ6hTD8-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f7e64f39350>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x55fd8631d1d7 \\\\u003Cunknown>\\\\n#21 0x55fd8632f124 \\\\u003Cunknown>\\\\n#22 0x7fdd1c094ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"https://capital.com/trading/signup\" class=\"cc-banner__btn btn btn--darkText js_signup js-analyticsClick\" data-type=\"top_banner_btn\">...</a> is not clickable at point (196, 300). Other element would receive the click: <div class=\"overlay overlay--uk\" id=\"uk_overlay\">...</div>\nE         (Session info: chrome=120.0.6099.109)\nE       Stacktrace:\nE       #0 0x55fd8632ff83 <unknown>\nE       #1 0x55fd85fe8cf7 <unknown>\nE       #2 0x55fd86040d92 <unknown>\nE       #3 0x55fd8603e7f4 <unknown>\nE       #4 0x55fd8603b894 <unknown>\nE       #5 0x55fd8603a4b9 <unknown>\nE       #6 0x55fd8602c313 <unknown>\nE       #7 0x55fd860620b2 <unknown>\nE       #8 0x55fd8602bb49 <unknown>\nE       #9 0x55fd860624ce <unknown>\nE       #10 0x55fd86081006 <unknown>\nE       #11 0x55fd86061e53 <unknown>\nE       #12 0x55fd86029dd4 <unknown>\nE       #13 0x55fd8602b1de <unknown>\nE       #14 0x55fd862f4531 <unknown>\nE       #15 0x55fd862f8455 <unknown>\nE       #16 0x55fd862e0f55 <unknown>\nE       #17 0x55fd862f90ef <unknown>\nE       #18 0x55fd862c499f <unknown>\nE       #19 0x55fd8631d008 <unknown>\nE       #20 0x55fd8631d1d7 <unknown>\nE       #21 0x55fd8632f124 <unknown>\nE       #22 0x7fdd1c094ac3 <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcom-CcJ6hTD8-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <US_11-02-02-01_Shares_trading_test.TestSharesTradingItems object at 0x7f7e64e59d50>\nworker_id = 'master'\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"8240ff11ac8548ea2385b5faf4ea0ccc\")>\ncur_language = '', cur_country = 'gb', cur_role = 'NoReg'\ncur_login = 'aqa.tomelo.an@gmail.com', cur_password = 'iT9Vgqi6d$fiZ*Z'\ncur_item_link = 'https://capital.com/trade-coinbase'\n\n    @allure.step(\"Start test of button [Start trading] on Main banner\")\n    # @pytest.mark.skip(reason=\"Skipped for debugging\")\n    @pytest.mark.test_01\n    def test_01_main_banner_start_trading_button(\n            self, worker_id, d, cur_language, cur_country, cur_role, cur_login, cur_password,\n            cur_item_link):\n        \"\"\"\n        Check: Button [Start Trading] on Main banner\n        Language: All (Except: EL, HU, NL). License: All.\n        \"\"\"\n        bid = build_dynamic_arg_v4(d, worker_id, cur_language, cur_country, cur_role,\n                                   \"11.02.02\", \"Education > Menu item [Shares trading]\", \".01_01\",\n                                   \"Testing button [Start Trading] on Main banner\")\n    \n        check_language(cur_language)\n    \n        page_conditions = Conditions(d, \"\")\n        page_conditions.arrange_0()\n        page_conditions.preconditions(\n            d, CapitalComPageSrc.URL, \"\", cur_language, cur_country, cur_role, cur_login, cur_password)\n    \n        test_element = MainBannerStartTrading(d, cur_item_link)\n>       test_element.full_test_with_tpi(d, cur_language, cur_country, cur_role, cur_item_link)\n\ntests/US_11_Education/US_11-02-02_Shares_trading/US_11-02-02-01_Shares_trading_test.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/Elements/ButtonStartTradingMainBanner.py:21: in full_test_with_tpi\n    self.element_click()\npages/Elements/ButtonStartTradingMainBanner.py:110: in element_click\n    button_list[0].click()\n../../../.cache/pypoetry/virtualenvs/testcapitalcom-CcJ6hTD8-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/testcapitalcom-CcJ6hTD8-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/testcapitalcom-CcJ6hTD8-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f7e64f39350>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x55fd8631d1d7 \\\\u003Cunknown>\\\\n#21 0x55fd8632f124 \\\\u003Cunknown>\\\\n#22 0x7fdd1c094ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"https://capital.com/trading/signup\" class=\"cc-banner__btn btn btn--darkText js_signup js-analyticsClick\" data-type=\"top_banner_btn\">...</a> is not clickable at point (196, 300). Other element would receive the click: <div class=\"overlay overlay--uk\" id=\"uk_overlay\">...</div>\nE         (Session info: chrome=120.0.6099.109)\nE       Stacktrace:\nE       #0 0x55fd8632ff83 <unknown>\nE       #1 0x55fd85fe8cf7 <unknown>\nE       #2 0x55fd86040d92 <unknown>\nE       #3 0x55fd8603e7f4 <unknown>\nE       #4 0x55fd8603b894 <unknown>\nE       #5 0x55fd8603a4b9 <unknown>\nE       #6 0x55fd8602c313 <unknown>\nE       #7 0x55fd860620b2 <unknown>\nE       #8 0x55fd8602bb49 <unknown>\nE       #9 0x55fd860624ce <unknown>\nE       #10 0x55fd86081006 <unknown>\nE       #11 0x55fd86061e53 <unknown>\nE       #12 0x55fd86029dd4 <unknown>\nE       #13 0x55fd8602b1de <unknown>\nE       #14 0x55fd862f4531 <unknown>\nE       #15 0x55fd862f8455 <unknown>\nE       #16 0x55fd862e0f55 <unknown>\nE       #17 0x55fd862f90ef <unknown>\nE       #18 0x55fd862c499f <unknown>\nE       #19 0x55fd8631d008 <unknown>\nE       #20 0x55fd8631d1d7 <unknown>\nE       #21 0x55fd8632f124 <unknown>\nE       #22 0x7fdd1c094ac3 <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcom-CcJ6hTD8-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"worker_id","time":{"start":1703194522405,"stop":1703194522405,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"d","time":{"start":1703194522405,"stop":1703194523320,"duration":915},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"go","time":{"start":1703194523320,"stop":1703194523320,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_language","time":{"start":1703194523320,"stop":1703194523320,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_login","time":{"start":1703194523321,"stop":1703194523321,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_password","time":{"start":1703194523321,"stop":1703194523321,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_country","time":{"start":1703194523321,"stop":1703194523321,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_role","time":{"start":1703194809313,"stop":1703194809313,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"\n        Check: Button [Start Trading] on Main banner\n        Language: All (Except: EL, HU, NL). License: All.\n        ","status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"https://capital.com/trading/signup\" class=\"cc-banner__btn btn btn--darkText js_signup js-analyticsClick\" data-type=\"top_banner_btn\">...</a> is not clickable at point (196, 300). Other element would receive the click: <div class=\"overlay overlay--uk\" id=\"uk_overlay\">...</div>\n  (Session info: chrome=120.0.6099.109)\nStacktrace:\n#0 0x55fd8632ff83 <unknown>\n#1 0x55fd85fe8cf7 <unknown>\n#2 0x55fd86040d92 <unknown>\n#3 0x55fd8603e7f4 <unknown>\n#4 0x55fd8603b894 <unknown>\n#5 0x55fd8603a4b9 <unknown>\n#6 0x55fd8602c313 <unknown>\n#7 0x55fd860620b2 <unknown>\n#8 0x55fd8602bb49 <unknown>\n#9 0x55fd860624ce <unknown>\n#10 0x55fd86081006 <unknown>\n#11 0x55fd86061e53 <unknown>\n#12 0x55fd86029dd4 <unknown>\n#13 0x55fd8602b1de <unknown>\n#14 0x55fd862f4531 <unknown>\n#15 0x55fd862f8455 <unknown>\n#16 0x55fd862e0f55 <unknown>\n#17 0x55fd862f90ef <unknown>\n#18 0x55fd862c499f <unknown>\n#19 0x55fd8631d008 <unknown>\n#20 0x55fd8631d1d7 <unknown>\n#21 0x55fd8632f124 <unknown>\n#22 0x7fdd1c094ac3 <unknown>","statusTrace":"self = <pages.Elements.ButtonStartTradingMainBanner.MainBannerStartTrading object at 0x7f7e64c91c50>\n\n    @allure.step(\"Click button [Start Trading] on Main banner\")\n    def element_click(self):\n        print(f\"\\n{datetime.now()}   2. Act_v0\")\n        print(f\"{datetime.now()}   Start Click button [Start Trading] =>\")\n        button_list = self.browser.find_elements(*MainBannerLocators.BUTTON_START_TRADING)\n    \n        print(f\"{datetime.now()}   BUTTON_START_TRADING is clickable? =>\")\n        time_out = 3\n        if not self.element_is_clickable(button_list[0], time_out):\n            print(f\"{datetime.now()}   => BUTTON_START_TRADING is not clickable after {time_out} sec. Stop TC>\")\n            pytest.fail(f\"BUTTON_START_TRADING is not clickable after {time_out} sec.\")\n    \n        print(f\"{datetime.now()}   BUTTON_START_TRADING click =>\")\n        try:\n>           button_list[0].click()\n\npages/Elements/ButtonStartTradingMainBanner.py:93: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/testcapitalcom-CcJ6hTD8-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/testcapitalcom-CcJ6hTD8-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/testcapitalcom-CcJ6hTD8-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f7e64f39350>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x55fd8631d1d7 \\\\u003Cunknown>\\\\n#21 0x55fd8632f124 \\\\u003Cunknown>\\\\n#22 0x7fdd1c094ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"https://capital.com/trading/signup\" class=\"cc-banner__btn btn btn--darkText js_signup js-analyticsClick\" data-type=\"top_banner_btn\">...</a> is not clickable at point (196, 300). Other element would receive the click: <div class=\"overlay overlay--uk\" id=\"uk_overlay\">...</div>\nE         (Session info: chrome=120.0.6099.109)\nE       Stacktrace:\nE       #0 0x55fd8632ff83 <unknown>\nE       #1 0x55fd85fe8cf7 <unknown>\nE       #2 0x55fd86040d92 <unknown>\nE       #3 0x55fd8603e7f4 <unknown>\nE       #4 0x55fd8603b894 <unknown>\nE       #5 0x55fd8603a4b9 <unknown>\nE       #6 0x55fd8602c313 <unknown>\nE       #7 0x55fd860620b2 <unknown>\nE       #8 0x55fd8602bb49 <unknown>\nE       #9 0x55fd860624ce <unknown>\nE       #10 0x55fd86081006 <unknown>\nE       #11 0x55fd86061e53 <unknown>\nE       #12 0x55fd86029dd4 <unknown>\nE       #13 0x55fd8602b1de <unknown>\nE       #14 0x55fd862f4531 <unknown>\nE       #15 0x55fd862f8455 <unknown>\nE       #16 0x55fd862e0f55 <unknown>\nE       #17 0x55fd862f90ef <unknown>\nE       #18 0x55fd862c499f <unknown>\nE       #19 0x55fd8631d008 <unknown>\nE       #20 0x55fd8631d1d7 <unknown>\nE       #21 0x55fd8632f124 <unknown>\nE       #22 0x7fdd1c094ac3 <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcom-CcJ6hTD8-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <US_11-02-02-01_Shares_trading_test.TestSharesTradingItems object at 0x7f7e64e59d50>\nworker_id = 'master'\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"8240ff11ac8548ea2385b5faf4ea0ccc\")>\ncur_language = '', cur_country = 'gb', cur_role = 'NoReg'\ncur_login = 'aqa.tomelo.an@gmail.com', cur_password = 'iT9Vgqi6d$fiZ*Z'\ncur_item_link = 'https://capital.com/trade-coinbase'\n\n    @allure.step(\"Start test of button [Start trading] on Main banner\")\n    # @pytest.mark.skip(reason=\"Skipped for debugging\")\n    @pytest.mark.test_01\n    def test_01_main_banner_start_trading_button(\n            self, worker_id, d, cur_language, cur_country, cur_role, cur_login, cur_password,\n            cur_item_link):\n        \"\"\"\n        Check: Button [Start Trading] on Main banner\n        Language: All (Except: EL, HU, NL). License: All.\n        \"\"\"\n        bid = build_dynamic_arg_v4(d, worker_id, cur_language, cur_country, cur_role,\n                                   \"11.02.02\", \"Education > Menu item [Shares trading]\", \".01_01\",\n                                   \"Testing button [Start Trading] on Main banner\")\n    \n        check_language(cur_language)\n    \n        page_conditions = Conditions(d, \"\")\n        page_conditions.arrange_0()\n        page_conditions.preconditions(\n            d, CapitalComPageSrc.URL, \"\", cur_language, cur_country, cur_role, cur_login, cur_password)\n    \n        test_element = MainBannerStartTrading(d, cur_item_link)\n>       test_element.full_test_with_tpi(d, cur_language, cur_country, cur_role, cur_item_link)\n\ntests/US_11_Education/US_11-02-02_Shares_trading/US_11-02-02-01_Shares_trading_test.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/Elements/ButtonStartTradingMainBanner.py:21: in full_test_with_tpi\n    self.element_click()\npages/Elements/ButtonStartTradingMainBanner.py:110: in element_click\n    button_list[0].click()\n../../../.cache/pypoetry/virtualenvs/testcapitalcom-CcJ6hTD8-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/testcapitalcom-CcJ6hTD8-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/testcapitalcom-CcJ6hTD8-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f7e64f39350>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x55fd8631d1d7 \\\\u003Cunknown>\\\\n#21 0x55fd8632f124 \\\\u003Cunknown>\\\\n#22 0x7fdd1c094ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"https://capital.com/trading/signup\" class=\"cc-banner__btn btn btn--darkText js_signup js-analyticsClick\" data-type=\"top_banner_btn\">...</a> is not clickable at point (196, 300). Other element would receive the click: <div class=\"overlay overlay--uk\" id=\"uk_overlay\">...</div>\nE         (Session info: chrome=120.0.6099.109)\nE       Stacktrace:\nE       #0 0x55fd8632ff83 <unknown>\nE       #1 0x55fd85fe8cf7 <unknown>\nE       #2 0x55fd86040d92 <unknown>\nE       #3 0x55fd8603e7f4 <unknown>\nE       #4 0x55fd8603b894 <unknown>\nE       #5 0x55fd8603a4b9 <unknown>\nE       #6 0x55fd8602c313 <unknown>\nE       #7 0x55fd860620b2 <unknown>\nE       #8 0x55fd8602bb49 <unknown>\nE       #9 0x55fd860624ce <unknown>\nE       #10 0x55fd86081006 <unknown>\nE       #11 0x55fd86061e53 <unknown>\nE       #12 0x55fd86029dd4 <unknown>\nE       #13 0x55fd8602b1de <unknown>\nE       #14 0x55fd862f4531 <unknown>\nE       #15 0x55fd862f8455 <unknown>\nE       #16 0x55fd862e0f55 <unknown>\nE       #17 0x55fd862f90ef <unknown>\nE       #18 0x55fd862c499f <unknown>\nE       #19 0x55fd8631d008 <unknown>\nE       #20 0x55fd8631d1d7 <unknown>\nE       #21 0x55fd8632f124 <unknown>\nE       #22 0x7fdd1c094ac3 <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcom-CcJ6hTD8-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","steps":[{"name":"Start test of button [Start trading] on Main banner","time":{"start":1703194872097,"stop":1703194889008,"duration":16911},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"https://capital.com/trading/signup\" class=\"cc-banner__btn btn btn--darkText js_signup js-analyticsClick\" data-type=\"top_banner_btn\">...</a> is not clickable at point (196, 300). Other element would receive the click: <div class=\"overlay overlay--uk\" id=\"uk_overlay\">...</div>\n  (Session info: chrome=120.0.6099.109)\nStacktrace:\n#0 0x55fd8632ff83 <unknown>\n#1 0x55fd85fe8cf7 <unknown>\n#2 0x55fd86040d92 <unknown>\n#3 0x55fd8603e7f4 <unknown>\n#4 0x55fd8603b894 <unknown>\n#5 0x55fd8603a4b9 <unknown>\n#6 0x55fd8602c313 <unknown>\n#7 0x55fd860620b2 <unknown>\n#8 0x55fd8602bb49 <unknown>\n#9 0x55fd860624ce <unknown>\n#10 0x55fd86081006 <unknown>\n#11 0x55fd86061e53 <unknown>\n#12 0x55fd86029dd4 <unknown>\n#13 0x55fd8602b1de <unknown>\n#14 0x55fd862f4531 <unknown>\n#15 0x55fd862f8455 <unknown>\n#16 0x55fd862e0f55 <unknown>\n#17 0x55fd862f90ef <unknown>\n#18 0x55fd862c499f <unknown>\n#19 0x55fd8631d008 <unknown>\n#20 0x55fd8631d1d7 <unknown>\n#21 0x55fd8632f124 <unknown>\n#22 0x7fdd1c094ac3 <unknown>\n\n","statusTrace":"  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcom-CcJ6hTD8-py3.11/lib/python3.11/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/tests/US_11_Education/US_11-02-02_Shares_trading/US_11-02-02-01_Shares_trading_test.py\", line 73, in test_01_main_banner_start_trading_button\n    test_element.full_test_with_tpi(d, cur_language, cur_country, cur_role, cur_item_link)\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/Elements/ButtonStartTradingMainBanner.py\", line 21, in full_test_with_tpi\n    self.element_click()\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcom-CcJ6hTD8-py3.11/lib/python3.11/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/Elements/ButtonStartTradingMainBanner.py\", line 110, in element_click\n    button_list[0].click()\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcom-CcJ6hTD8-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py\", line 94, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcom-CcJ6hTD8-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py\", line 395, in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcom-CcJ6hTD8-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py\", line 348, in execute\n    self.error_handler.check_response(response)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcom-CcJ6hTD8-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[{"name":"Checking Main Page is opened","time":{"start":1703194872099,"stop":1703194872553,"duration":454},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Set preconditions","time":{"start":1703194872553,"stop":1703194876911,"duration":4358},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"8240ff11ac8548ea2385b5faf4ea0ccc\")>"},{"name":"host","value":"'https://capital.com'"},{"name":"end_point","value":"''"},{"name":"cur_language","value":"''"},{"name":"cur_country","value":"'gb'"},{"name":"cur_role","value":"'NoReg'"},{"name":"cur_login","value":"'aqa.tomelo.an@gmail.com'"},{"name":"cur_password","value":"'iT9Vgqi6d$fiZ*Z'"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Click button [Start Trading] on Main banner","time":{"start":1703194877777,"stop":1703194889008,"duration":11231},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"https://capital.com/trading/signup\" class=\"cc-banner__btn btn btn--darkText js_signup js-analyticsClick\" data-type=\"top_banner_btn\">...</a> is not clickable at point (196, 300). Other element would receive the click: <div class=\"overlay overlay--uk\" id=\"uk_overlay\">...</div>\n  (Session info: chrome=120.0.6099.109)\nStacktrace:\n#0 0x55fd8632ff83 <unknown>\n#1 0x55fd85fe8cf7 <unknown>\n#2 0x55fd86040d92 <unknown>\n#3 0x55fd8603e7f4 <unknown>\n#4 0x55fd8603b894 <unknown>\n#5 0x55fd8603a4b9 <unknown>\n#6 0x55fd8602c313 <unknown>\n#7 0x55fd860620b2 <unknown>\n#8 0x55fd8602bb49 <unknown>\n#9 0x55fd860624ce <unknown>\n#10 0x55fd86081006 <unknown>\n#11 0x55fd86061e53 <unknown>\n#12 0x55fd86029dd4 <unknown>\n#13 0x55fd8602b1de <unknown>\n#14 0x55fd862f4531 <unknown>\n#15 0x55fd862f8455 <unknown>\n#16 0x55fd862e0f55 <unknown>\n#17 0x55fd862f90ef <unknown>\n#18 0x55fd862c499f <unknown>\n#19 0x55fd8631d008 <unknown>\n#20 0x55fd8631d1d7 <unknown>\n#21 0x55fd8632f124 <unknown>\n#22 0x7fdd1c094ac3 <unknown>\n\n","statusTrace":"  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcom-CcJ6hTD8-py3.11/lib/python3.11/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/Elements/ButtonStartTradingMainBanner.py\", line 110, in element_click\n    button_list[0].click()\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcom-CcJ6hTD8-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py\", line 94, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcom-CcJ6hTD8-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py\", line 395, in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcom-CcJ6hTD8-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py\", line 348, in execute\n    self.error_handler.check_response(response)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcom-CcJ6hTD8-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[{"name":"Close form [Sign up]","time":{"start":1703194878873,"stop":1703194883418,"duration":4545},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Close form [Login]","time":{"start":1703194883418,"stop":1703194887956,"duration":4538},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Close page [Sign up]","time":{"start":1703194887956,"stop":1703194887959,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Close page [Login]","time":{"start":1703194887959,"stop":1703194887962,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"worker_id","value":"'master'"},{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"8240ff11ac8548ea2385b5faf4ea0ccc\")>"},{"name":"cur_language","value":"''"},{"name":"cur_country","value":"'gb'"},{"name":"cur_role","value":"'NoReg'"},{"name":"cur_login","value":"'aqa.tomelo.an@gmail.com'"},{"name":"cur_password","value":"'iT9Vgqi6d$fiZ*Z'"},{"name":"cur_item_link","value":"'https://capital.com/trade-coinbase'"}],"shouldDisplayMessage":false,"stepsCount":7,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"e7fd4b448b88cc55","name":"Screenshot","source":"e7fd4b448b88cc55.png","type":"image/png","size":88141},{"uid":"2f22a5ab1979e4bb","name":"log","source":"2f22a5ab1979e4bb.txt","type":"text/plain","size":7288},{"uid":"3909e84db78054df","name":"stdout","source":"3909e84db78054df.txt","type":"text/plain","size":1988}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":8,"attachmentsCount":3,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"go::0","time":{"start":1703194910696,"stop":1703194910836,"duration":140},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"epic","value":"US_11.02.02 | Education > Menu item [Shares trading]"},{"name":"feature","value":"Language: en"},{"name":"story","value":"Country: gb / Role: NoReg"},{"name":"tag","value":"test_01"},{"name":"tag","value":"us_11_02_02"},{"name":"parentSuite","value":"tests.US_11_Education.US_11-02-02_Shares_trading"},{"name":"suite","value":"US_11-02-02-01_Shares_trading_test"},{"name":"subSuite","value":"TestSharesTradingItems"},{"name":"host","value":"fv-az1153-24"},{"name":"thread","value":"20233-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.US_11_Education.US_11-02-02_Shares_trading.US_11-02-02-01_Shares_trading_test"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"cur_country","value":"'gb'"},{"name":"cur_item_link","value":"'https://capital.com/trade-coinbase'"},{"name":"cur_language","value":"''"},{"name":"cur_login","value":"'aqa.tomelo.an@gmail.com'"},{"name":"cur_password","value":"'iT9Vgqi6d$fiZ*Z'"},{"name":"cur_role","value":"'NoReg'"},{"name":"go","value":"'Chrome'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":0,"unknown":0,"total":2},"items":[{"uid":"edd5cf42e45d6a27","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/43//#testresult/edd5cf42e45d6a27","status":"broken","statusDetails":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"https://capital.com/trading/signup\" class=\"cc-banner__btn btn btn--darkText js_signup js-analyticsClick\" data-type=\"top_banner_btn\">...</a> is not clickable at point (196, 300). Other element would receive the click: <div class=\"overlay overlay--uk\" id=\"uk_overlay\">...</div>\n  (Session info: chrome=120.0.6099.71)\nStacktrace:\n#0 0x5574c0bd7d33 <unknown>\n#1 0x5574c0894f87 <unknown>\n#2 0x5574c08ed002 <unknown>\n#3 0x5574c08eaa64 <unknown>\n#4 0x5574c08e7b04 <unknown>\n#5 0x5574c08e6729 <unknown>\n#6 0x5574c08d8583 <unknown>\n#7 0x5574c090e342 <unknown>\n#8 0x5574c08d7db9 <unknown>\n#9 0x5574c090e75e <unknown>\n#10 0x5574c092d297 <unknown>\n#11 0x5574c090e0e3 <unknown>\n#12 0x5574c08d6044 <unknown>\n#13 0x5574c08d744e <unknown>\n#14 0x5574c0b9c861 <unknown>\n#15 0x5574c0ba0785 <unknown>\n#16 0x5574c0b8a285 <unknown>\n#17 0x5574c0ba141f <unknown>\n#18 0x5574c0b6e20f <unknown>\n#19 0x5574c0bc5028 <unknown>\n#20 0x5574c0bc51f7 <unknown>\n#21 0x5574c0bd6ed4 <unknown>\n#22 0x7feb46694ac3 <unknown>","time":{"start":1702727803282,"stop":1702727820206,"duration":16924}}]},"tags":["test_01","us_11_02_02"]},"source":"f3b11eb645b7f63c.json","parameterValues":["'gb'","'https://capital.com/trade-coinbase'","''","'aqa.tomelo.an@gmail.com'","'iT9Vgqi6d$fiZ*Z'","'NoReg'","'Chrome'"]}