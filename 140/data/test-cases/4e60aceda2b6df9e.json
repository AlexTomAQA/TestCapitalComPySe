{"uid":"4e60aceda2b6df9e","name":"TC_01.03.01_007 | Testing button [Notification] on trading instrument page. Bid:01.03.01_007-en.au.NoReg","fullName":"tests.US_01_Markets.US_01-03_Forex.US_01-03-01_forex_tests.TestTradingInstrumentPage#test_007_page_instrument_notification_button","historyId":"4b1412728be44413098338e1fc01265f","time":{"start":1712401068123,"stop":1712401074063,"duration":5940},"description":"\n        Check: Button [Notification] on trading instrument page\n        Language: All. License: All, except FCA.\n        ","descriptionHtml":"<pre><code>    Check: Button [Notification] on trading instrument page\n    Language: All. License: All, except FCA.\n</code></pre>\n","status":"failed","statusMessage":"AssertionError: Close button on 'Sign up' form is not clickable","statusTrace":"self = <pages.Elements.PageInstrumentNotificationButton.PageInstrumentNotificationButton object at 0x7fe340107020>\n\n    @allure.step(\"Click button [Notification]\")\n    def element_click(self):\n        print(f\"\\n{datetime.now()}   2. Act_v0\")\n        print(f\"{datetime.now()}   Start Click button [Notification] =>\")\n    \n        button_list = self.driver.find_elements(*PageTradingInstrumentMarketsLocators.BUTTON_NOTIFICATION)\n    \n        if not self.element_is_clickable(button_list[0], 5):\n            print(f\"{datetime.now()} => BUTTON_NOTIFICATION is not clickable after more then 5 sec\")\n            pytest.fail(f\"BUTTON_NOTIFICATION is not clickable more then 5 sec.\")\n        print(f\"{datetime.now()} BUTTON_NOTIFICATION is clickable =>\")\n    \n        try:\n>           button_list[0].click()\n\npages/Elements/PageInstrumentNotificationButton.py:68: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fe34150c6e0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x562badb0290b \\\\u003Cunknown>\\\\n#21 0x562badb129c4 \\\\u003Cunknown>\\\\n#22 0x7fb16c094ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"/eur-chf-rate#\" data-link=\"uu\" data-iid=\"93810675692038\" data-side=\"buy\" data-platform=\"spotlight\" class=\"btn btn--empty btn--round btn--sm js_signup_new js-analyticsVisible js-analyticsClick\" data-type=\"market_alerts\">...</a> is not clickable at point (387, 16). Other element would receive the click: <span class=\"text-accord\">...</span>\nE         (Session info: chrome=123.0.6312.105)\nE       Stacktrace:\nE       #0 0x562badb13873 <unknown>\nE       #1 0x562bad8098c6 <unknown>\nE       #2 0x562bad85b233 <unknown>\nE       #3 0x562bad85914e <unknown>\nE       #4 0x562bad856b27 <unknown>\nE       #5 0x562bad855ed3 <unknown>\nE       #6 0x562bad849507 <unknown>\nE       #7 0x562bad8765a2 <unknown>\nE       #8 0x562bad848e98 <unknown>\nE       #9 0x562bad87676e <unknown>\nE       #10 0x562bad894c19 <unknown>\nE       #11 0x562bad876343 <unknown>\nE       #12 0x562bad847593 <unknown>\nE       #13 0x562bad847f5e <unknown>\nE       #14 0x562badad785b <unknown>\nE       #15 0x562badadb7b5 <unknown>\nE       #16 0x562badac5581 <unknown>\nE       #17 0x562badadc342 <unknown>\nE       #18 0x562badaaa88f <unknown>\nE       #19 0x562badb02738 <unknown>\nE       #20 0x562badb0290b <unknown>\nE       #21 0x562badb129c4 <unknown>\nE       #22 0x7fb16c094ac3 <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <US_01-03-01_forex_tests.TestTradingInstrumentPage object at 0x7fe340d530e0>\nworker_id = 'master'\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"dcf6ed0aa642d272cf314af68574009c\")>\ncur_language = '', cur_country = 'au', cur_role = 'NoReg'\ncur_login = 'test001.miketar+1@gmail.com', cur_password = 'Qwer1234-!@#$'\ncur_item_link = 'https://capital.com/eur-chf-rate'\n\n    @allure.step(\"Start test of button [Notification] on trading instrument page\")\n    @pytest.mark.test_007\n    def test_007_page_instrument_notification_button(\n            self, worker_id, d, cur_language, cur_country, cur_role, cur_login, cur_password, cur_item_link):\n        \"\"\"\n        Check: Button [Notification] on trading instrument page\n        Language: All. License: All, except FCA.\n        \"\"\"\n    \n        bid = build_dynamic_arg_v4(\n            d, worker_id, cur_language, cur_country, cur_role,\n            \"01.03\", \"Markets > Menu item [Forex]\",\n            \".01_007\", \"Testing button [Notification] on trading instrument page\")\n    \n        page_conditions = Conditions(d, \"\")\n        page_conditions.preconditions(\n            d, CapitalComPageSrc.URL, \"\", cur_language, cur_country, cur_role, cur_login, cur_password)\n    \n        test_element = PageInstrumentNotificationButton(d, cur_item_link, bid)\n>       test_element.full_test(d, cur_language, cur_country, cur_role, cur_item_link)\n\ntests/US_01_Markets/US_01-03_Forex/US_01-03-01_forex_tests.py:187: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/Elements/PageInstrumentNotificationButton.py:28: in full_test\n    trade_instrument = self.element_click()\npages/Elements/PageInstrumentNotificationButton.py:75: in element_click\n    if page_.close_signup_form():\npages/Signup_login/signup_login.py:334: in close_signup_form\n    Common().assert_true_false(False, \"Close button on 'Sign up' form is not clickable\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncondition = False, msg = \"Close button on 'Sign up' form is not clickable\"\n\n    @staticmethod\n    def assert_true_false(condition=False, msg=\"\"):\n    \tif condition:\n    \t\tCommon.flag_of_bug = False\n    \t\tassert True, msg\n    \telse:\n    \t\tCommon.flag_of_bug = True\n>   \t\tassert False, msg\nE     AssertionError: Close button on 'Sign up' form is not clickable\n\npages/common.py:191: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"d","time":{"start":1712400573757,"stop":1712400574149,"duration":392},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"worker_id","time":{"start":1712400574149,"stop":1712400574149,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_login","time":{"start":1712400574150,"stop":1712400574150,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_country","time":{"start":1712400574150,"stop":1712400574150,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_language","time":{"start":1712400574150,"stop":1712400574150,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_password","time":{"start":1712400574150,"stop":1712400574150,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_role","time":{"start":1712400966265,"stop":1712400966265,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"\n        Check: Button [Notification] on trading instrument page\n        Language: All. License: All, except FCA.\n        ","status":"failed","statusMessage":"AssertionError: Close button on 'Sign up' form is not clickable","statusTrace":"self = <pages.Elements.PageInstrumentNotificationButton.PageInstrumentNotificationButton object at 0x7fe340107020>\n\n    @allure.step(\"Click button [Notification]\")\n    def element_click(self):\n        print(f\"\\n{datetime.now()}   2. Act_v0\")\n        print(f\"{datetime.now()}   Start Click button [Notification] =>\")\n    \n        button_list = self.driver.find_elements(*PageTradingInstrumentMarketsLocators.BUTTON_NOTIFICATION)\n    \n        if not self.element_is_clickable(button_list[0], 5):\n            print(f\"{datetime.now()} => BUTTON_NOTIFICATION is not clickable after more then 5 sec\")\n            pytest.fail(f\"BUTTON_NOTIFICATION is not clickable more then 5 sec.\")\n        print(f\"{datetime.now()} BUTTON_NOTIFICATION is clickable =>\")\n    \n        try:\n>           button_list[0].click()\n\npages/Elements/PageInstrumentNotificationButton.py:68: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fe34150c6e0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x562badb0290b \\\\u003Cunknown>\\\\n#21 0x562badb129c4 \\\\u003Cunknown>\\\\n#22 0x7fb16c094ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"/eur-chf-rate#\" data-link=\"uu\" data-iid=\"93810675692038\" data-side=\"buy\" data-platform=\"spotlight\" class=\"btn btn--empty btn--round btn--sm js_signup_new js-analyticsVisible js-analyticsClick\" data-type=\"market_alerts\">...</a> is not clickable at point (387, 16). Other element would receive the click: <span class=\"text-accord\">...</span>\nE         (Session info: chrome=123.0.6312.105)\nE       Stacktrace:\nE       #0 0x562badb13873 <unknown>\nE       #1 0x562bad8098c6 <unknown>\nE       #2 0x562bad85b233 <unknown>\nE       #3 0x562bad85914e <unknown>\nE       #4 0x562bad856b27 <unknown>\nE       #5 0x562bad855ed3 <unknown>\nE       #6 0x562bad849507 <unknown>\nE       #7 0x562bad8765a2 <unknown>\nE       #8 0x562bad848e98 <unknown>\nE       #9 0x562bad87676e <unknown>\nE       #10 0x562bad894c19 <unknown>\nE       #11 0x562bad876343 <unknown>\nE       #12 0x562bad847593 <unknown>\nE       #13 0x562bad847f5e <unknown>\nE       #14 0x562badad785b <unknown>\nE       #15 0x562badadb7b5 <unknown>\nE       #16 0x562badac5581 <unknown>\nE       #17 0x562badadc342 <unknown>\nE       #18 0x562badaaa88f <unknown>\nE       #19 0x562badb02738 <unknown>\nE       #20 0x562badb0290b <unknown>\nE       #21 0x562badb129c4 <unknown>\nE       #22 0x7fb16c094ac3 <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <US_01-03-01_forex_tests.TestTradingInstrumentPage object at 0x7fe340d530e0>\nworker_id = 'master'\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"dcf6ed0aa642d272cf314af68574009c\")>\ncur_language = '', cur_country = 'au', cur_role = 'NoReg'\ncur_login = 'test001.miketar+1@gmail.com', cur_password = 'Qwer1234-!@#$'\ncur_item_link = 'https://capital.com/eur-chf-rate'\n\n    @allure.step(\"Start test of button [Notification] on trading instrument page\")\n    @pytest.mark.test_007\n    def test_007_page_instrument_notification_button(\n            self, worker_id, d, cur_language, cur_country, cur_role, cur_login, cur_password, cur_item_link):\n        \"\"\"\n        Check: Button [Notification] on trading instrument page\n        Language: All. License: All, except FCA.\n        \"\"\"\n    \n        bid = build_dynamic_arg_v4(\n            d, worker_id, cur_language, cur_country, cur_role,\n            \"01.03\", \"Markets > Menu item [Forex]\",\n            \".01_007\", \"Testing button [Notification] on trading instrument page\")\n    \n        page_conditions = Conditions(d, \"\")\n        page_conditions.preconditions(\n            d, CapitalComPageSrc.URL, \"\", cur_language, cur_country, cur_role, cur_login, cur_password)\n    \n        test_element = PageInstrumentNotificationButton(d, cur_item_link, bid)\n>       test_element.full_test(d, cur_language, cur_country, cur_role, cur_item_link)\n\ntests/US_01_Markets/US_01-03_Forex/US_01-03-01_forex_tests.py:187: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/Elements/PageInstrumentNotificationButton.py:28: in full_test\n    trade_instrument = self.element_click()\npages/Elements/PageInstrumentNotificationButton.py:75: in element_click\n    if page_.close_signup_form():\npages/Signup_login/signup_login.py:334: in close_signup_form\n    Common().assert_true_false(False, \"Close button on 'Sign up' form is not clickable\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncondition = False, msg = \"Close button on 'Sign up' form is not clickable\"\n\n    @staticmethod\n    def assert_true_false(condition=False, msg=\"\"):\n    \tif condition:\n    \t\tCommon.flag_of_bug = False\n    \t\tassert True, msg\n    \telse:\n    \t\tCommon.flag_of_bug = True\n>   \t\tassert False, msg\nE     AssertionError: Close button on 'Sign up' form is not clickable\n\npages/common.py:191: AssertionError","steps":[{"name":"Start test of button [Notification] on trading instrument page","time":{"start":1712401068123,"stop":1712401074062,"duration":5939},"status":"failed","statusMessage":"AssertionError: Close button on 'Sign up' form is not clickable\n","statusTrace":"  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/tests/US_01_Markets/US_01-03_Forex/US_01-03-01_forex_tests.py\", line 187, in test_007_page_instrument_notification_button\n    test_element.full_test(d, cur_language, cur_country, cur_role, cur_item_link)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/Elements/PageInstrumentNotificationButton.py\", line 28, in full_test\n    trade_instrument = self.element_click()\n                       ^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/Elements/PageInstrumentNotificationButton.py\", line 75, in element_click\n    if page_.close_signup_form():\n       ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/Signup_login/signup_login.py\", line 334, in close_signup_form\n    Common().assert_true_false(False, \"Close button on 'Sign up' form is not clickable\")\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/common.py\", line 191, in assert_true_false\n    assert False, msg\n","steps":[{"name":"Preconditions","time":{"start":1712401068124,"stop":1712401069369,"duration":1245},"status":"passed","steps":[{"name":"2024-04-06 10:49:33.690635   Start Checking Captcha","time":{"start":1712401068335,"stop":1712401069366,"duration":1031},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"dcf6ed0aa642d272cf314af68574009c\")>"},{"name":"host","value":"'https://capital.com/'"},{"name":"end_point","value":"''"},{"name":"cur_language","value":"''"},{"name":"cur_country","value":"'au'"},{"name":"cur_role","value":"'NoReg'"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"}],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Start testing for PageInstrumentNotificationButton of the trading instrument page","time":{"start":1712401069369,"stop":1712401074062,"duration":4693},"status":"failed","statusMessage":"AssertionError: Close button on 'Sign up' form is not clickable\n","statusTrace":"  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/Elements/PageInstrumentNotificationButton.py\", line 28, in full_test\n    trade_instrument = self.element_click()\n                       ^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/Elements/PageInstrumentNotificationButton.py\", line 75, in element_click\n    if page_.close_signup_form():\n       ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/Signup_login/signup_login.py\", line 334, in close_signup_form\n    Common().assert_true_false(False, \"Close button on 'Sign up' form is not clickable\")\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/common.py\", line 191, in assert_true_false\n    assert False, msg\n","steps":[{"name":"2024-04-06 10:49:33.685526   Check that form [Sign up] opened","time":{"start":1712401069381,"stop":1712401070918,"duration":1537},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"timeout","value":"1"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Click button [Notification]","time":{"start":1712401070918,"stop":1712401074061,"duration":3143},"status":"failed","statusMessage":"AssertionError: Close button on 'Sign up' form is not clickable\n","statusTrace":"  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/Elements/PageInstrumentNotificationButton.py\", line 75, in element_click\n    if page_.close_signup_form():\n       ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/Signup_login/signup_login.py\", line 334, in close_signup_form\n    Common().assert_true_false(False, \"Close button on 'Sign up' form is not clickable\")\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/common.py\", line 191, in assert_true_false\n    assert False, msg\n","steps":[{"name":"Close form [Sign up]","time":{"start":1712401072010,"stop":1712401074061,"duration":2051},"status":"failed","statusMessage":"AssertionError: Close button on 'Sign up' form is not clickable\n","statusTrace":"  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/Signup_login/signup_login.py\", line 334, in close_signup_form\n    Common().assert_true_false(False, \"Close button on 'Sign up' form is not clickable\")\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/common.py\", line 191, in assert_true_false\n    assert False, msg\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"dcf6ed0aa642d272cf314af68574009c\")>"},{"name":"cur_language","value":"''"},{"name":"cur_country","value":"'au'"},{"name":"cur_role","value":"'NoReg'"},{"name":"cur_item_link","value":"'https://capital.com/eur-chf-rate'"}],"shouldDisplayMessage":false,"stepsCount":3,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"worker_id","value":"'master'"},{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"dcf6ed0aa642d272cf314af68574009c\")>"},{"name":"cur_language","value":"''"},{"name":"cur_country","value":"'au'"},{"name":"cur_role","value":"'NoReg'"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"},{"name":"cur_item_link","value":"'https://capital.com/eur-chf-rate'"}],"shouldDisplayMessage":false,"stepsCount":6,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"8e9c698e69cc1268","name":"Screenshot","source":"8e9c698e69cc1268.png","type":"image/png","size":107016},{"uid":"230c6c6bc277d4e5","name":"log","source":"230c6c6bc277d4e5.txt","type":"text/plain","size":4768},{"uid":"8470f6f94fded006","name":"stdout","source":"8470f6f94fded006.txt","type":"text/plain","size":2451}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":7,"attachmentsCount":3,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"d::0","time":{"start":1712401080842,"stop":1712401080983,"duration":141},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"epic","value":"US_01.03 | Markets > Menu item [Forex]"},{"name":"feature","value":"Language: en"},{"name":"story","value":"Country: au / Role: NoReg"},{"name":"tag","value":"test_007"},{"name":"tag","value":"us_01_03_01"},{"name":"parentSuite","value":"tests.US_01_Markets.US_01-03_Forex"},{"name":"suite","value":"US_01-03-01_forex_tests"},{"name":"subSuite","value":"TestTradingInstrumentPage"},{"name":"host","value":"fv-az1149-29"},{"name":"thread","value":"11336-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.US_01_Markets.US_01-03_Forex.US_01-03-01_forex_tests"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"cur_country","value":"'au'"},{"name":"cur_item_link","value":"'https://capital.com/eur-chf-rate'"},{"name":"cur_language","value":"''"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"},{"name":"cur_role","value":"'NoReg'"},{"name":"d","value":"'Chrome'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["test_007","us_01_03_01"]},"source":"4e60aceda2b6df9e.json","parameterValues":["'au'","'https://capital.com/eur-chf-rate'","''","'test001.miketar+1@gmail.com'","'Qwer1234-!@#$'","'NoReg'","'Chrome'"]}