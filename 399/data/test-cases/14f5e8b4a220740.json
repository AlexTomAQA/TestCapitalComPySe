{"uid":"14f5e8b4a220740","name":"TC_55!663 (Lang: en) | Bid:55!663-en.eu.Auth","fullName":"tests.US_55_ReTestsManual.artemdashkov.US_55-artemdashkov_ReTestsManual_test.TestManualDetected#test_663_data_in_trading_instrument_on_the_page_shares","historyId":"a9a5e2ae67331c544595b1b66aee6000","time":{"start":1746402972934,"stop":1746403006895,"duration":33961},"description":"\n        Check:  Click the Menu section [Market] >\n                Click Menu item [Shares] >\n                Scroll down to the widget \"Trading instrument\" >\n                Click dropdown [Region] >\n                Choose  United States of America >\n                Click dropdown [Sector] >\n                Choose Financials >\n                Scroll down to the end of the “Trading instrument” widget >\n                Select pages 34 to 49 from the list of “Trading Instrument” widgets\n        Language: EN\n        License/Country: CYSEC\n        Role: NoReg, NoAuth, Auth\n        Author: Artem Dashkov\n        ","descriptionHtml":"<pre><code>    Check:  Click the Menu section [Market] &gt;\n            Click Menu item [Shares] &gt;\n            Scroll down to the widget &quot;Trading instrument&quot; &gt;\n            Click dropdown [Region] &gt;\n            Choose  United States of America &gt;\n            Click dropdown [Sector] &gt;\n            Choose Financials &gt;\n            Scroll down to the end of the “Trading instrument” widget &gt;\n            Select pages 34 to 49 from the list of “Trading Instrument” widgets\n    Language: EN\n    License/Country: CYSEC\n    Role: NoReg, NoAuth, Auth\n    Author: Artem Dashkov\n</code></pre>\n","status":"broken","statusMessage":"selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found in the current frame\n  (Session info: chrome=135.0.7049.114); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nStacktrace:\n#0 0x5626a769075a <unknown>\n#1 0x5626a71434b0 <unknown>\n#2 0x5626a714a0b6 <unknown>\n#3 0x5626a714cc07 <unknown>\n#4 0x5626a71e161e <unknown>\n#5 0x5626a71ba592 <unknown>\n#6 0x5626a71e05e0 <unknown>\n#7 0x5626a71ba363 <unknown>\n#8 0x5626a7186d63 <unknown>\n#9 0x5626a71879c1 <unknown>\n#10 0x5626a7655a6b <unknown>\n#11 0x5626a7659951 <unknown>\n#12 0x5626a763db62 <unknown>\n#13 0x5626a765a4c4 <unknown>\n#14 0x5626a762213f <unknown>\n#15 0x5626a767e6f8 <unknown>\n#16 0x5626a767e8d6 <unknown>\n#17 0x5626a768f5a6 <unknown>\n#18 0x7f583689caa4 <unknown>\n#19 0x7f5836929c3c <unknown>","statusTrace":"self = <selenium.webdriver.remote.webelement.WebElement (session=\"5a5ad5ddd96d72f8cd3e2b89ca2ad4b4\", element=\"f.A284558EAF44BA5631F09FBF34D522EB.d.2A61BBAD704C82E5D003142A495ABC16.e.3137\")>\nname = 'innerText'\n\n    def get_property(self, name) -> str | bool | WebElement | dict:\n        \"\"\"Gets the given property of the element.\n    \n        :Args:\n            - name - Name of the property to retrieve.\n    \n        :Usage:\n            ::\n    \n                text_length = target_element.get_property(\"text_length\")\n        \"\"\"\n        try:\n>           return self._execute(Command.GET_ELEMENT_PROPERTY, {\"name\": name})[\"value\"]\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:131: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:380: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f1b7788be00>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: stale elemen...\\\\n#20 0x5626a768f5a6 \\\\u003Cunknown>\\\\n#21 0x7f583689caa4 \\\\u003Cunknown>\\\\n#22 0x7f5836929c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found in the current frame\nE         (Session info: chrome=135.0.7049.114); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nE       Stacktrace:\nE       #0 0x5626a769075a <unknown>\nE       #1 0x5626a71434b0 <unknown>\nE       #2 0x5626a714a0b6 <unknown>\nE       #3 0x5626a714c928 <unknown>\nE       #4 0x5626a714c9b3 <unknown>\nE       #5 0x5626a718bd86 <unknown>\nE       #6 0x5626a71ba592 <unknown>\nE       #7 0x5626a718836a <unknown>\nE       #8 0x5626a71ba75e <unknown>\nE       #9 0x5626a71e05e0 <unknown>\nE       #10 0x5626a71ba363 <unknown>\nE       #11 0x5626a7186d63 <unknown>\nE       #12 0x5626a71879c1 <unknown>\nE       #13 0x5626a7655a6b <unknown>\nE       #14 0x5626a7659951 <unknown>\nE       #15 0x5626a763db62 <unknown>\nE       #16 0x5626a765a4c4 <unknown>\nE       #17 0x5626a762213f <unknown>\nE       #18 0x5626a767e6f8 <unknown>\nE       #19 0x5626a767e8d6 <unknown>\nE       #20 0x5626a768f5a6 <unknown>\nE       #21 0x7f583689caa4 <unknown>\nE       #22 0x7f5836929c3c <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: StaleElementReferenceException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <US_55-artemdashkov_ReTestsManual_test.TestManualDetected object at 0x7f1b777a0320>\nworker_id = 'master'\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"5a5ad5ddd96d72f8cd3e2b89ca2ad4b4\")>\ncur_language = 'en', cur_country = 'eu', cur_role = 'Auth'\ncur_login = 'test001.miketar+1@gmail.com', cur_password = 'Qwer1234-!@#$'\n\n    @allure.step(\"Start test of the data in 'Trading instrument' widget on the Page 'Shares'\")\n    @pytest.mark.parametrize('cur_language', [\"en\"])\n    @pytest.mark.parametrize('cur_country', [\"eu\"])\n    @pytest.mark.parametrize('cur_role', [\"NoReg\", \"Auth\", \"NoAuth\"])\n    @pytest.mark.bug_663\n    def test_663_data_in_trading_instrument_on_the_page_shares(\n            self, worker_id, d, cur_language, cur_country, cur_role, cur_login, cur_password):\n        \"\"\"\n        Check:  Click the Menu section [Market] >\n                Click Menu item [Shares] >\n                Scroll down to the widget \"Trading instrument\" >\n                Click dropdown [Region] >\n                Choose  United States of America >\n                Click dropdown [Sector] >\n                Choose Financials >\n                Scroll down to the end of the “Trading instrument” widget >\n                Select pages 34 to 49 from the list of “Trading Instrument” widgets\n        Language: EN\n        License/Country: CYSEC\n        Role: NoReg, NoAuth, Auth\n        Author: Artem Dashkov\n        \"\"\"\n    \n        bid = build_dynamic_arg_for_us_55(\n            d, worker_id, cur_language, cur_country, cur_role,\n            \"55\", \"ReTests of Manual Detected Bugs\",\n            \"663\",\n            \"Click the Menu section [Market] > \"\n                \"Click Menu item [Shares] > \"\n                \"Scroll down to the widget 'Trading instrument' > \"\n                \"Click dropdown [Region] > \"\n                \"Choose  United States of America > \"\n                \"Click dropdown [Sector] > \"\n                \"Choose Financials > \"\n                \"Scroll down to the end of the “Trading instrument” widget > \"\n                \"Select pages 34 to 49 from the list of “Trading Instrument” widgets\",\n            False, True\n        )\n        # Arrange\n        cur_item_link = apply_preconditions_to_link(d, cur_language, cur_country, cur_role, cur_login, cur_password)\n        page_menu = from_markets_menu_open_shares.MenuNewShares(d, cur_item_link)\n        link = page_menu.from_markets_menu_open_shares(d, cur_language, cur_country, cur_item_link)\n    \n        test_element = BUG_663(d, link, bid)\n        test_element.arrange(d, link)\n    \n        # Act\n>       test_element.act(d)\n\ntests/US_55_ReTestsManual/artemdashkov/US_55-artemdashkov_ReTestsManual_test.py:1868: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/BugsManual/bug_663.py:108: in act\n    self.text_in_cells.append(value.get_property(\"innerText\"))\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:134: in get_property\n    return self.parent.execute_script(\"return arguments[0][arguments[1]]\", self, name)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:440: in execute_script\n    return self.execute(command, {\"script\": script, \"args\": converted_args})[\"value\"]\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:380: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f1b7788be00>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: stale elemen...\\\\n#17 0x5626a768f5a6 \\\\u003Cunknown>\\\\n#18 0x7f583689caa4 \\\\u003Cunknown>\\\\n#19 0x7f5836929c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found in the current frame\nE         (Session info: chrome=135.0.7049.114); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nE       Stacktrace:\nE       #0 0x5626a769075a <unknown>\nE       #1 0x5626a71434b0 <unknown>\nE       #2 0x5626a714a0b6 <unknown>\nE       #3 0x5626a714cc07 <unknown>\nE       #4 0x5626a71e161e <unknown>\nE       #5 0x5626a71ba592 <unknown>\nE       #6 0x5626a71e05e0 <unknown>\nE       #7 0x5626a71ba363 <unknown>\nE       #8 0x5626a7186d63 <unknown>\nE       #9 0x5626a71879c1 <unknown>\nE       #10 0x5626a7655a6b <unknown>\nE       #11 0x5626a7659951 <unknown>\nE       #12 0x5626a763db62 <unknown>\nE       #13 0x5626a765a4c4 <unknown>\nE       #14 0x5626a762213f <unknown>\nE       #15 0x5626a767e6f8 <unknown>\nE       #16 0x5626a767e8d6 <unknown>\nE       #17 0x5626a768f5a6 <unknown>\nE       #18 0x7f583689caa4 <unknown>\nE       #19 0x7f5836929c3c <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: StaleElementReferenceException","flaky":true,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"d","time":{"start":1746398042578,"stop":1746398043335,"duration":757},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"worker_id","time":{"start":1746398043335,"stop":1746398043335,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_password","time":{"start":1746398043335,"stop":1746398043335,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_login","time":{"start":1746398043335,"stop":1746398043335,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"\n        Check:  Click the Menu section [Market] >\n                Click Menu item [Shares] >\n                Scroll down to the widget \"Trading instrument\" >\n                Click dropdown [Region] >\n                Choose  United States of America >\n                Click dropdown [Sector] >\n                Choose Financials >\n                Scroll down to the end of the “Trading instrument” widget >\n                Select pages 34 to 49 from the list of “Trading Instrument” widgets\n        Language: EN\n        License/Country: CYSEC\n        Role: NoReg, NoAuth, Auth\n        Author: Artem Dashkov\n        ","status":"broken","statusMessage":"selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found in the current frame\n  (Session info: chrome=135.0.7049.114); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nStacktrace:\n#0 0x5626a769075a <unknown>\n#1 0x5626a71434b0 <unknown>\n#2 0x5626a714a0b6 <unknown>\n#3 0x5626a714cc07 <unknown>\n#4 0x5626a71e161e <unknown>\n#5 0x5626a71ba592 <unknown>\n#6 0x5626a71e05e0 <unknown>\n#7 0x5626a71ba363 <unknown>\n#8 0x5626a7186d63 <unknown>\n#9 0x5626a71879c1 <unknown>\n#10 0x5626a7655a6b <unknown>\n#11 0x5626a7659951 <unknown>\n#12 0x5626a763db62 <unknown>\n#13 0x5626a765a4c4 <unknown>\n#14 0x5626a762213f <unknown>\n#15 0x5626a767e6f8 <unknown>\n#16 0x5626a767e8d6 <unknown>\n#17 0x5626a768f5a6 <unknown>\n#18 0x7f583689caa4 <unknown>\n#19 0x7f5836929c3c <unknown>","statusTrace":"self = <selenium.webdriver.remote.webelement.WebElement (session=\"5a5ad5ddd96d72f8cd3e2b89ca2ad4b4\", element=\"f.A284558EAF44BA5631F09FBF34D522EB.d.2A61BBAD704C82E5D003142A495ABC16.e.3137\")>\nname = 'innerText'\n\n    def get_property(self, name) -> str | bool | WebElement | dict:\n        \"\"\"Gets the given property of the element.\n    \n        :Args:\n            - name - Name of the property to retrieve.\n    \n        :Usage:\n            ::\n    \n                text_length = target_element.get_property(\"text_length\")\n        \"\"\"\n        try:\n>           return self._execute(Command.GET_ELEMENT_PROPERTY, {\"name\": name})[\"value\"]\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:131: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:380: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f1b7788be00>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: stale elemen...\\\\n#20 0x5626a768f5a6 \\\\u003Cunknown>\\\\n#21 0x7f583689caa4 \\\\u003Cunknown>\\\\n#22 0x7f5836929c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found in the current frame\nE         (Session info: chrome=135.0.7049.114); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nE       Stacktrace:\nE       #0 0x5626a769075a <unknown>\nE       #1 0x5626a71434b0 <unknown>\nE       #2 0x5626a714a0b6 <unknown>\nE       #3 0x5626a714c928 <unknown>\nE       #4 0x5626a714c9b3 <unknown>\nE       #5 0x5626a718bd86 <unknown>\nE       #6 0x5626a71ba592 <unknown>\nE       #7 0x5626a718836a <unknown>\nE       #8 0x5626a71ba75e <unknown>\nE       #9 0x5626a71e05e0 <unknown>\nE       #10 0x5626a71ba363 <unknown>\nE       #11 0x5626a7186d63 <unknown>\nE       #12 0x5626a71879c1 <unknown>\nE       #13 0x5626a7655a6b <unknown>\nE       #14 0x5626a7659951 <unknown>\nE       #15 0x5626a763db62 <unknown>\nE       #16 0x5626a765a4c4 <unknown>\nE       #17 0x5626a762213f <unknown>\nE       #18 0x5626a767e6f8 <unknown>\nE       #19 0x5626a767e8d6 <unknown>\nE       #20 0x5626a768f5a6 <unknown>\nE       #21 0x7f583689caa4 <unknown>\nE       #22 0x7f5836929c3c <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: StaleElementReferenceException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <US_55-artemdashkov_ReTestsManual_test.TestManualDetected object at 0x7f1b777a0320>\nworker_id = 'master'\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"5a5ad5ddd96d72f8cd3e2b89ca2ad4b4\")>\ncur_language = 'en', cur_country = 'eu', cur_role = 'Auth'\ncur_login = 'test001.miketar+1@gmail.com', cur_password = 'Qwer1234-!@#$'\n\n    @allure.step(\"Start test of the data in 'Trading instrument' widget on the Page 'Shares'\")\n    @pytest.mark.parametrize('cur_language', [\"en\"])\n    @pytest.mark.parametrize('cur_country', [\"eu\"])\n    @pytest.mark.parametrize('cur_role', [\"NoReg\", \"Auth\", \"NoAuth\"])\n    @pytest.mark.bug_663\n    def test_663_data_in_trading_instrument_on_the_page_shares(\n            self, worker_id, d, cur_language, cur_country, cur_role, cur_login, cur_password):\n        \"\"\"\n        Check:  Click the Menu section [Market] >\n                Click Menu item [Shares] >\n                Scroll down to the widget \"Trading instrument\" >\n                Click dropdown [Region] >\n                Choose  United States of America >\n                Click dropdown [Sector] >\n                Choose Financials >\n                Scroll down to the end of the “Trading instrument” widget >\n                Select pages 34 to 49 from the list of “Trading Instrument” widgets\n        Language: EN\n        License/Country: CYSEC\n        Role: NoReg, NoAuth, Auth\n        Author: Artem Dashkov\n        \"\"\"\n    \n        bid = build_dynamic_arg_for_us_55(\n            d, worker_id, cur_language, cur_country, cur_role,\n            \"55\", \"ReTests of Manual Detected Bugs\",\n            \"663\",\n            \"Click the Menu section [Market] > \"\n                \"Click Menu item [Shares] > \"\n                \"Scroll down to the widget 'Trading instrument' > \"\n                \"Click dropdown [Region] > \"\n                \"Choose  United States of America > \"\n                \"Click dropdown [Sector] > \"\n                \"Choose Financials > \"\n                \"Scroll down to the end of the “Trading instrument” widget > \"\n                \"Select pages 34 to 49 from the list of “Trading Instrument” widgets\",\n            False, True\n        )\n        # Arrange\n        cur_item_link = apply_preconditions_to_link(d, cur_language, cur_country, cur_role, cur_login, cur_password)\n        page_menu = from_markets_menu_open_shares.MenuNewShares(d, cur_item_link)\n        link = page_menu.from_markets_menu_open_shares(d, cur_language, cur_country, cur_item_link)\n    \n        test_element = BUG_663(d, link, bid)\n        test_element.arrange(d, link)\n    \n        # Act\n>       test_element.act(d)\n\ntests/US_55_ReTestsManual/artemdashkov/US_55-artemdashkov_ReTestsManual_test.py:1868: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/BugsManual/bug_663.py:108: in act\n    self.text_in_cells.append(value.get_property(\"innerText\"))\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:134: in get_property\n    return self.parent.execute_script(\"return arguments[0][arguments[1]]\", self, name)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:440: in execute_script\n    return self.execute(command, {\"script\": script, \"args\": converted_args})[\"value\"]\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:380: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f1b7788be00>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: stale elemen...\\\\n#17 0x5626a768f5a6 \\\\u003Cunknown>\\\\n#18 0x7f583689caa4 \\\\u003Cunknown>\\\\n#19 0x7f5836929c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found in the current frame\nE         (Session info: chrome=135.0.7049.114); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nE       Stacktrace:\nE       #0 0x5626a769075a <unknown>\nE       #1 0x5626a71434b0 <unknown>\nE       #2 0x5626a714a0b6 <unknown>\nE       #3 0x5626a714cc07 <unknown>\nE       #4 0x5626a71e161e <unknown>\nE       #5 0x5626a71ba592 <unknown>\nE       #6 0x5626a71e05e0 <unknown>\nE       #7 0x5626a71ba363 <unknown>\nE       #8 0x5626a7186d63 <unknown>\nE       #9 0x5626a71879c1 <unknown>\nE       #10 0x5626a7655a6b <unknown>\nE       #11 0x5626a7659951 <unknown>\nE       #12 0x5626a763db62 <unknown>\nE       #13 0x5626a765a4c4 <unknown>\nE       #14 0x5626a762213f <unknown>\nE       #15 0x5626a767e6f8 <unknown>\nE       #16 0x5626a767e8d6 <unknown>\nE       #17 0x5626a768f5a6 <unknown>\nE       #18 0x7f583689caa4 <unknown>\nE       #19 0x7f5836929c3c <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: StaleElementReferenceException","steps":[{"name":"Start test of the data in 'Trading instrument' widget on the Page 'Shares'","time":{"start":1746402972934,"stop":1746403006894,"duration":33960},"status":"broken","statusMessage":"selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found in the current frame\n  (Session info: chrome=135.0.7049.114); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nStacktrace:\n#0 0x5626a769075a <unknown>\n#1 0x5626a71434b0 <unknown>\n#2 0x5626a714a0b6 <unknown>\n#3 0x5626a714cc07 <unknown>\n#4 0x5626a71e161e <unknown>\n#5 0x5626a71ba592 <unknown>\n#6 0x5626a71e05e0 <unknown>\n#7 0x5626a71ba363 <unknown>\n#8 0x5626a7186d63 <unknown>\n#9 0x5626a71879c1 <unknown>\n#10 0x5626a7655a6b <unknown>\n#11 0x5626a7659951 <unknown>\n#12 0x5626a763db62 <unknown>\n#13 0x5626a765a4c4 <unknown>\n#14 0x5626a762213f <unknown>\n#15 0x5626a767e6f8 <unknown>\n#16 0x5626a767e8d6 <unknown>\n#17 0x5626a768f5a6 <unknown>\n#18 0x7f583689caa4 <unknown>\n#19 0x7f5836929c3c <unknown>\n\n","statusTrace":"  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/tests/US_55_ReTestsManual/artemdashkov/US_55-artemdashkov_ReTestsManual_test.py\", line 1868, in test_663_data_in_trading_instrument_on_the_page_shares\n    test_element.act(d)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/BugsManual/bug_663.py\", line 108, in act\n    self.text_in_cells.append(value.get_property(\"innerText\"))\n                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py\", line 134, in get_property\n    return self.parent.execute_script(\"return arguments[0][arguments[1]]\", self, name)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 440, in execute_script\n    return self.execute(command, {\"script\": script, \"args\": converted_args})[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 380, in execute\n    self.error_handler.check_response(response)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[{"name":"Build dynamic argument for TCs of US_55","time":{"start":1746402972934,"stop":1746402972950,"duration":16},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"5a5ad5ddd96d72f8cd3e2b89ca2ad4b4\")>"},{"name":"worker_id","value":"'master'"},{"name":"cur_language","value":"'en'"},{"name":"cur_country","value":"'eu'"},{"name":"cur_role","value":"'Auth'"},{"name":"us","value":"'55'"},{"name":"desc_us","value":"'ReTests of Manual Detected Bugs'"},{"name":"num_tc","value":"'663'"},{"name":"desc_tc","value":"'Click the Menu section [Market] > Click Menu item [Shares] > Scroll down to the widget 'Trading instrument' > Click dropdown [Region] > Choose  United States of America > Click dropdown [Sector] > Choose Financials > Scroll down to the end of the “Trading instrument” widget > Select pages 34 to 49 from the list of “Trading Instrument” widgets'"},{"name":"manual","value":"False"},{"name":"new_layout","value":"True"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"   Set New preconditions","time":{"start":1746402972950,"stop":1746402996605,"duration":23655},"status":"passed","steps":[{"name":"2025-05-04 22:34:02.520701   Start Authorization","time":{"start":1746402985502,"stop":1746402989020,"duration":3518},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"5a5ad5ddd96d72f8cd3e2b89ca2ad4b4\")>"},{"name":"link","value":"'https://capital.com/en-gb'"},{"name":"login","value":"'test001.miketar+1@gmail.com'"},{"name":"password","value":"'Qwer1234-!@#$'"},{"name":"cur_role","value":"'Auth'"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"2025-05-04 22:34:02.520722   Set language and country","time":{"start":1746402989020,"stop":1746402991546,"duration":2526},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"5a5ad5ddd96d72f8cd3e2b89ca2ad4b4\")>"},{"name":"cur_language","value":"'en'"},{"name":"cur_country","value":"'eu'"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"5a5ad5ddd96d72f8cd3e2b89ca2ad4b4\")>"},{"name":"host","value":"'https://capital.com/en-gb'"},{"name":"end_point","value":"''"},{"name":"cur_language","value":"'en'"},{"name":"cur_country","value":"'eu'"},{"name":"cur_role","value":"'Auth'"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"}],"shouldDisplayMessage":false,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Select \"Markets\" menu, \"Shares\" submenu","time":{"start":1746402996605,"stop":1746403004527,"duration":7922},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"5a5ad5ddd96d72f8cd3e2b89ca2ad4b4\")>"},{"name":"cur_language","value":"'en'"},{"name":"cur_country","value":"'eu'"},{"name":"link","value":"'https://capital.com/en-eu'"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"2025-05-04 22:34:02.506923   1. Start Arrange: find block 'What is share trading?', Click link [Shares trading guide], Find the link 'buy and sell physical shares'.","time":{"start":1746403004527,"stop":1746403005789,"duration":1262},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"5a5ad5ddd96d72f8cd3e2b89ca2ad4b4\")>"},{"name":"link","value":"'https://capital.com/en-eu/markets/shares'"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"\n2025-05-04 22:34:02.506947   2. Start Act.","time":{"start":1746403005790,"stop":1746403006892,"duration":1102},"status":"broken","statusMessage":"selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found in the current frame\n  (Session info: chrome=135.0.7049.114); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nStacktrace:\n#0 0x5626a769075a <unknown>\n#1 0x5626a71434b0 <unknown>\n#2 0x5626a714a0b6 <unknown>\n#3 0x5626a714cc07 <unknown>\n#4 0x5626a71e161e <unknown>\n#5 0x5626a71ba592 <unknown>\n#6 0x5626a71e05e0 <unknown>\n#7 0x5626a71ba363 <unknown>\n#8 0x5626a7186d63 <unknown>\n#9 0x5626a71879c1 <unknown>\n#10 0x5626a7655a6b <unknown>\n#11 0x5626a7659951 <unknown>\n#12 0x5626a763db62 <unknown>\n#13 0x5626a765a4c4 <unknown>\n#14 0x5626a762213f <unknown>\n#15 0x5626a767e6f8 <unknown>\n#16 0x5626a767e8d6 <unknown>\n#17 0x5626a768f5a6 <unknown>\n#18 0x7f583689caa4 <unknown>\n#19 0x7f5836929c3c <unknown>\n\n","statusTrace":"  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/BugsManual/bug_663.py\", line 108, in act\n    self.text_in_cells.append(value.get_property(\"innerText\"))\n                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py\", line 134, in get_property\n    return self.parent.execute_script(\"return arguments[0][arguments[1]]\", self, name)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 440, in execute_script\n    return self.execute(command, {\"script\": script, \"args\": converted_args})[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 380, in execute\n    self.error_handler.check_response(response)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[{"uid":"ba90bba45bdea469","name":"After click on last page'","source":"ba90bba45bdea469.png","type":"image/png","size":125716},{"uid":"4624d8254fd25acf","name":"After click on pre last page'","source":"4624d8254fd25acf.png","type":"image/png","size":125869}],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"5a5ad5ddd96d72f8cd3e2b89ca2ad4b4\")>"}],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":2,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"worker_id","value":"'master'"},{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"5a5ad5ddd96d72f8cd3e2b89ca2ad4b4\")>"},{"name":"cur_language","value":"'en'"},{"name":"cur_country","value":"'eu'"},{"name":"cur_role","value":"'Auth'"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"}],"shouldDisplayMessage":false,"stepsCount":7,"attachmentsCount":2,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"c5ed7d92a0cb25a8","name":"Screenshot","source":"c5ed7d92a0cb25a8.png","type":"image/png","size":138335},{"uid":"b426504ff65951df","name":"log","source":"b426504ff65951df.txt","type":"text/plain","size":2818},{"uid":"225c61abca1c43d1","name":"stdout","source":"225c61abca1c43d1.txt","type":"text/plain","size":6109}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":8,"attachmentsCount":5,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"d::0","time":{"start":1746404158621,"stop":1746404159202,"duration":581},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"epic","value":"TC_55!663 | Click the Menu section [Market] > Click Menu item [Shares] > Scroll down to the widget 'Trading instrument' > Click dropdown [Region] > Choose  United States of America > Click dropdown [Sector] > Choose Financials > Scroll down to the end of the “Trading instrument” widget > Select pages 34 to 49 from the list of “Trading Instrument” widgets"},{"name":"feature","value":"Role: Auth"},{"name":"story","value":"Country: eu"},{"name":"tag","value":"bug_663"},{"name":"tag","value":"us_55"},{"name":"parentSuite","value":"tests.US_55_ReTestsManual.artemdashkov"},{"name":"suite","value":"US_55-artemdashkov_ReTestsManual_test"},{"name":"subSuite","value":"TestManualDetected"},{"name":"host","value":"fv-az1674-335"},{"name":"thread","value":"5737-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.US_55_ReTestsManual.artemdashkov.US_55-artemdashkov_ReTestsManual_test"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"cur_country","value":"'eu'"},{"name":"cur_language","value":"'en'"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"},{"name":"cur_role","value":"'Auth'"},{"name":"d","value":"'Chrome'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":2,"skipped":0,"passed":4,"unknown":0,"total":8},"items":[{"uid":"5b9ac00f6606ea5b","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/398//#testresult/5b9ac00f6606ea5b","status":"passed","time":{"start":1746316478144,"stop":1746316513959,"duration":35815}},{"uid":"61b529ece2b05641","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/397//#testresult/61b529ece2b05641","status":"passed","time":{"start":1746230973060,"stop":1746231007860,"duration":34800}},{"uid":"13e5e43be3b4573a","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/396//#testresult/13e5e43be3b4573a","status":"failed","statusDetails":"Failed: Cells in trading instrument have empty value.","time":{"start":1746143735200,"stop":1746143767958,"duration":32758}},{"uid":"c66ea49fdeba339c","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/395//#testresult/c66ea49fdeba339c","status":"passed","time":{"start":1746057127517,"stop":1746057161700,"duration":34183}},{"uid":"771481c5f7086ed5","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/394//#testresult/771481c5f7086ed5","status":"failed","statusDetails":"Failed: Cells in trading instrument have empty value.","time":{"start":1745970783947,"stop":1745970816985,"duration":33038}},{"uid":"c3fa6a92f0581286","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/393//#testresult/c3fa6a92f0581286","status":"broken","statusDetails":"selenium.common.exceptions.TimeoutException: Message:","time":{"start":1745885639635,"stop":1745885677787,"duration":38152}},{"uid":"acaf48872960a1a3","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/392//#testresult/acaf48872960a1a3","status":"passed","time":{"start":1745799256142,"stop":1745799290396,"duration":34254}}]},"tags":["us_55","bug_663"]},"source":"14f5e8b4a220740.json","parameterValues":["'eu'","'en'","'test001.miketar+1@gmail.com'","'Qwer1234-!@#$'","'Auth'","'Chrome'"]}