{"uid":"9978278cd852ac22","name":"TC_55!513 (Lang: en) | Bid:55!513-en.au.NoReg","fullName":"tests.US_55_ReTestsManual.K_Alex_N.US_55_K_Alex_N_ReTestsManual_test.TestManualDetectedBugs#test_513","historyId":"102fb8074748c98869cea4527ac781ab","time":{"start":1737685912113,"stop":1737685971879,"duration":59766},"description":"\n         Check: Hover over to [Markets] menu section >\n                Click to [Market analysis] menu item>  \n                Go through pages and find article \"Solana price prediction: Can SOL rebound?\" >\n                Click to [Solana to US Dollar] anchor link in \"Table of Contents\" block\n\n         Language: EN\n         License: ASIC\n         Author: Aleksei Kurochkin\n         ","descriptionHtml":"<pre><code>     Check: Hover over to [Markets] menu section &gt;\n            Click to [Market analysis] menu item&gt;  \n            Go through pages and find article &quot;Solana price prediction: Can SOL rebound?&quot; &gt;\n            Click to [Solana to US Dollar] anchor link in &quot;Table of Contents&quot; block\n\n     Language: EN\n     License: ASIC\n     Author: Aleksei Kurochkin\n</code></pre>\n","status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <b class=\"\">...</b> is not clickable at point (713, 11). Other element would receive the click: <span class=\"text-accord\">...</span>\n  (Session info: chrome=132.0.6834.83)\nStacktrace:\n#0 0x565540bebdca <unknown>\n#1 0x5655406e23f0 <unknown>\n#2 0x565540738dde <unknown>\n#3 0x565540736d13 <unknown>\n#4 0x565540734422 <unknown>\n#5 0x565540733643 <unknown>\n#6 0x5655407262bd <unknown>\n#7 0x565540756a92 <unknown>\n#8 0x565540725c48 <unknown>\n#9 0x565540756c5e <unknown>\n#10 0x5655407754b3 <unknown>\n#11 0x565540756833 <unknown>\n#12 0x5655407235a0 <unknown>\n#13 0x565540724ece <unknown>\n#14 0x565540bb5bdb <unknown>\n#15 0x565540bb9b67 <unknown>\n#16 0x565540ba13bc <unknown>\n#17 0x565540bba727 <unknown>\n#18 0x565540b8574f <unknown>\n#19 0x565540bda938 <unknown>\n#20 0x565540bdab00 <unknown>\n#21 0x565540beac46 <unknown>\n#22 0x7f664c29ca94 <unknown>\n#23 0x7f664c329c3c <unknown>","statusTrace":"self = <US_55_K_Alex_N_ReTestsManual_test.TestManualDetectedBugs object at 0x7fc39b43e9c0>\nworker_id = 'master'\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"b30cc9bdb48b04f742393a2b012a8ad9\")>\ncur_language = '', cur_country = 'au', cur_role = 'NoReg'\ncur_login = 'test001.miketar+1@gmail.com', cur_password = 'Qwer1234-!@#$'\n\n    @pytest.mark.parametrize('cur_language', [''])\n    @pytest.mark.parametrize('cur_country', ['au'])\n    @pytest.mark.parametrize('cur_role', random.sample(['Auth', 'NoAuth', 'NoReg'], 1))\n    def test_513(self, worker_id, d, cur_language, cur_country, cur_role, cur_login, cur_password):\n    \n        \"\"\"\n         Check: Hover over to [Markets] menu section >\n                Click to [Market analysis] menu item>\n                Go through pages and find article \"Solana price prediction: Can SOL rebound?\" >\n                Click to [Solana to US Dollar] anchor link in \"Table of Contents\" block\n    \n         Language: EN\n         License: ASIC\n         Author: Aleksei Kurochkin\n         \"\"\"\n        test = self\n        self.cur_language = cur_language\n        self.cur_country = cur_country\n        self.driver = d\n    \n        self.bid = build_dynamic_arg_for_us_55(\n            d, worker_id, cur_language, cur_country, cur_role,\n            \"55\", \"ReTests of Manual Detected Bugs\",\n            \"513\",\n            'Hover over to [Markets] menu section > Click to [Market analysis] menu item > '\n            'Go through pages and find article \"Solana price prediction: Can SOL rebound?\" > '\n            'Click to [Solana to US Dollar] anchor link in \"Table of Contents\" block',\n            False,\n            False\n        )\n    \n        # Arrange\n        self.link = apply_preconditions_to_link(d, cur_language, cur_country, cur_role, cur_login, cur_password)\n        self.bug = Bug513(test)\n        self.bug.open_market_analysis_page(test)\n>       MyCommon.search_and_open_an_article_in_market_analysis_page(d, \"Solana price prediction\")\n\ntests/US_55_ReTestsManual/K_Alex_N/US_55_K_Alex_N_ReTestsManual_test.py:374: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/US_55_ReTestsManual/K_Alex_N/MyCommon.py:50: in search_and_open_an_article_in_market_analysis_page\n    open_the_article()\ntests/US_55_ReTestsManual/K_Alex_N/MyCommon.py:41: in open_the_article\n    driver.find_element(*ARTICLE_LOCATOR).click()\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:380: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fc39b27cb00>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#21 0x565540beac46 \\\\u003Cunknown>\\\\n#22 0x7f664c29ca94 \\\\u003Cunknown>\\\\n#23 0x7f664c329c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <b class=\"\">...</b> is not clickable at point (713, 11). Other element would receive the click: <span class=\"text-accord\">...</span>\nE         (Session info: chrome=132.0.6834.83)\nE       Stacktrace:\nE       #0 0x565540bebdca <unknown>\nE       #1 0x5655406e23f0 <unknown>\nE       #2 0x565540738dde <unknown>\nE       #3 0x565540736d13 <unknown>\nE       #4 0x565540734422 <unknown>\nE       #5 0x565540733643 <unknown>\nE       #6 0x5655407262bd <unknown>\nE       #7 0x565540756a92 <unknown>\nE       #8 0x565540725c48 <unknown>\nE       #9 0x565540756c5e <unknown>\nE       #10 0x5655407754b3 <unknown>\nE       #11 0x565540756833 <unknown>\nE       #12 0x5655407235a0 <unknown>\nE       #13 0x565540724ece <unknown>\nE       #14 0x565540bb5bdb <unknown>\nE       #15 0x565540bb9b67 <unknown>\nE       #16 0x565540ba13bc <unknown>\nE       #17 0x565540bba727 <unknown>\nE       #18 0x565540b8574f <unknown>\nE       #19 0x565540bda938 <unknown>\nE       #20 0x565540bdab00 <unknown>\nE       #21 0x565540beac46 <unknown>\nE       #22 0x7f664c29ca94 <unknown>\nE       #23 0x7f664c329c3c <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"d","time":{"start":1737685488448,"stop":1737685489093,"duration":645},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"worker_id","time":{"start":1737685489093,"stop":1737685489093,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_password","time":{"start":1737685689609,"stop":1737685689609,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_login","time":{"start":1737685689609,"stop":1737685689609,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"\n         Check: Hover over to [Markets] menu section >\n                Click to [Market analysis] menu item>  \n                Go through pages and find article \"Solana price prediction: Can SOL rebound?\" >\n                Click to [Solana to US Dollar] anchor link in \"Table of Contents\" block\n\n         Language: EN\n         License: ASIC\n         Author: Aleksei Kurochkin\n         ","status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <b class=\"\">...</b> is not clickable at point (713, 11). Other element would receive the click: <span class=\"text-accord\">...</span>\n  (Session info: chrome=132.0.6834.83)\nStacktrace:\n#0 0x565540bebdca <unknown>\n#1 0x5655406e23f0 <unknown>\n#2 0x565540738dde <unknown>\n#3 0x565540736d13 <unknown>\n#4 0x565540734422 <unknown>\n#5 0x565540733643 <unknown>\n#6 0x5655407262bd <unknown>\n#7 0x565540756a92 <unknown>\n#8 0x565540725c48 <unknown>\n#9 0x565540756c5e <unknown>\n#10 0x5655407754b3 <unknown>\n#11 0x565540756833 <unknown>\n#12 0x5655407235a0 <unknown>\n#13 0x565540724ece <unknown>\n#14 0x565540bb5bdb <unknown>\n#15 0x565540bb9b67 <unknown>\n#16 0x565540ba13bc <unknown>\n#17 0x565540bba727 <unknown>\n#18 0x565540b8574f <unknown>\n#19 0x565540bda938 <unknown>\n#20 0x565540bdab00 <unknown>\n#21 0x565540beac46 <unknown>\n#22 0x7f664c29ca94 <unknown>\n#23 0x7f664c329c3c <unknown>","statusTrace":"self = <US_55_K_Alex_N_ReTestsManual_test.TestManualDetectedBugs object at 0x7fc39b43e9c0>\nworker_id = 'master'\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"b30cc9bdb48b04f742393a2b012a8ad9\")>\ncur_language = '', cur_country = 'au', cur_role = 'NoReg'\ncur_login = 'test001.miketar+1@gmail.com', cur_password = 'Qwer1234-!@#$'\n\n    @pytest.mark.parametrize('cur_language', [''])\n    @pytest.mark.parametrize('cur_country', ['au'])\n    @pytest.mark.parametrize('cur_role', random.sample(['Auth', 'NoAuth', 'NoReg'], 1))\n    def test_513(self, worker_id, d, cur_language, cur_country, cur_role, cur_login, cur_password):\n    \n        \"\"\"\n         Check: Hover over to [Markets] menu section >\n                Click to [Market analysis] menu item>\n                Go through pages and find article \"Solana price prediction: Can SOL rebound?\" >\n                Click to [Solana to US Dollar] anchor link in \"Table of Contents\" block\n    \n         Language: EN\n         License: ASIC\n         Author: Aleksei Kurochkin\n         \"\"\"\n        test = self\n        self.cur_language = cur_language\n        self.cur_country = cur_country\n        self.driver = d\n    \n        self.bid = build_dynamic_arg_for_us_55(\n            d, worker_id, cur_language, cur_country, cur_role,\n            \"55\", \"ReTests of Manual Detected Bugs\",\n            \"513\",\n            'Hover over to [Markets] menu section > Click to [Market analysis] menu item > '\n            'Go through pages and find article \"Solana price prediction: Can SOL rebound?\" > '\n            'Click to [Solana to US Dollar] anchor link in \"Table of Contents\" block',\n            False,\n            False\n        )\n    \n        # Arrange\n        self.link = apply_preconditions_to_link(d, cur_language, cur_country, cur_role, cur_login, cur_password)\n        self.bug = Bug513(test)\n        self.bug.open_market_analysis_page(test)\n>       MyCommon.search_and_open_an_article_in_market_analysis_page(d, \"Solana price prediction\")\n\ntests/US_55_ReTestsManual/K_Alex_N/US_55_K_Alex_N_ReTestsManual_test.py:374: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/US_55_ReTestsManual/K_Alex_N/MyCommon.py:50: in search_and_open_an_article_in_market_analysis_page\n    open_the_article()\ntests/US_55_ReTestsManual/K_Alex_N/MyCommon.py:41: in open_the_article\n    driver.find_element(*ARTICLE_LOCATOR).click()\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:380: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fc39b27cb00>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#21 0x565540beac46 \\\\u003Cunknown>\\\\n#22 0x7f664c29ca94 \\\\u003Cunknown>\\\\n#23 0x7f664c329c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <b class=\"\">...</b> is not clickable at point (713, 11). Other element would receive the click: <span class=\"text-accord\">...</span>\nE         (Session info: chrome=132.0.6834.83)\nE       Stacktrace:\nE       #0 0x565540bebdca <unknown>\nE       #1 0x5655406e23f0 <unknown>\nE       #2 0x565540738dde <unknown>\nE       #3 0x565540736d13 <unknown>\nE       #4 0x565540734422 <unknown>\nE       #5 0x565540733643 <unknown>\nE       #6 0x5655407262bd <unknown>\nE       #7 0x565540756a92 <unknown>\nE       #8 0x565540725c48 <unknown>\nE       #9 0x565540756c5e <unknown>\nE       #10 0x5655407754b3 <unknown>\nE       #11 0x565540756833 <unknown>\nE       #12 0x5655407235a0 <unknown>\nE       #13 0x565540724ece <unknown>\nE       #14 0x565540bb5bdb <unknown>\nE       #15 0x565540bb9b67 <unknown>\nE       #16 0x565540ba13bc <unknown>\nE       #17 0x565540bba727 <unknown>\nE       #18 0x565540b8574f <unknown>\nE       #19 0x565540bda938 <unknown>\nE       #20 0x565540bdab00 <unknown>\nE       #21 0x565540beac46 <unknown>\nE       #22 0x7f664c29ca94 <unknown>\nE       #23 0x7f664c329c3c <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","steps":[{"name":"Build dynamic argument for TCs of US_55","time":{"start":1737685912113,"stop":1737685912146,"duration":33},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"b30cc9bdb48b04f742393a2b012a8ad9\")>"},{"name":"worker_id","value":"'master'"},{"name":"cur_language","value":"''"},{"name":"cur_country","value":"'au'"},{"name":"cur_role","value":"'NoReg'"},{"name":"us","value":"'55'"},{"name":"desc_us","value":"'ReTests of Manual Detected Bugs'"},{"name":"num_tc","value":"'513'"},{"name":"desc_tc","value":"'Hover over to [Markets] menu section > Click to [Market analysis] menu item > Go through pages and find article \"Solana price prediction: Can SOL rebound?\" > Click to [Solana to US Dollar] anchor link in \"Table of Contents\" block'"},{"name":"manual","value":"False"},{"name":"new_layout","value":"False"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"   Set New preconditions","time":{"start":1737685912147,"stop":1737685921906,"duration":9759},"status":"passed","steps":[{"name":"2025-01-24 02:24:48.430966   Set language and country","time":{"start":1737685919632,"stop":1737685921898,"duration":2266},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"b30cc9bdb48b04f742393a2b012a8ad9\")>"},{"name":"cur_language","value":"'en'"},{"name":"cur_country","value":"'au'"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"b30cc9bdb48b04f742393a2b012a8ad9\")>"},{"name":"host","value":"'https://capital.com/en-gb'"},{"name":"end_point","value":"''"},{"name":"cur_language","value":"''"},{"name":"cur_country","value":"'au'"},{"name":"cur_role","value":"'NoReg'"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"}],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Select \"Markets\" menu, \"Market analysis\" submenu","time":{"start":1737685921906,"stop":1737685929876,"duration":7970},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"b30cc9bdb48b04f742393a2b012a8ad9\")>"},{"name":"cur_language","value":"''"},{"name":"cur_country","value":"'au'"},{"name":"link","value":"'https://capital.com/en-au'"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"a1a6bf07cc9197b8","name":"Screenshot","source":"a1a6bf07cc9197b8.png","type":"image/png","size":306366},{"uid":"fc001b7576dce777","name":"stdout","source":"fc001b7576dce777.txt","type":"text/plain","size":3945}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"d::0","time":{"start":1737686035615,"stop":1737686035872,"duration":257},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"epic","value":"TC_55!513 | Hover over to [Markets] menu section > Click to [Market analysis] menu item > Go through pages and find article \"Solana price prediction: Can SOL rebound?\" > Click to [Solana to US Dollar] anchor link in \"Table of Contents\" block"},{"name":"feature","value":"Role: NoReg"},{"name":"story","value":"Country: au"},{"name":"tag","value":"us_55"},{"name":"parentSuite","value":"tests.US_55_ReTestsManual.K_Alex_N"},{"name":"suite","value":"US_55_K_Alex_N_ReTestsManual_test"},{"name":"subSuite","value":"TestManualDetectedBugs"},{"name":"host","value":"fv-az1390-841"},{"name":"thread","value":"46101-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.US_55_ReTestsManual.K_Alex_N.US_55_K_Alex_N_ReTestsManual_test"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"cur_country","value":"'au'"},{"name":"cur_language","value":"''"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"},{"name":"cur_role","value":"'NoReg'"},{"name":"d","value":"'Chrome'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":4,"broken":6,"skipped":0,"passed":0,"unknown":0,"total":10},"items":[{"uid":"218298d5f5f8abaf","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/296//#testresult/218298d5f5f8abaf","status":"failed","statusDetails":"Failed: Bug # 55!513 link to part2 in table of content do not work","time":{"start":1737513377686,"stop":1737513437133,"duration":59447}},{"uid":"74ea6e8240286a05","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/289//#testresult/74ea6e8240286a05","status":"broken","statusDetails":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <b class=\"\">...</b> is not clickable at point (713, 10). Other element would receive the click: <span class=\"text-accord\">...</span>\n  (Session info: chrome=131.0.6778.204)\nStacktrace:\n#0 0x560dd63591fa <unknown>\n#1 0x560dd5e69810 <unknown>\n#2 0x560dd5ebf206 <unknown>\n#3 0x560dd5ebd16d <unknown>\n#4 0x560dd5eba885 <unknown>\n#5 0x560dd5eb9a48 <unknown>\n#6 0x560dd5ead1f5 <unknown>\n#7 0x560dd5edc582 <unknown>\n#8 0x560dd5eacb38 <unknown>\n#9 0x560dd5edc74e <unknown>\n#10 0x560dd5efb007 <unknown>\n#11 0x560dd5edc323 <unknown>\n#12 0x560dd5eaade0 <unknown>\n#13 0x560dd5eabdbe <unknown>\n#14 0x560dd632512b <unknown>\n#15 0x560dd63290c7 <unknown>\n#16 0x560dd63126cc <unknown>\n#17 0x560dd6329c47 <unknown>\n#18 0x560dd62f767f <unknown>\n#19 0x560dd6348288 <unknown>\n#20 0x560dd6348450 <unknown>\n#21 0x560dd6358076 <unknown>\n#22 0x7f5b69c9ca94 <unknown>\n#23 0x7f5b69d29c3c <unknown>","time":{"start":1736906519190,"stop":1736906574161,"duration":54971}},{"uid":"ff23ead312a15553","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/287//#testresult/ff23ead312a15553","status":"failed","statusDetails":"Failed: Bug # 55!513 link to part2 in table of content do not work","time":{"start":1736734675475,"stop":1736734729408,"duration":53933}},{"uid":"f548f2663f956f72","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/286//#testresult/f548f2663f956f72","status":"failed","statusDetails":"Failed: Bug # 55!513 link to part2 in table of content do not work","time":{"start":1736647386386,"stop":1736647440655,"duration":54269}},{"uid":"ff4850d5bb338190","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/285//#testresult/ff4850d5bb338190","status":"failed","statusDetails":"Failed: Bug # 55!513 link to part2 in table of content do not work","time":{"start":1736560763780,"stop":1736560813336,"duration":49556}},{"uid":"1bec8ff60fcfb8d4","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/281//#testresult/1bec8ff60fcfb8d4","status":"broken","statusDetails":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <b class=\"\">...</b> is not clickable at point (713, 108). Other element would receive the click: <a class=\"js-analyticsClick link_link__caosC\" data-type=\"nav_id1256\" href=\"/en-au/markets\">...</a>\n  (Session info: chrome=131.0.6778.139)\nStacktrace:\n#0 0x562352a7b8fa <unknown>\n#1 0x56235258cd20 <unknown>\n#2 0x5623525e2766 <unknown>\n#3 0x5623525e06cd <unknown>\n#4 0x5623525ddde5 <unknown>\n#5 0x5623525dcfa8 <unknown>\n#6 0x5623525d0765 <unknown>\n#7 0x5623525ffaf2 <unknown>\n#8 0x5623525d00a8 <unknown>\n#9 0x5623525ffcbe <unknown>\n#10 0x56235261e560 <unknown>\n#11 0x5623525ff893 <unknown>\n#12 0x5623525ce30d <unknown>\n#13 0x5623525cf32e <unknown>\n#14 0x562352a4800b <unknown>\n#15 0x562352a4bf97 <unknown>\n#16 0x562352a3471c <unknown>\n#17 0x562352a4cb17 <unknown>\n#18 0x562352a196cf <unknown>\n#19 0x562352a6a6b8 <unknown>\n#20 0x562352a6a880 <unknown>\n#21 0x562352a7a776 <unknown>\n#22 0x7f001729ca94 <unknown>\n#23 0x7f0017329c3c <unknown>","time":{"start":1736215258392,"stop":1736215308514,"duration":50122}},{"uid":"3c7a4c6f4c04bb5c","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/276//#testresult/3c7a4c6f4c04bb5c","status":"broken","statusDetails":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <b class=\"\">...</b> is not clickable at point (713, 11). Other element would receive the click: <span class=\"text-accord\">...</span>\n  (Session info: chrome=131.0.6778.139)\nStacktrace:\n#0 0x55ced40418fa <unknown>\n#1 0x55ced3b52d20 <unknown>\n#2 0x55ced3ba8766 <unknown>\n#3 0x55ced3ba66cd <unknown>\n#4 0x55ced3ba3de5 <unknown>\n#5 0x55ced3ba2fa8 <unknown>\n#6 0x55ced3b96765 <unknown>\n#7 0x55ced3bc5af2 <unknown>\n#8 0x55ced3b960a8 <unknown>\n#9 0x55ced3bc5cbe <unknown>\n#10 0x55ced3be4560 <unknown>\n#11 0x55ced3bc5893 <unknown>\n#12 0x55ced3b9430d <unknown>\n#13 0x55ced3b9532e <unknown>\n#14 0x55ced400e00b <unknown>\n#15 0x55ced4011f97 <unknown>\n#16 0x55ced3ffa71c <unknown>\n#17 0x55ced4012b17 <unknown>\n#18 0x55ced3fdf6cf <unknown>\n#19 0x55ced40306b8 <unknown>\n#20 0x55ced4030880 <unknown>\n#21 0x55ced4040776 <unknown>\n#22 0x7fa7b8a9ca94 <unknown>\n#23 0x7fa7b8b29c3c <unknown>","time":{"start":1735783381606,"stop":1735783431224,"duration":49618}},{"uid":"fb218db0036fec39","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/275//#testresult/fb218db0036fec39","status":"broken","statusDetails":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <b class=\"\">...</b> is not clickable at point (713, 11). Other element would receive the click: <span class=\"text-accord\">...</span>\n  (Session info: chrome=131.0.6778.139)\nStacktrace:\n#0 0x55d3a6d708fa <unknown>\n#1 0x55d3a6881d20 <unknown>\n#2 0x55d3a68d7766 <unknown>\n#3 0x55d3a68d56cd <unknown>\n#4 0x55d3a68d2de5 <unknown>\n#5 0x55d3a68d1fa8 <unknown>\n#6 0x55d3a68c5765 <unknown>\n#7 0x55d3a68f4af2 <unknown>\n#8 0x55d3a68c50a8 <unknown>\n#9 0x55d3a68f4cbe <unknown>\n#10 0x55d3a6913560 <unknown>\n#11 0x55d3a68f4893 <unknown>\n#12 0x55d3a68c330d <unknown>\n#13 0x55d3a68c432e <unknown>\n#14 0x55d3a6d3d00b <unknown>\n#15 0x55d3a6d40f97 <unknown>\n#16 0x55d3a6d2971c <unknown>\n#17 0x55d3a6d41b17 <unknown>\n#18 0x55d3a6d0e6cf <unknown>\n#19 0x55d3a6d5f6b8 <unknown>\n#20 0x55d3a6d5f880 <unknown>\n#21 0x55d3a6d6f776 <unknown>\n#22 0x7f1de509ca94 <unknown>\n#23 0x7f1de5129c3c <unknown>","time":{"start":1735697424380,"stop":1735697474220,"duration":49840}},{"uid":"6f0f81af58a46926","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/273//#testresult/6f0f81af58a46926","status":"broken","statusDetails":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <b class=\"\">...</b> is not clickable at point (713, 11). Other element would receive the click: <span class=\"text-accord\">...</span>\n  (Session info: chrome=131.0.6778.139)\nStacktrace:\n#0 0x5619739b58fa <unknown>\n#1 0x5619734c6d20 <unknown>\n#2 0x56197351c766 <unknown>\n#3 0x56197351a6cd <unknown>\n#4 0x561973517de5 <unknown>\n#5 0x561973516fa8 <unknown>\n#6 0x56197350a765 <unknown>\n#7 0x561973539af2 <unknown>\n#8 0x56197350a0a8 <unknown>\n#9 0x561973539cbe <unknown>\n#10 0x561973558560 <unknown>\n#11 0x561973539893 <unknown>\n#12 0x56197350830d <unknown>\n#13 0x56197350932e <unknown>\n#14 0x56197398200b <unknown>\n#15 0x561973985f97 <unknown>\n#16 0x56197396e71c <unknown>\n#17 0x561973986b17 <unknown>\n#18 0x5619739536cf <unknown>\n#19 0x5619739a46b8 <unknown>\n#20 0x5619739a4880 <unknown>\n#21 0x5619739b4776 <unknown>\n#22 0x7f8bdb29ca94 <unknown>\n#23 0x7f8bdb329c3c <unknown>","time":{"start":1735523188769,"stop":1735523238913,"duration":50144}}]},"tags":["us_55"]},"source":"9978278cd852ac22.json","parameterValues":["'au'","''","'test001.miketar+1@gmail.com'","'Qwer1234-!@#$'","'NoReg'","'Chrome'"]}