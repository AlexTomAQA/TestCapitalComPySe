{"uid":"d478102969545450","name":"TC_55!379 (Lang: en) | Bid:55!379-en.ua.NoReg","fullName":"tests.US_55_ReTestsManual.saii-d3v.US_55-saii-d3v_ReTestsManual_test.TestManualDetectedBugs#test_379","historyId":"4c4b6acf56e2a5845a438e293bc5bf89","time":{"start":1733793754471,"stop":1733793775758,"duration":21287},"description":"\n         Check: Only the text of the [Inflation news] button is displayed\n         without clickable area and button styling on the sidebar of the \"Market Analysis\" page,\n         when SCB license and EN language are selected.\n         Language: EN.\n         License: SCB.\n         Author: Sergey Aiidzhanov\n         ","descriptionHtml":"<pre><code>     Check: Only the text of the [Inflation news] button is displayed\n     without clickable area and button styling on the sidebar of the &quot;Market Analysis&quot; page,\n     when SCB license and EN language are selected.\n     Language: EN.\n     License: SCB.\n     Author: Sergey Aiidzhanov\n</code></pre>\n","status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"https://capital.com/./market-analysis\" class=\"cc-nav__link cc-nav__link--lvl1 js-analyticsClick\" data-type=\"nav_id10\">...</a> is not clickable at point (1173, 77). Other element would receive the click: <div class=\"overlay\" id=\"l_overlay\">...</div>\n  (Session info: chrome=131.0.6778.85)\nStacktrace:\n#0 0x5563ad2f434a <unknown>\n#1 0x5563ace0a6e0 <unknown>\n#2 0x5563ace600f6 <unknown>\n#3 0x5563ace5e05d <unknown>\n#4 0x5563ace5b775 <unknown>\n#5 0x5563ace5a92f <unknown>\n#6 0x5563ace4e0d5 <unknown>\n#7 0x5563ace7d462 <unknown>\n#8 0x5563ace4da18 <unknown>\n#9 0x5563ace7d62e <unknown>\n#10 0x5563ace9bed7 <unknown>\n#11 0x5563ace7d203 <unknown>\n#12 0x5563ace4bcc0 <unknown>\n#13 0x5563ace4cc9e <unknown>\n#14 0x5563ad2c1d3b <unknown>\n#15 0x5563ad2c5cc2 <unknown>\n#16 0x5563ad2aeb6c <unknown>\n#17 0x5563ad2c6837 <unknown>\n#18 0x5563ad29410f <unknown>\n#19 0x5563ad2e35a8 <unknown>\n#20 0x5563ad2e3770 <unknown>\n#21 0x5563ad2f31c6 <unknown>\n#22 0x7fb6b4694ac3 <unknown>","statusTrace":"self = <US_55-saii-d3v_ReTestsManual_test.TestManualDetectedBugs object at 0x7fd406eb1a60>\nworker_id = 'master'\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"edc2d141eda5326c585086c6dd3151f9\")>\ncur_language = '', cur_country = 'ua', cur_role = 'NoReg'\ncur_login = 'test001.miketar+1@gmail.com', cur_password = 'Qwer1234-!@#$'\n\n    @allure.step(\n        'Start retest manual TC_55!379 | Only the text of the [Inflation news] button '\n        'is displayed without clickable area and button styling on the sidebar of the \"Market Analysis\" page, '\n        'when SCB license and EN language are selected.')\n    @pytest.mark.parametrize('cur_language', [''])\n    @pytest.mark.parametrize('cur_country', ['ua'])\n    @pytest.mark.parametrize('cur_role', ['Auth', 'NoAuth', 'NoReg'])\n    @pytest.mark.bug_379\n    def test_379(self, worker_id, d, cur_language, cur_country, cur_role,\n                 cur_login, cur_password):\n        \"\"\"\n         Check: Only the text of the [Inflation news] button is displayed\n         without clickable area and button styling on the sidebar of the \"Market Analysis\" page,\n         when SCB license and EN language are selected.\n         Language: EN.\n         License: SCB.\n         Author: Sergey Aiidzhanov\n         \"\"\"\n        bid = build_dynamic_arg_for_us_55(\n            d, worker_id, cur_language, cur_country, cur_role,\n            \"55\", \"ReTests of Manual Detected Bugs\",\n            \"379\",\n            'Only the text of the [Inflation news] button '\n            'is displayed without clickable area and button styling on the sidebar of the \"Market Analysis\" page, '\n            'when SCB license and EN language are selected.',\n            False,\n            False\n        )\n        # Arrange\n        link = apply_preconditions_to_link(d, cur_language, cur_country, cur_role, cur_login, cur_password)\n    \n        test_el = Bug379(d, link, bid)\n        page_menu = NewsAndAnalysisMenuSection(d, link, bid)\n>       page_menu.click_element()\n\ntests/US_55_ReTestsManual/saii-d3v/US_55-saii-d3v_ReTestsManual_test.py:1284: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/BugsManual/bug_158.py:22: in click_element\n    btn.click()\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:380: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fd406ed7950>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x5563ad2e3770 \\\\u003Cunknown>\\\\n#21 0x5563ad2f31c6 \\\\u003Cunknown>\\\\n#22 0x7fb6b4694ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"https://capital.com/./market-analysis\" class=\"cc-nav__link cc-nav__link--lvl1 js-analyticsClick\" data-type=\"nav_id10\">...</a> is not clickable at point (1173, 77). Other element would receive the click: <div class=\"overlay\" id=\"l_overlay\">...</div>\nE         (Session info: chrome=131.0.6778.85)\nE       Stacktrace:\nE       #0 0x5563ad2f434a <unknown>\nE       #1 0x5563ace0a6e0 <unknown>\nE       #2 0x5563ace600f6 <unknown>\nE       #3 0x5563ace5e05d <unknown>\nE       #4 0x5563ace5b775 <unknown>\nE       #5 0x5563ace5a92f <unknown>\nE       #6 0x5563ace4e0d5 <unknown>\nE       #7 0x5563ace7d462 <unknown>\nE       #8 0x5563ace4da18 <unknown>\nE       #9 0x5563ace7d62e <unknown>\nE       #10 0x5563ace9bed7 <unknown>\nE       #11 0x5563ace7d203 <unknown>\nE       #12 0x5563ace4bcc0 <unknown>\nE       #13 0x5563ace4cc9e <unknown>\nE       #14 0x5563ad2c1d3b <unknown>\nE       #15 0x5563ad2c5cc2 <unknown>\nE       #16 0x5563ad2aeb6c <unknown>\nE       #17 0x5563ad2c6837 <unknown>\nE       #18 0x5563ad29410f <unknown>\nE       #19 0x5563ad2e35a8 <unknown>\nE       #20 0x5563ad2e3770 <unknown>\nE       #21 0x5563ad2f31c6 <unknown>\nE       #22 0x7fb6b4694ac3 <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"d","time":{"start":1733788306195,"stop":1733788306560,"duration":365},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"worker_id","time":{"start":1733788306560,"stop":1733788306560,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_password","time":{"start":1733788306561,"stop":1733788306561,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_login","time":{"start":1733788306561,"stop":1733788306561,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"\n         Check: Only the text of the [Inflation news] button is displayed\n         without clickable area and button styling on the sidebar of the \"Market Analysis\" page,\n         when SCB license and EN language are selected.\n         Language: EN.\n         License: SCB.\n         Author: Sergey Aiidzhanov\n         ","status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"https://capital.com/./market-analysis\" class=\"cc-nav__link cc-nav__link--lvl1 js-analyticsClick\" data-type=\"nav_id10\">...</a> is not clickable at point (1173, 77). Other element would receive the click: <div class=\"overlay\" id=\"l_overlay\">...</div>\n  (Session info: chrome=131.0.6778.85)\nStacktrace:\n#0 0x5563ad2f434a <unknown>\n#1 0x5563ace0a6e0 <unknown>\n#2 0x5563ace600f6 <unknown>\n#3 0x5563ace5e05d <unknown>\n#4 0x5563ace5b775 <unknown>\n#5 0x5563ace5a92f <unknown>\n#6 0x5563ace4e0d5 <unknown>\n#7 0x5563ace7d462 <unknown>\n#8 0x5563ace4da18 <unknown>\n#9 0x5563ace7d62e <unknown>\n#10 0x5563ace9bed7 <unknown>\n#11 0x5563ace7d203 <unknown>\n#12 0x5563ace4bcc0 <unknown>\n#13 0x5563ace4cc9e <unknown>\n#14 0x5563ad2c1d3b <unknown>\n#15 0x5563ad2c5cc2 <unknown>\n#16 0x5563ad2aeb6c <unknown>\n#17 0x5563ad2c6837 <unknown>\n#18 0x5563ad29410f <unknown>\n#19 0x5563ad2e35a8 <unknown>\n#20 0x5563ad2e3770 <unknown>\n#21 0x5563ad2f31c6 <unknown>\n#22 0x7fb6b4694ac3 <unknown>","statusTrace":"self = <US_55-saii-d3v_ReTestsManual_test.TestManualDetectedBugs object at 0x7fd406eb1a60>\nworker_id = 'master'\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"edc2d141eda5326c585086c6dd3151f9\")>\ncur_language = '', cur_country = 'ua', cur_role = 'NoReg'\ncur_login = 'test001.miketar+1@gmail.com', cur_password = 'Qwer1234-!@#$'\n\n    @allure.step(\n        'Start retest manual TC_55!379 | Only the text of the [Inflation news] button '\n        'is displayed without clickable area and button styling on the sidebar of the \"Market Analysis\" page, '\n        'when SCB license and EN language are selected.')\n    @pytest.mark.parametrize('cur_language', [''])\n    @pytest.mark.parametrize('cur_country', ['ua'])\n    @pytest.mark.parametrize('cur_role', ['Auth', 'NoAuth', 'NoReg'])\n    @pytest.mark.bug_379\n    def test_379(self, worker_id, d, cur_language, cur_country, cur_role,\n                 cur_login, cur_password):\n        \"\"\"\n         Check: Only the text of the [Inflation news] button is displayed\n         without clickable area and button styling on the sidebar of the \"Market Analysis\" page,\n         when SCB license and EN language are selected.\n         Language: EN.\n         License: SCB.\n         Author: Sergey Aiidzhanov\n         \"\"\"\n        bid = build_dynamic_arg_for_us_55(\n            d, worker_id, cur_language, cur_country, cur_role,\n            \"55\", \"ReTests of Manual Detected Bugs\",\n            \"379\",\n            'Only the text of the [Inflation news] button '\n            'is displayed without clickable area and button styling on the sidebar of the \"Market Analysis\" page, '\n            'when SCB license and EN language are selected.',\n            False,\n            False\n        )\n        # Arrange\n        link = apply_preconditions_to_link(d, cur_language, cur_country, cur_role, cur_login, cur_password)\n    \n        test_el = Bug379(d, link, bid)\n        page_menu = NewsAndAnalysisMenuSection(d, link, bid)\n>       page_menu.click_element()\n\ntests/US_55_ReTestsManual/saii-d3v/US_55-saii-d3v_ReTestsManual_test.py:1284: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/BugsManual/bug_158.py:22: in click_element\n    btn.click()\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:380: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fd406ed7950>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x5563ad2e3770 \\\\u003Cunknown>\\\\n#21 0x5563ad2f31c6 \\\\u003Cunknown>\\\\n#22 0x7fb6b4694ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"https://capital.com/./market-analysis\" class=\"cc-nav__link cc-nav__link--lvl1 js-analyticsClick\" data-type=\"nav_id10\">...</a> is not clickable at point (1173, 77). Other element would receive the click: <div class=\"overlay\" id=\"l_overlay\">...</div>\nE         (Session info: chrome=131.0.6778.85)\nE       Stacktrace:\nE       #0 0x5563ad2f434a <unknown>\nE       #1 0x5563ace0a6e0 <unknown>\nE       #2 0x5563ace600f6 <unknown>\nE       #3 0x5563ace5e05d <unknown>\nE       #4 0x5563ace5b775 <unknown>\nE       #5 0x5563ace5a92f <unknown>\nE       #6 0x5563ace4e0d5 <unknown>\nE       #7 0x5563ace7d462 <unknown>\nE       #8 0x5563ace4da18 <unknown>\nE       #9 0x5563ace7d62e <unknown>\nE       #10 0x5563ace9bed7 <unknown>\nE       #11 0x5563ace7d203 <unknown>\nE       #12 0x5563ace4bcc0 <unknown>\nE       #13 0x5563ace4cc9e <unknown>\nE       #14 0x5563ad2c1d3b <unknown>\nE       #15 0x5563ad2c5cc2 <unknown>\nE       #16 0x5563ad2aeb6c <unknown>\nE       #17 0x5563ad2c6837 <unknown>\nE       #18 0x5563ad29410f <unknown>\nE       #19 0x5563ad2e35a8 <unknown>\nE       #20 0x5563ad2e3770 <unknown>\nE       #21 0x5563ad2f31c6 <unknown>\nE       #22 0x7fb6b4694ac3 <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","steps":[{"name":"Start retest manual TC_55!379 | Only the text of the [Inflation news] button is displayed without clickable area and button styling on the sidebar of the \"Market Analysis\" page, when SCB license and EN language are selected.","time":{"start":1733793754471,"stop":1733793775757,"duration":21286},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"https://capital.com/./market-analysis\" class=\"cc-nav__link cc-nav__link--lvl1 js-analyticsClick\" data-type=\"nav_id10\">...</a> is not clickable at point (1173, 77). Other element would receive the click: <div class=\"overlay\" id=\"l_overlay\">...</div>\n  (Session info: chrome=131.0.6778.85)\nStacktrace:\n#0 0x5563ad2f434a <unknown>\n#1 0x5563ace0a6e0 <unknown>\n#2 0x5563ace600f6 <unknown>\n#3 0x5563ace5e05d <unknown>\n#4 0x5563ace5b775 <unknown>\n#5 0x5563ace5a92f <unknown>\n#6 0x5563ace4e0d5 <unknown>\n#7 0x5563ace7d462 <unknown>\n#8 0x5563ace4da18 <unknown>\n#9 0x5563ace7d62e <unknown>\n#10 0x5563ace9bed7 <unknown>\n#11 0x5563ace7d203 <unknown>\n#12 0x5563ace4bcc0 <unknown>\n#13 0x5563ace4cc9e <unknown>\n#14 0x5563ad2c1d3b <unknown>\n#15 0x5563ad2c5cc2 <unknown>\n#16 0x5563ad2aeb6c <unknown>\n#17 0x5563ad2c6837 <unknown>\n#18 0x5563ad29410f <unknown>\n#19 0x5563ad2e35a8 <unknown>\n#20 0x5563ad2e3770 <unknown>\n#21 0x5563ad2f31c6 <unknown>\n#22 0x7fb6b4694ac3 <unknown>\n\n","statusTrace":"  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/tests/US_55_ReTestsManual/saii-d3v/US_55-saii-d3v_ReTestsManual_test.py\", line 1284, in test_379\n    page_menu.click_element()\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/BugsManual/bug_158.py\", line 22, in click_element\n    btn.click()\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py\", line 94, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py\", line 395, in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 380, in execute\n    self.error_handler.check_response(response)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[{"name":"Build dynamic argument for TCs of US_55","time":{"start":1733793754471,"stop":1733793754473,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"edc2d141eda5326c585086c6dd3151f9\")>"},{"name":"worker_id","value":"'master'"},{"name":"cur_language","value":"''"},{"name":"cur_country","value":"'ua'"},{"name":"cur_role","value":"'NoReg'"},{"name":"us","value":"'55'"},{"name":"desc_us","value":"'ReTests of Manual Detected Bugs'"},{"name":"num_tc","value":"'379'"},{"name":"desc_tc","value":"'Only the text of the [Inflation news] button is displayed without clickable area and button styling on the sidebar of the \"Market Analysis\" page, when SCB license and EN language are selected.'"},{"name":"manual","value":"False"},{"name":"new_layout","value":"False"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Preconditions","time":{"start":1733793754473,"stop":1733793774614,"duration":20141},"status":"passed","steps":[{"name":"2024-12-09 23:51:45.990742   Start Checking Captcha","time":{"start":1733793754486,"stop":1733793759524,"duration":5038},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"2024-12-09 23:51:45.990742   Start Checking Captcha","time":{"start":1733793759525,"stop":1733793764537,"duration":5012},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"2024-12-09 23:51:45.990742   Start Checking Captcha","time":{"start":1733793764537,"stop":1733793769594,"duration":5057},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"2024-12-09 23:51:45.990742   Start Checking Captcha","time":{"start":1733793769594,"stop":1733793774611,"duration":5017},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"edc2d141eda5326c585086c6dd3151f9\")>"},{"name":"host","value":"'https://capital.com/'"},{"name":"end_point","value":"''"},{"name":"cur_language","value":"''"},{"name":"cur_country","value":"'ua'"},{"name":"cur_role","value":"'NoReg'"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"}],"shouldDisplayMessage":false,"stepsCount":4,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"worker_id","value":"'master'"},{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"edc2d141eda5326c585086c6dd3151f9\")>"},{"name":"cur_language","value":"''"},{"name":"cur_country","value":"'ua'"},{"name":"cur_role","value":"'NoReg'"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"}],"shouldDisplayMessage":true,"stepsCount":6,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"58aba0c851abb1b5","name":"Screenshot","source":"58aba0c851abb1b5.png","type":"image/png","size":202361},{"uid":"8f13e330419f64be","name":"stdout","source":"8f13e330419f64be.txt","type":"text/plain","size":1747}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":7,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"d::0","time":{"start":1733795535376,"stop":1733795535791,"duration":415},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"epic","value":"TC_55!379 | Only the text of the [Inflation news] button is displayed without clickable area and button styling on the sidebar of the \"Market Analysis\" page, when SCB license and EN language are selected."},{"name":"feature","value":"Role: NoReg"},{"name":"story","value":"Country: ua"},{"name":"tag","value":"bug_379"},{"name":"tag","value":"us_55"},{"name":"parentSuite","value":"tests.US_55_ReTestsManual.saii-d3v"},{"name":"suite","value":"US_55-saii-d3v_ReTestsManual_test"},{"name":"subSuite","value":"TestManualDetectedBugs"},{"name":"host","value":"fv-az1110-55"},{"name":"thread","value":"20108-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.US_55_ReTestsManual.saii-d3v.US_55-saii-d3v_ReTestsManual_test"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"cur_country","value":"'ua'"},{"name":"cur_language","value":"''"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"},{"name":"cur_role","value":"'NoReg'"},{"name":"d","value":"'Chrome'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":40,"broken":1,"skipped":0,"passed":0,"unknown":0,"total":41},"items":[{"uid":"7860b49b7b7a604e","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/251//#testresult/7860b49b7b7a604e","status":"failed","statusDetails":"Failed: Bug # 55!379 The button is DOES NOT exist","time":{"start":1733705455603,"stop":1733705503063,"duration":47460}},{"uid":"517f04c84f0e554c","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/250//#testresult/517f04c84f0e554c","status":"failed","statusDetails":"Failed: Bug # 55!379 The button is DOES NOT exist","time":{"start":1733618837719,"stop":1733618887528,"duration":49809}},{"uid":"def7b322a6955551","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/249//#testresult/def7b322a6955551","status":"failed","statusDetails":"Failed: Bug # 55!379 The button is DOES NOT exist","time":{"start":1733532771306,"stop":1733532818686,"duration":47380}},{"uid":"b622f9904b738c21","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/248//#testresult/b622f9904b738c21","status":"failed","statusDetails":"Failed: Bug # 55!379 The button is DOES NOT exist","time":{"start":1733470385499,"stop":1733470432640,"duration":47141}},{"uid":"f4ae54eeb9b95a77","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/244//#testresult/f4ae54eeb9b95a77","status":"failed","statusDetails":"Failed: Bug # 55!379 The button is DOES NOT exist","time":{"start":1733260515353,"stop":1733260562460,"duration":47107}},{"uid":"5314b341e0c487a1","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/243//#testresult/5314b341e0c487a1","status":"failed","statusDetails":"Failed: Bug # 55!379 The button is DOES NOT exist","time":{"start":1733185243819,"stop":1733185291419,"duration":47600}},{"uid":"e800bde6efc48858","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/242//#testresult/e800bde6efc48858","status":"failed","statusDetails":"Failed: Bug # 55!379 The button is DOES NOT exist","time":{"start":1733100134369,"stop":1733100181872,"duration":47503}},{"uid":"913ae0e83018333f","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/241//#testresult/913ae0e83018333f","status":"failed","statusDetails":"Failed: Bug # 55!379 The button is DOES NOT exist","time":{"start":1733012601486,"stop":1733012651603,"duration":50117}},{"uid":"faeb0104ce261ec2","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/240//#testresult/faeb0104ce261ec2","status":"failed","statusDetails":"Failed: Bug # 55!379 The button is DOES NOT exist","time":{"start":1732925807675,"stop":1732925855556,"duration":47881}},{"uid":"b37fb6342889d9a3","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/239//#testresult/b37fb6342889d9a3","status":"failed","statusDetails":"Failed: Bug # 55!379 The button is DOES NOT exist","time":{"start":1732840849923,"stop":1732840897634,"duration":47711}},{"uid":"61035cf716392f0e","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/238//#testresult/61035cf716392f0e","status":"failed","statusDetails":"Failed: Bug # 55!379 The button is DOES NOT exist","time":{"start":1732754584206,"stop":1732754631752,"duration":47546}},{"uid":"96cc3c2ee4614a1f","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/237//#testresult/96cc3c2ee4614a1f","status":"failed","statusDetails":"Failed: Bug # 55!379 The button is DOES NOT exist","time":{"start":1732666758931,"stop":1732666806014,"duration":47083}},{"uid":"14a075d711a4af0","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/236//#testresult/14a075d711a4af0","status":"failed","statusDetails":"Failed: Bug # 55!379 The button is DOES NOT exist","time":{"start":1732580522607,"stop":1732580569708,"duration":47101}},{"uid":"d5399f3cb5c4b279","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/235//#testresult/d5399f3cb5c4b279","status":"failed","statusDetails":"Failed: Bug # 55!379 The button is DOES NOT exist","time":{"start":1732494506167,"stop":1732494553919,"duration":47752}},{"uid":"3130a637c75e2cd9","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/234//#testresult/3130a637c75e2cd9","status":"failed","statusDetails":"Failed: Bug # 55!379 The button is DOES NOT exist","time":{"start":1732406791713,"stop":1732406838796,"duration":47083}},{"uid":"1603f28822c41a73","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/233//#testresult/1603f28822c41a73","status":"failed","statusDetails":"Failed: Bug # 55!379 The button is DOES NOT exist","time":{"start":1732325431142,"stop":1732325478483,"duration":47341}},{"uid":"9afd57068c9458d4","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/232//#testresult/9afd57068c9458d4","status":"failed","statusDetails":"Failed: Bug # 55!379 The button is DOES NOT exist","time":{"start":1732251605813,"stop":1732251656192,"duration":50379}},{"uid":"cdbb5c48160adda9","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/231//#testresult/cdbb5c48160adda9","status":"failed","statusDetails":"Failed: Bug # 55!379 The button is DOES NOT exist","time":{"start":1732235771478,"stop":1732235818622,"duration":47144}},{"uid":"2eb325926ea0f16a","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/230//#testresult/2eb325926ea0f16a","status":"failed","statusDetails":"Failed: Bug # 55!379 The button is DOES NOT exist","time":{"start":1732149268637,"stop":1732149317851,"duration":49214}},{"uid":"ffb9290a1696d60e","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/229//#testresult/ffb9290a1696d60e","status":"failed","statusDetails":"Failed: Bug # 55!379 The button is DOES NOT exist","time":{"start":1732062562338,"stop":1732062609369,"duration":47031}}]},"tags":["us_55","bug_379"]},"source":"d478102969545450.json","parameterValues":["'ua'","''","'test001.miketar+1@gmail.com'","'Qwer1234-!@#$'","'NoReg'","'Chrome'"]}