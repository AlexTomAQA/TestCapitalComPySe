{"uid":"be614d74f38e5a7e","name":"TC_11.01.05.01_03 | Testing button [Try demo] in block 'Learn first. Trade CFDs ...'. Bid:11.01.05.01_03-en.ae.Auth","fullName":"tests.US_11_Education.US_11-01-05_Trading_courses.US_11-01-05-01_Trading_courses_test.TestTradingCoursesItem#test_03_try_demo","historyId":"dcf1af91e6e14ffbf62f52a4961ee5e5","time":{"start":1711780248679,"stop":1711780259262,"duration":10583},"description":"\n        Check: Block \"Learn first ...\" -> button [Try demo]\n        Language: All. License: All. Role: All.\n        ","descriptionHtml":"<pre><code>    Check: Block &quot;Learn first ...&quot; -&gt; button [Try demo]\n    Language: All. License: All. Role: All.\n</code></pre>\n","status":"failed","statusMessage":"AssertionError: Close button on 'Sign up' form is not clickable","statusTrace":"self = <pages.Elements.LearnFirstTradeCFDBlockTryDemoButton.BlockLearnFistTradeCFDTryDemo object at 0x7fd4046858e0>\n\n    @allure.step(\"Click button [Try demo]\")\n    def element_click(self):\n        print(f\"\\n{datetime.now()}   2. Act\")\n        print(f\"{datetime.now()}   BUTTON_TRY_DEMO is present? =>\")\n        button_list = self.driver.find_elements(*BlockLearnFirstTradeCFD.BUTTON_TRY_DEMO)\n        if len(button_list) == 0:\n            print(f\"{datetime.now()}   => BUTTON_TRY_DEMO is not present on the page!\")\n            del button_list\n            return False\n        print(f\"{datetime.now()}   => BUTTON_TRY_DEMO is present on the page!\")\n    \n        print(f\"{datetime.now()}   BUTTON_TRY_DEMO scroll =>\")\n    \n        self.driver.execute_script(\n            'return arguments[0].scrollIntoView({block: \"center\", inline: \"nearest\"});',\n            button_list[0]\n        )\n    \n        self.element_is_clickable(button_list[0], 5)\n    \n        try:\n>           button_list[0].click()\n\npages/Elements/LearnFirstTradeCFDBlockTryDemoButton.py:52: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fd4054b83b0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x55cf2980e93b \\\\u003Cunknown>\\\\n#21 0x55cf2981e9f4 \\\\u003Cunknown>\\\\n#22 0x7f3821494ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a class=\"btn inBanner__btn rounded-lg ln-auto js-analyticsClick\" href=\"/trading/signup\" data-type=\"b_vert_new_style_879\">...</a> is not clickable at point (952, 357). Other element would receive the click: <div class=\"onetrust-pc-dark-filter ot-fade-in\" style=\"z-index:2147483645;\"></div>\nE         (Session info: chrome=123.0.6312.58)\nE       Stacktrace:\nE       #0 0x55cf2981f8a3 <unknown>\nE       #1 0x55cf295158c6 <unknown>\nE       #2 0x55cf29567233 <unknown>\nE       #3 0x55cf2956514e <unknown>\nE       #4 0x55cf29562b27 <unknown>\nE       #5 0x55cf29561ed3 <unknown>\nE       #6 0x55cf29555507 <unknown>\nE       #7 0x55cf295825a2 <unknown>\nE       #8 0x55cf29554e98 <unknown>\nE       #9 0x55cf2958276e <unknown>\nE       #10 0x55cf295a0c19 <unknown>\nE       #11 0x55cf29582343 <unknown>\nE       #12 0x55cf29553593 <unknown>\nE       #13 0x55cf29553f5e <unknown>\nE       #14 0x55cf297e388b <unknown>\nE       #15 0x55cf297e77e5 <unknown>\nE       #16 0x55cf297d15b1 <unknown>\nE       #17 0x55cf297e8372 <unknown>\nE       #18 0x55cf297b68bf <unknown>\nE       #19 0x55cf2980e768 <unknown>\nE       #20 0x55cf2980e93b <unknown>\nE       #21 0x55cf2981e9f4 <unknown>\nE       #22 0x7f3821494ac3 <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <US_11-01-05-01_Trading_courses_test.TestTradingCoursesItem object at 0x7fd40524edb0>\nworker_id = 'master'\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"f8833b8905d1c45b34dc58da1ce11a13\")>\ncur_language = '', cur_country = 'ae', cur_role = 'Auth'\ncur_login = 'test001.miketar+1@gmail.com', cur_password = 'Qwer1234-!@#$'\ncur_item_link = 'https://capital.com/asset-classes-margin'\n\n    @allure.step(f\"{datetime.now()}   Start test_11.01.05.01_03 button [Try demo] \"\n                 f\"in block 'Learn first. Trade CFDs ...\")\n    @pytest.mark.test_03\n    def test_03_try_demo(\n            self, worker_id, d, cur_language, cur_country, cur_role, cur_login, cur_password, cur_item_link):\n        \"\"\"\n        Check: Block \"Learn first ...\" -> button [Try demo]\n        Language: All. License: All. Role: All.\n        \"\"\"\n        bid = build_dynamic_arg_v4(\n            d, worker_id, cur_language, cur_country, cur_role,\n            \"11.01.05\", \"Education > Menu Item [Trading courses]\",\n            \".01_03\", \"Testing button [Try demo] in block 'Learn first. Trade CFDs ...'\")\n    \n        Common().skip_if_eng_lang_and_fca_license(cur_language, cur_country)\n        Common().check_language_in_list_and_skip_if_not_present(\n            cur_language, [\"\"])\n    \n        page_conditions = Conditions(d, \"\")\n        page_conditions.preconditions(\n            d, CapitalComPageSrc.URL, \"\", cur_language, cur_country, cur_role, cur_login, cur_password)\n    \n        test_element = BlockLearnFistTradeCFDTryDemo(d, cur_item_link)\n        test_element.arrange(cur_item_link)\n    \n>       test_element.element_click()\n\ntests/US_11_Education/US_11-01-05_Trading_courses/US_11-01-05-01_Trading_courses_test.py:88: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/Elements/LearnFirstTradeCFDBlockTryDemoButton.py:59: in element_click\n    if page_.close_signup_form():\npages/Signup_login/signup_login.py:334: in close_signup_form\n    Common().assert_true_false(False, \"Close button on 'Sign up' form is not clickable\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncondition = False, msg = \"Close button on 'Sign up' form is not clickable\"\n\n    @staticmethod\n    def assert_true_false(condition=False, msg=\"\"):\n    \tif condition:\n    \t\tCommon.flag_of_bug = False\n    \t\tassert True, msg\n    \telse:\n    \t\tCommon.flag_of_bug = True\n>   \t\tassert False, msg\nE     AssertionError: Close button on 'Sign up' form is not clickable\n\npages/common.py:191: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"d","time":{"start":1711780171990,"stop":1711780172400,"duration":410},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"worker_id","time":{"start":1711780172400,"stop":1711780172400,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_country","time":{"start":1711780172401,"stop":1711780172401,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_language","time":{"start":1711780172401,"stop":1711780172401,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_login","time":{"start":1711780172401,"stop":1711780172401,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_password","time":{"start":1711780172401,"stop":1711780172401,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_role","time":{"start":1711780241431,"stop":1711780241431,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"\n        Check: Block \"Learn first ...\" -> button [Try demo]\n        Language: All. License: All. Role: All.\n        ","status":"failed","statusMessage":"AssertionError: Close button on 'Sign up' form is not clickable","statusTrace":"self = <pages.Elements.LearnFirstTradeCFDBlockTryDemoButton.BlockLearnFistTradeCFDTryDemo object at 0x7fd4046858e0>\n\n    @allure.step(\"Click button [Try demo]\")\n    def element_click(self):\n        print(f\"\\n{datetime.now()}   2. Act\")\n        print(f\"{datetime.now()}   BUTTON_TRY_DEMO is present? =>\")\n        button_list = self.driver.find_elements(*BlockLearnFirstTradeCFD.BUTTON_TRY_DEMO)\n        if len(button_list) == 0:\n            print(f\"{datetime.now()}   => BUTTON_TRY_DEMO is not present on the page!\")\n            del button_list\n            return False\n        print(f\"{datetime.now()}   => BUTTON_TRY_DEMO is present on the page!\")\n    \n        print(f\"{datetime.now()}   BUTTON_TRY_DEMO scroll =>\")\n    \n        self.driver.execute_script(\n            'return arguments[0].scrollIntoView({block: \"center\", inline: \"nearest\"});',\n            button_list[0]\n        )\n    \n        self.element_is_clickable(button_list[0], 5)\n    \n        try:\n>           button_list[0].click()\n\npages/Elements/LearnFirstTradeCFDBlockTryDemoButton.py:52: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fd4054b83b0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x55cf2980e93b \\\\u003Cunknown>\\\\n#21 0x55cf2981e9f4 \\\\u003Cunknown>\\\\n#22 0x7f3821494ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a class=\"btn inBanner__btn rounded-lg ln-auto js-analyticsClick\" href=\"/trading/signup\" data-type=\"b_vert_new_style_879\">...</a> is not clickable at point (952, 357). Other element would receive the click: <div class=\"onetrust-pc-dark-filter ot-fade-in\" style=\"z-index:2147483645;\"></div>\nE         (Session info: chrome=123.0.6312.58)\nE       Stacktrace:\nE       #0 0x55cf2981f8a3 <unknown>\nE       #1 0x55cf295158c6 <unknown>\nE       #2 0x55cf29567233 <unknown>\nE       #3 0x55cf2956514e <unknown>\nE       #4 0x55cf29562b27 <unknown>\nE       #5 0x55cf29561ed3 <unknown>\nE       #6 0x55cf29555507 <unknown>\nE       #7 0x55cf295825a2 <unknown>\nE       #8 0x55cf29554e98 <unknown>\nE       #9 0x55cf2958276e <unknown>\nE       #10 0x55cf295a0c19 <unknown>\nE       #11 0x55cf29582343 <unknown>\nE       #12 0x55cf29553593 <unknown>\nE       #13 0x55cf29553f5e <unknown>\nE       #14 0x55cf297e388b <unknown>\nE       #15 0x55cf297e77e5 <unknown>\nE       #16 0x55cf297d15b1 <unknown>\nE       #17 0x55cf297e8372 <unknown>\nE       #18 0x55cf297b68bf <unknown>\nE       #19 0x55cf2980e768 <unknown>\nE       #20 0x55cf2980e93b <unknown>\nE       #21 0x55cf2981e9f4 <unknown>\nE       #22 0x7f3821494ac3 <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <US_11-01-05-01_Trading_courses_test.TestTradingCoursesItem object at 0x7fd40524edb0>\nworker_id = 'master'\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"f8833b8905d1c45b34dc58da1ce11a13\")>\ncur_language = '', cur_country = 'ae', cur_role = 'Auth'\ncur_login = 'test001.miketar+1@gmail.com', cur_password = 'Qwer1234-!@#$'\ncur_item_link = 'https://capital.com/asset-classes-margin'\n\n    @allure.step(f\"{datetime.now()}   Start test_11.01.05.01_03 button [Try demo] \"\n                 f\"in block 'Learn first. Trade CFDs ...\")\n    @pytest.mark.test_03\n    def test_03_try_demo(\n            self, worker_id, d, cur_language, cur_country, cur_role, cur_login, cur_password, cur_item_link):\n        \"\"\"\n        Check: Block \"Learn first ...\" -> button [Try demo]\n        Language: All. License: All. Role: All.\n        \"\"\"\n        bid = build_dynamic_arg_v4(\n            d, worker_id, cur_language, cur_country, cur_role,\n            \"11.01.05\", \"Education > Menu Item [Trading courses]\",\n            \".01_03\", \"Testing button [Try demo] in block 'Learn first. Trade CFDs ...'\")\n    \n        Common().skip_if_eng_lang_and_fca_license(cur_language, cur_country)\n        Common().check_language_in_list_and_skip_if_not_present(\n            cur_language, [\"\"])\n    \n        page_conditions = Conditions(d, \"\")\n        page_conditions.preconditions(\n            d, CapitalComPageSrc.URL, \"\", cur_language, cur_country, cur_role, cur_login, cur_password)\n    \n        test_element = BlockLearnFistTradeCFDTryDemo(d, cur_item_link)\n        test_element.arrange(cur_item_link)\n    \n>       test_element.element_click()\n\ntests/US_11_Education/US_11-01-05_Trading_courses/US_11-01-05-01_Trading_courses_test.py:88: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/Elements/LearnFirstTradeCFDBlockTryDemoButton.py:59: in element_click\n    if page_.close_signup_form():\npages/Signup_login/signup_login.py:334: in close_signup_form\n    Common().assert_true_false(False, \"Close button on 'Sign up' form is not clickable\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncondition = False, msg = \"Close button on 'Sign up' form is not clickable\"\n\n    @staticmethod\n    def assert_true_false(condition=False, msg=\"\"):\n    \tif condition:\n    \t\tCommon.flag_of_bug = False\n    \t\tassert True, msg\n    \telse:\n    \t\tCommon.flag_of_bug = True\n>   \t\tassert False, msg\nE     AssertionError: Close button on 'Sign up' form is not clickable\n\npages/common.py:191: AssertionError","steps":[{"name":"2024-03-30 06:29:31.967141   Start test_11.01.05.01_03 button [Try demo] in block 'Learn first. Trade CFDs ...","time":{"start":1711780248680,"stop":1711780259261,"duration":10581},"status":"failed","statusMessage":"AssertionError: Close button on 'Sign up' form is not clickable\n","statusTrace":"  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/tests/US_11_Education/US_11-01-05_Trading_courses/US_11-01-05-01_Trading_courses_test.py\", line 88, in test_03_try_demo\n    test_element.element_click()\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/Elements/LearnFirstTradeCFDBlockTryDemoButton.py\", line 59, in element_click\n    if page_.close_signup_form():\n       ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/Signup_login/signup_login.py\", line 334, in close_signup_form\n    Common().assert_true_false(False, \"Close button on 'Sign up' form is not clickable\")\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/common.py\", line 191, in assert_true_false\n    assert False, msg\n","steps":[{"name":"2024-03-30 06:29:31.962666   Start Building dynamic arguments for allure report generation","time":{"start":1711780248680,"stop":1711780248681,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"f8833b8905d1c45b34dc58da1ce11a13\")>"},{"name":"worker_id","value":"'master'"},{"name":"cur_language","value":"''"},{"name":"cur_country","value":"'ae'"},{"name":"cur_role","value":"'Auth'"},{"name":"us","value":"'11.01.05'"},{"name":"desc_us","value":"'Education > Menu Item [Trading courses]'"},{"name":"num_tc","value":"'.01_03'"},{"name":"desc_tc","value":"'Testing button [Try demo] in block 'Learn first. Trade CFDs ...''"},{"name":"manual","value":"False"},{"name":"new_layout","value":"False"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"2024-03-30 06:29:31.966931   Set preconditions","time":{"start":1711780248681,"stop":1711780253618,"duration":4937},"status":"passed","steps":[{"name":"2024-03-30 06:29:31.965792   Start Checking Captcha","time":{"start":1711780250516,"stop":1711780251541,"duration":1025},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"2024-03-30 06:29:31.964974.   Click 'Language and Country' menu section.","time":{"start":1711780251544,"stop":1711780252839,"duration":1295},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"test_language","value":"''"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"2024-03-30 06:29:31.965119   Set language","time":{"start":1711780252839,"stop":1711780253616,"duration":777},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"cur_language","value":"''"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"f8833b8905d1c45b34dc58da1ce11a13\")>"},{"name":"host","value":"'https://capital.com/'"},{"name":"end_point","value":"''"},{"name":"cur_language","value":"''"},{"name":"cur_country","value":"'ae'"},{"name":"cur_role","value":"'Auth'"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"}],"shouldDisplayMessage":false,"stepsCount":3,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Click button [Try demo]","time":{"start":1711780255108,"stop":1711780259261,"duration":4153},"status":"failed","statusMessage":"AssertionError: Close button on 'Sign up' form is not clickable\n","statusTrace":"  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/Elements/LearnFirstTradeCFDBlockTryDemoButton.py\", line 59, in element_click\n    if page_.close_signup_form():\n       ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/Signup_login/signup_login.py\", line 334, in close_signup_form\n    Common().assert_true_false(False, \"Close button on 'Sign up' form is not clickable\")\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/common.py\", line 191, in assert_true_false\n    assert False, msg\n","steps":[{"name":"Close form [Sign up]","time":{"start":1711780256200,"stop":1711780259260,"duration":3060},"status":"failed","statusMessage":"AssertionError: Close button on 'Sign up' form is not clickable\n","statusTrace":"  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/Signup_login/signup_login.py\", line 334, in close_signup_form\n    Common().assert_true_false(False, \"Close button on 'Sign up' form is not clickable\")\n  File \"/home/runner/work/TestCapitalComPySe/TestCapitalComPySe/pages/common.py\", line 191, in assert_true_false\n    assert False, msg\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"worker_id","value":"'master'"},{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"f8833b8905d1c45b34dc58da1ce11a13\")>"},{"name":"cur_language","value":"''"},{"name":"cur_country","value":"'ae'"},{"name":"cur_role","value":"'Auth'"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"},{"name":"cur_item_link","value":"'https://capital.com/asset-classes-margin'"}],"shouldDisplayMessage":false,"stepsCount":7,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"556d98a6d872f07a","name":"Screenshot","source":"556d98a6d872f07a.png","type":"image/png","size":206154},{"uid":"943ead2cc4a28952","name":"log","source":"943ead2cc4a28952.txt","type":"text/plain","size":3885},{"uid":"eb72b4d6ea7f23d","name":"stdout","source":"eb72b4d6ea7f23d.txt","type":"text/plain","size":3026}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":8,"attachmentsCount":3,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"d::0","time":{"start":1711780332140,"stop":1711780332271,"duration":131},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"epic","value":"US_11.01.05 | Education > Menu Item [Trading courses]"},{"name":"feature","value":"Language: en"},{"name":"story","value":"Country: ae / Role: Auth"},{"name":"tag","value":"test_03"},{"name":"tag","value":"us_11_01_05"},{"name":"parentSuite","value":"tests.US_11_Education.US_11-01-05_Trading_courses"},{"name":"suite","value":"US_11-01-05-01_Trading_courses_test"},{"name":"subSuite","value":"TestTradingCoursesItem"},{"name":"host","value":"fv-az575-835"},{"name":"thread","value":"24777-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.US_11_Education.US_11-01-05_Trading_courses.US_11-01-05-01_Trading_courses_test"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"cur_country","value":"'ae'"},{"name":"cur_item_link","value":"'https://capital.com/asset-classes-margin'"},{"name":"cur_language","value":"''"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"},{"name":"cur_role","value":"'Auth'"},{"name":"d","value":"'Chrome'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["test_03","us_11_01_05"]},"source":"be614d74f38e5a7e.json","parameterValues":["'ae'","'https://capital.com/asset-classes-margin'","''","'test001.miketar+1@gmail.com'","'Qwer1234-!@#$'","'Auth'","'Chrome'"]}