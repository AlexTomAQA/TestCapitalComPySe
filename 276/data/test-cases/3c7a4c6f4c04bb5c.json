{"uid":"3c7a4c6f4c04bb5c","name":"TC_55!513 (Lang: en) | Bid:55!513-en.au.NoReg","fullName":"tests.US_55_ReTestsManual.K_Alex_N.US_55_K_Alex_N_ReTestsManual_test.TestManualDetectedBugs#test_513","historyId":"102fb8074748c98869cea4527ac781ab","time":{"start":1735783381606,"stop":1735783431224,"duration":49618},"description":"\n         Check: Hover over to [Markets] menu section >\n                Click to [Market analysis] menu item>  \n                Go through pages and find article \"Solana price prediction: Can SOL rebound?\" >\n                Click to [Solana to US Dollar] anchor link in \"Table of Contents\" block\n\n         Language: EN\n         License: ASIC\n         Author: Aleksei Kurochkin\n         ","descriptionHtml":"<pre><code>     Check: Hover over to [Markets] menu section &gt;\n            Click to [Market analysis] menu item&gt;  \n            Go through pages and find article &quot;Solana price prediction: Can SOL rebound?&quot; &gt;\n            Click to [Solana to US Dollar] anchor link in &quot;Table of Contents&quot; block\n\n     Language: EN\n     License: ASIC\n     Author: Aleksei Kurochkin\n</code></pre>\n","status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <b class=\"\">...</b> is not clickable at point (713, 11). Other element would receive the click: <span class=\"text-accord\">...</span>\n  (Session info: chrome=131.0.6778.139)\nStacktrace:\n#0 0x55ced40418fa <unknown>\n#1 0x55ced3b52d20 <unknown>\n#2 0x55ced3ba8766 <unknown>\n#3 0x55ced3ba66cd <unknown>\n#4 0x55ced3ba3de5 <unknown>\n#5 0x55ced3ba2fa8 <unknown>\n#6 0x55ced3b96765 <unknown>\n#7 0x55ced3bc5af2 <unknown>\n#8 0x55ced3b960a8 <unknown>\n#9 0x55ced3bc5cbe <unknown>\n#10 0x55ced3be4560 <unknown>\n#11 0x55ced3bc5893 <unknown>\n#12 0x55ced3b9430d <unknown>\n#13 0x55ced3b9532e <unknown>\n#14 0x55ced400e00b <unknown>\n#15 0x55ced4011f97 <unknown>\n#16 0x55ced3ffa71c <unknown>\n#17 0x55ced4012b17 <unknown>\n#18 0x55ced3fdf6cf <unknown>\n#19 0x55ced40306b8 <unknown>\n#20 0x55ced4030880 <unknown>\n#21 0x55ced4040776 <unknown>\n#22 0x7fa7b8a9ca94 <unknown>\n#23 0x7fa7b8b29c3c <unknown>","statusTrace":"self = <US_55_K_Alex_N_ReTestsManual_test.TestManualDetectedBugs object at 0x7fb9eaeeaab0>\nworker_id = 'master'\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"73fb94c6d28af4cb23ee397a0f853912\")>\ncur_language = '', cur_country = 'au', cur_role = 'NoReg'\ncur_login = 'test001.miketar+1@gmail.com', cur_password = 'Qwer1234-!@#$'\n\n    @pytest.mark.parametrize('cur_language', [''])\n    @pytest.mark.parametrize('cur_country', ['au'])\n    @pytest.mark.parametrize('cur_role', random.sample(['Auth', 'NoAuth', 'NoReg'], 1))\n    def test_513(self, worker_id, d, cur_language, cur_country, cur_role, cur_login, cur_password):\n    \n        \"\"\"\n         Check: Hover over to [Markets] menu section >\n                Click to [Market analysis] menu item>\n                Go through pages and find article \"Solana price prediction: Can SOL rebound?\" >\n                Click to [Solana to US Dollar] anchor link in \"Table of Contents\" block\n    \n         Language: EN\n         License: ASIC\n         Author: Aleksei Kurochkin\n         \"\"\"\n        test = self\n        self.cur_language = cur_language\n        self.cur_country = cur_country\n        self.driver = d\n    \n        self.bid = build_dynamic_arg_for_us_55(\n            d, worker_id, cur_language, cur_country, cur_role,\n            \"55\", \"ReTests of Manual Detected Bugs\",\n            \"513\",\n            'Hover over to [Markets] menu section > Click to [Market analysis] menu item > '\n            'Go through pages and find article \"Solana price prediction: Can SOL rebound?\" > '\n            'Click to [Solana to US Dollar] anchor link in \"Table of Contents\" block',\n            False,\n            False\n        )\n    \n        # Arrange\n        self.link = apply_preconditions_to_link(d, cur_language, cur_country, cur_role, cur_login, cur_password)\n        self.bug = Bug513(test)\n        self.bug.open_market_analysis_page(test)\n>       MyCommon.search_and_open_an_article_in_market_analysis_page(d, \"Solana price prediction\")\n\ntests/US_55_ReTestsManual/K_Alex_N/US_55_K_Alex_N_ReTestsManual_test.py:374: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/US_55_ReTestsManual/K_Alex_N/MyCommon.py:50: in search_and_open_an_article_in_market_analysis_page\n    open_the_article()\ntests/US_55_ReTestsManual/K_Alex_N/MyCommon.py:41: in open_the_article\n    driver.find_element(*ARTICLE_LOCATOR).click()\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:380: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fb9eaf20da0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#21 0x55ced4040776 \\\\u003Cunknown>\\\\n#22 0x7fa7b8a9ca94 \\\\u003Cunknown>\\\\n#23 0x7fa7b8b29c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <b class=\"\">...</b> is not clickable at point (713, 11). Other element would receive the click: <span class=\"text-accord\">...</span>\nE         (Session info: chrome=131.0.6778.139)\nE       Stacktrace:\nE       #0 0x55ced40418fa <unknown>\nE       #1 0x55ced3b52d20 <unknown>\nE       #2 0x55ced3ba8766 <unknown>\nE       #3 0x55ced3ba66cd <unknown>\nE       #4 0x55ced3ba3de5 <unknown>\nE       #5 0x55ced3ba2fa8 <unknown>\nE       #6 0x55ced3b96765 <unknown>\nE       #7 0x55ced3bc5af2 <unknown>\nE       #8 0x55ced3b960a8 <unknown>\nE       #9 0x55ced3bc5cbe <unknown>\nE       #10 0x55ced3be4560 <unknown>\nE       #11 0x55ced3bc5893 <unknown>\nE       #12 0x55ced3b9430d <unknown>\nE       #13 0x55ced3b9532e <unknown>\nE       #14 0x55ced400e00b <unknown>\nE       #15 0x55ced4011f97 <unknown>\nE       #16 0x55ced3ffa71c <unknown>\nE       #17 0x55ced4012b17 <unknown>\nE       #18 0x55ced3fdf6cf <unknown>\nE       #19 0x55ced40306b8 <unknown>\nE       #20 0x55ced4030880 <unknown>\nE       #21 0x55ced4040776 <unknown>\nE       #22 0x7fa7b8a9ca94 <unknown>\nE       #23 0x7fa7b8b29c3c <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"d","time":{"start":1735782991124,"stop":1735782991765,"duration":641},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"worker_id","time":{"start":1735782991765,"stop":1735782991765,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_login","time":{"start":1735783152183,"stop":1735783152183,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_password","time":{"start":1735783152183,"stop":1735783152183,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"\n         Check: Hover over to [Markets] menu section >\n                Click to [Market analysis] menu item>  \n                Go through pages and find article \"Solana price prediction: Can SOL rebound?\" >\n                Click to [Solana to US Dollar] anchor link in \"Table of Contents\" block\n\n         Language: EN\n         License: ASIC\n         Author: Aleksei Kurochkin\n         ","status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <b class=\"\">...</b> is not clickable at point (713, 11). Other element would receive the click: <span class=\"text-accord\">...</span>\n  (Session info: chrome=131.0.6778.139)\nStacktrace:\n#0 0x55ced40418fa <unknown>\n#1 0x55ced3b52d20 <unknown>\n#2 0x55ced3ba8766 <unknown>\n#3 0x55ced3ba66cd <unknown>\n#4 0x55ced3ba3de5 <unknown>\n#5 0x55ced3ba2fa8 <unknown>\n#6 0x55ced3b96765 <unknown>\n#7 0x55ced3bc5af2 <unknown>\n#8 0x55ced3b960a8 <unknown>\n#9 0x55ced3bc5cbe <unknown>\n#10 0x55ced3be4560 <unknown>\n#11 0x55ced3bc5893 <unknown>\n#12 0x55ced3b9430d <unknown>\n#13 0x55ced3b9532e <unknown>\n#14 0x55ced400e00b <unknown>\n#15 0x55ced4011f97 <unknown>\n#16 0x55ced3ffa71c <unknown>\n#17 0x55ced4012b17 <unknown>\n#18 0x55ced3fdf6cf <unknown>\n#19 0x55ced40306b8 <unknown>\n#20 0x55ced4030880 <unknown>\n#21 0x55ced4040776 <unknown>\n#22 0x7fa7b8a9ca94 <unknown>\n#23 0x7fa7b8b29c3c <unknown>","statusTrace":"self = <US_55_K_Alex_N_ReTestsManual_test.TestManualDetectedBugs object at 0x7fb9eaeeaab0>\nworker_id = 'master'\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"73fb94c6d28af4cb23ee397a0f853912\")>\ncur_language = '', cur_country = 'au', cur_role = 'NoReg'\ncur_login = 'test001.miketar+1@gmail.com', cur_password = 'Qwer1234-!@#$'\n\n    @pytest.mark.parametrize('cur_language', [''])\n    @pytest.mark.parametrize('cur_country', ['au'])\n    @pytest.mark.parametrize('cur_role', random.sample(['Auth', 'NoAuth', 'NoReg'], 1))\n    def test_513(self, worker_id, d, cur_language, cur_country, cur_role, cur_login, cur_password):\n    \n        \"\"\"\n         Check: Hover over to [Markets] menu section >\n                Click to [Market analysis] menu item>\n                Go through pages and find article \"Solana price prediction: Can SOL rebound?\" >\n                Click to [Solana to US Dollar] anchor link in \"Table of Contents\" block\n    \n         Language: EN\n         License: ASIC\n         Author: Aleksei Kurochkin\n         \"\"\"\n        test = self\n        self.cur_language = cur_language\n        self.cur_country = cur_country\n        self.driver = d\n    \n        self.bid = build_dynamic_arg_for_us_55(\n            d, worker_id, cur_language, cur_country, cur_role,\n            \"55\", \"ReTests of Manual Detected Bugs\",\n            \"513\",\n            'Hover over to [Markets] menu section > Click to [Market analysis] menu item > '\n            'Go through pages and find article \"Solana price prediction: Can SOL rebound?\" > '\n            'Click to [Solana to US Dollar] anchor link in \"Table of Contents\" block',\n            False,\n            False\n        )\n    \n        # Arrange\n        self.link = apply_preconditions_to_link(d, cur_language, cur_country, cur_role, cur_login, cur_password)\n        self.bug = Bug513(test)\n        self.bug.open_market_analysis_page(test)\n>       MyCommon.search_and_open_an_article_in_market_analysis_page(d, \"Solana price prediction\")\n\ntests/US_55_ReTestsManual/K_Alex_N/US_55_K_Alex_N_ReTestsManual_test.py:374: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/US_55_ReTestsManual/K_Alex_N/MyCommon.py:50: in search_and_open_an_article_in_market_analysis_page\n    open_the_article()\ntests/US_55_ReTestsManual/K_Alex_N/MyCommon.py:41: in open_the_article\n    driver.find_element(*ARTICLE_LOCATOR).click()\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:380: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fb9eaf20da0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#21 0x55ced4040776 \\\\u003Cunknown>\\\\n#22 0x7fa7b8a9ca94 \\\\u003Cunknown>\\\\n#23 0x7fa7b8b29c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <b class=\"\">...</b> is not clickable at point (713, 11). Other element would receive the click: <span class=\"text-accord\">...</span>\nE         (Session info: chrome=131.0.6778.139)\nE       Stacktrace:\nE       #0 0x55ced40418fa <unknown>\nE       #1 0x55ced3b52d20 <unknown>\nE       #2 0x55ced3ba8766 <unknown>\nE       #3 0x55ced3ba66cd <unknown>\nE       #4 0x55ced3ba3de5 <unknown>\nE       #5 0x55ced3ba2fa8 <unknown>\nE       #6 0x55ced3b96765 <unknown>\nE       #7 0x55ced3bc5af2 <unknown>\nE       #8 0x55ced3b960a8 <unknown>\nE       #9 0x55ced3bc5cbe <unknown>\nE       #10 0x55ced3be4560 <unknown>\nE       #11 0x55ced3bc5893 <unknown>\nE       #12 0x55ced3b9430d <unknown>\nE       #13 0x55ced3b9532e <unknown>\nE       #14 0x55ced400e00b <unknown>\nE       #15 0x55ced4011f97 <unknown>\nE       #16 0x55ced3ffa71c <unknown>\nE       #17 0x55ced4012b17 <unknown>\nE       #18 0x55ced3fdf6cf <unknown>\nE       #19 0x55ced40306b8 <unknown>\nE       #20 0x55ced4030880 <unknown>\nE       #21 0x55ced4040776 <unknown>\nE       #22 0x7fa7b8a9ca94 <unknown>\nE       #23 0x7fa7b8b29c3c <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","steps":[{"name":"Build dynamic argument for TCs of US_55","time":{"start":1735783381606,"stop":1735783381608,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"73fb94c6d28af4cb23ee397a0f853912\")>"},{"name":"worker_id","value":"'master'"},{"name":"cur_language","value":"''"},{"name":"cur_country","value":"'au'"},{"name":"cur_role","value":"'NoReg'"},{"name":"us","value":"'55'"},{"name":"desc_us","value":"'ReTests of Manual Detected Bugs'"},{"name":"num_tc","value":"'513'"},{"name":"desc_tc","value":"'Hover over to [Markets] menu section > Click to [Market analysis] menu item > Go through pages and find article \"Solana price prediction: Can SOL rebound?\" > Click to [Solana to US Dollar] anchor link in \"Table of Contents\" block'"},{"name":"manual","value":"False"},{"name":"new_layout","value":"False"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"   Set New preconditions","time":{"start":1735783381608,"stop":1735783391249,"duration":9641},"status":"passed","steps":[{"name":"2025-01-02 01:56:31.106748   Set language and country","time":{"start":1735783388885,"stop":1735783391240,"duration":2355},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"73fb94c6d28af4cb23ee397a0f853912\")>"},{"name":"cur_language","value":"'en'"},{"name":"cur_country","value":"'au'"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"73fb94c6d28af4cb23ee397a0f853912\")>"},{"name":"host","value":"'https://capital.com/en-gb'"},{"name":"end_point","value":"''"},{"name":"cur_language","value":"''"},{"name":"cur_country","value":"'au'"},{"name":"cur_role","value":"'NoReg'"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"}],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Select \"Markets\" menu, \"Market analysis\" submenu","time":{"start":1735783391250,"stop":1735783399432,"duration":8182},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"73fb94c6d28af4cb23ee397a0f853912\")>"},{"name":"cur_language","value":"''"},{"name":"cur_country","value":"'au'"},{"name":"link","value":"'https://capital.com/en-au'"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"100337f0f6ef06f0","name":"Screenshot","source":"100337f0f6ef06f0.png","type":"image/png","size":306376},{"uid":"46e4c97978e5c5c","name":"stdout","source":"46e4c97978e5c5c.txt","type":"text/plain","size":3945}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"d::0","time":{"start":1735783484693,"stop":1735783484869,"duration":176},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"epic","value":"TC_55!513 | Hover over to [Markets] menu section > Click to [Market analysis] menu item > Go through pages and find article \"Solana price prediction: Can SOL rebound?\" > Click to [Solana to US Dollar] anchor link in \"Table of Contents\" block"},{"name":"feature","value":"Role: NoReg"},{"name":"story","value":"Country: au"},{"name":"tag","value":"us_55"},{"name":"parentSuite","value":"tests.US_55_ReTestsManual.K_Alex_N"},{"name":"suite","value":"US_55_K_Alex_N_ReTestsManual_test"},{"name":"subSuite","value":"TestManualDetectedBugs"},{"name":"host","value":"fv-az1671-318"},{"name":"thread","value":"40440-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.US_55_ReTestsManual.K_Alex_N.US_55_K_Alex_N_ReTestsManual_test"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"cur_country","value":"'au'"},{"name":"cur_language","value":"''"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"},{"name":"cur_role","value":"'NoReg'"},{"name":"d","value":"'Chrome'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":3,"skipped":0,"passed":0,"unknown":0,"total":3},"items":[{"uid":"fb218db0036fec39","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/275//#testresult/fb218db0036fec39","status":"broken","statusDetails":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <b class=\"\">...</b> is not clickable at point (713, 11). Other element would receive the click: <span class=\"text-accord\">...</span>\n  (Session info: chrome=131.0.6778.139)\nStacktrace:\n#0 0x55d3a6d708fa <unknown>\n#1 0x55d3a6881d20 <unknown>\n#2 0x55d3a68d7766 <unknown>\n#3 0x55d3a68d56cd <unknown>\n#4 0x55d3a68d2de5 <unknown>\n#5 0x55d3a68d1fa8 <unknown>\n#6 0x55d3a68c5765 <unknown>\n#7 0x55d3a68f4af2 <unknown>\n#8 0x55d3a68c50a8 <unknown>\n#9 0x55d3a68f4cbe <unknown>\n#10 0x55d3a6913560 <unknown>\n#11 0x55d3a68f4893 <unknown>\n#12 0x55d3a68c330d <unknown>\n#13 0x55d3a68c432e <unknown>\n#14 0x55d3a6d3d00b <unknown>\n#15 0x55d3a6d40f97 <unknown>\n#16 0x55d3a6d2971c <unknown>\n#17 0x55d3a6d41b17 <unknown>\n#18 0x55d3a6d0e6cf <unknown>\n#19 0x55d3a6d5f6b8 <unknown>\n#20 0x55d3a6d5f880 <unknown>\n#21 0x55d3a6d6f776 <unknown>\n#22 0x7f1de509ca94 <unknown>\n#23 0x7f1de5129c3c <unknown>","time":{"start":1735697424380,"stop":1735697474220,"duration":49840}},{"uid":"6f0f81af58a46926","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/273//#testresult/6f0f81af58a46926","status":"broken","statusDetails":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <b class=\"\">...</b> is not clickable at point (713, 11). Other element would receive the click: <span class=\"text-accord\">...</span>\n  (Session info: chrome=131.0.6778.139)\nStacktrace:\n#0 0x5619739b58fa <unknown>\n#1 0x5619734c6d20 <unknown>\n#2 0x56197351c766 <unknown>\n#3 0x56197351a6cd <unknown>\n#4 0x561973517de5 <unknown>\n#5 0x561973516fa8 <unknown>\n#6 0x56197350a765 <unknown>\n#7 0x561973539af2 <unknown>\n#8 0x56197350a0a8 <unknown>\n#9 0x561973539cbe <unknown>\n#10 0x561973558560 <unknown>\n#11 0x561973539893 <unknown>\n#12 0x56197350830d <unknown>\n#13 0x56197350932e <unknown>\n#14 0x56197398200b <unknown>\n#15 0x561973985f97 <unknown>\n#16 0x56197396e71c <unknown>\n#17 0x561973986b17 <unknown>\n#18 0x5619739536cf <unknown>\n#19 0x5619739a46b8 <unknown>\n#20 0x5619739a4880 <unknown>\n#21 0x5619739b4776 <unknown>\n#22 0x7f8bdb29ca94 <unknown>\n#23 0x7f8bdb329c3c <unknown>","time":{"start":1735523188769,"stop":1735523238913,"duration":50144}}]},"tags":["us_55"]},"source":"3c7a4c6f4c04bb5c.json","parameterValues":["'au'","''","'test001.miketar+1@gmail.com'","'Qwer1234-!@#$'","'NoReg'","'Chrome'"]}