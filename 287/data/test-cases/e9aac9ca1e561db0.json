{"uid":"e9aac9ca1e561db0","name":"TC_55!634 (Lang: en) | Bid:55!634-en.ae.NoAuth","fullName":"tests.US_55_ReTestsManual.K_Alex_N.US_55_K_Alex_N_ReTestsManual_test.TestForFixedBugs#test_634","historyId":"94e48151c3353ef74c96558ec57f9f70","time":{"start":1736734383381,"stop":1736734405607,"duration":22226},"description":"\n         Check: Menu section [Markets] > \n                Menu item [Markets analysis] > \n                Article \"Gold price predictions for the next..\" > \n                Click on [Trade now] link > \n                Click on [Close] button\n         Language: EN\n         License: SCA, FCA, CYSEC or ASIC\n         Author: Aleksei Kurochkin\n         ","descriptionHtml":"<pre><code>     Check: Menu section [Markets] &gt; \n            Menu item [Markets analysis] &gt; \n            Article &quot;Gold price predictions for the next..&quot; &gt; \n            Click on [Trade now] link &gt; \n            Click on [Close] button\n     Language: EN\n     License: SCA, FCA, CYSEC or ASIC\n     Author: Aleksei Kurochkin\n</code></pre>\n","status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <b class=\"\">...</b> is not clickable at point (817, 92). Other element would receive the click: <span class=\"menuGroup_linkfirstLevel__d5JGC\">...</span>\n  (Session info: chrome=131.0.6778.204)\nStacktrace:\n#0 0x55d8b6eb41fa <unknown>\n#1 0x55d8b69c4810 <unknown>\n#2 0x55d8b6a1a206 <unknown>\n#3 0x55d8b6a1816d <unknown>\n#4 0x55d8b6a15885 <unknown>\n#5 0x55d8b6a14a48 <unknown>\n#6 0x55d8b6a081f5 <unknown>\n#7 0x55d8b6a37582 <unknown>\n#8 0x55d8b6a07b38 <unknown>\n#9 0x55d8b6a3774e <unknown>\n#10 0x55d8b6a56007 <unknown>\n#11 0x55d8b6a37323 <unknown>\n#12 0x55d8b6a05de0 <unknown>\n#13 0x55d8b6a06dbe <unknown>\n#14 0x55d8b6e8012b <unknown>\n#15 0x55d8b6e840c7 <unknown>\n#16 0x55d8b6e6d6cc <unknown>\n#17 0x55d8b6e84c47 <unknown>\n#18 0x55d8b6e5267f <unknown>\n#19 0x55d8b6ea3288 <unknown>\n#20 0x55d8b6ea3450 <unknown>\n#21 0x55d8b6eb3076 <unknown>\n#22 0x7fa2dc49ca94 <unknown>\n#23 0x7fa2dc529c3c <unknown>","statusTrace":"self = <US_55_K_Alex_N_ReTestsManual_test.TestForFixedBugs object at 0x7f04da0f0a40>\nworker_id = 'master'\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"2c6fbd9adf2855ff9e8c269967ff470a\")>\ncur_language = '', cur_country = 'ae', cur_role = 'NoAuth'\ncur_login = 'test001.miketar+1@gmail.com', cur_password = 'Qwer1234-!@#$'\n\n    @pytest.mark.parametrize('cur_language', [''])\n    @pytest.mark.parametrize('cur_country', ['gb', 'ae', 'au', 'de'])\n    @pytest.mark.parametrize('cur_role', random.sample(['NoAuth', 'NoReg'], 1))\n    def test_634(self, worker_id, d, cur_language, cur_country, cur_role, cur_login, cur_password):\n        \"\"\"\n         Check: Menu section [Markets] >\n                Menu item [Markets analysis] >\n                Article \"Gold price predictions for the next..\" >\n                Click on [Trade now] link >\n                Click on [Close] button\n         Language: EN\n         License: SCA, FCA, CYSEC or ASIC\n         Author: Aleksei Kurochkin\n         \"\"\"\n        test = self\n        self.cur_language = cur_language\n        self.cur_country = cur_country\n        self.driver = d\n    \n        self.bid = build_dynamic_arg_for_us_55(\n            d, worker_id, cur_language, cur_country, cur_role,\n            \"55\", \"ReTests of Manual Detected Bugs\",\n            \"634\",\n            'The loading spinner is displayed continuously on the page \"Gold price '\n            'predictions for the next...\" after click on [Trade now]',\n            False,\n            False\n        )\n    \n        # Arrange\n        self.link = apply_preconditions_to_link(d, cur_language, cur_country, cur_role, cur_login, cur_password)\n        self.bug = Bug634(test)\n        self.bug.open_market_analysis_page(test)\n>       MyCommon.search_and_open_an_article_in_market_analysis_page(d, \"Gold price predictions for the next\")\n\ntests/US_55_ReTestsManual/K_Alex_N/US_55_K_Alex_N_ReTestsManual_test.py:109: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/US_55_ReTestsManual/K_Alex_N/MyCommon.py:50: in search_and_open_an_article_in_market_analysis_page\n    open_the_article()\ntests/US_55_ReTestsManual/K_Alex_N/MyCommon.py:41: in open_the_article\n    driver.find_element(*ARTICLE_LOCATOR).click()\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:380: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f04d9f3cbc0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#21 0x55d8b6eb3076 \\\\u003Cunknown>\\\\n#22 0x7fa2dc49ca94 \\\\u003Cunknown>\\\\n#23 0x7fa2dc529c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <b class=\"\">...</b> is not clickable at point (817, 92). Other element would receive the click: <span class=\"menuGroup_linkfirstLevel__d5JGC\">...</span>\nE         (Session info: chrome=131.0.6778.204)\nE       Stacktrace:\nE       #0 0x55d8b6eb41fa <unknown>\nE       #1 0x55d8b69c4810 <unknown>\nE       #2 0x55d8b6a1a206 <unknown>\nE       #3 0x55d8b6a1816d <unknown>\nE       #4 0x55d8b6a15885 <unknown>\nE       #5 0x55d8b6a14a48 <unknown>\nE       #6 0x55d8b6a081f5 <unknown>\nE       #7 0x55d8b6a37582 <unknown>\nE       #8 0x55d8b6a07b38 <unknown>\nE       #9 0x55d8b6a3774e <unknown>\nE       #10 0x55d8b6a56007 <unknown>\nE       #11 0x55d8b6a37323 <unknown>\nE       #12 0x55d8b6a05de0 <unknown>\nE       #13 0x55d8b6a06dbe <unknown>\nE       #14 0x55d8b6e8012b <unknown>\nE       #15 0x55d8b6e840c7 <unknown>\nE       #16 0x55d8b6e6d6cc <unknown>\nE       #17 0x55d8b6e84c47 <unknown>\nE       #18 0x55d8b6e5267f <unknown>\nE       #19 0x55d8b6ea3288 <unknown>\nE       #20 0x55d8b6ea3450 <unknown>\nE       #21 0x55d8b6eb3076 <unknown>\nE       #22 0x7fa2dc49ca94 <unknown>\nE       #23 0x7fa2dc529c3c <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"d","time":{"start":1736734273584,"stop":1736734274237,"duration":653},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"worker_id","time":{"start":1736734274237,"stop":1736734274237,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_password","time":{"start":1736734274238,"stop":1736734274238,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_login","time":{"start":1736734274238,"stop":1736734274238,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"\n         Check: Menu section [Markets] > \n                Menu item [Markets analysis] > \n                Article \"Gold price predictions for the next..\" > \n                Click on [Trade now] link > \n                Click on [Close] button\n         Language: EN\n         License: SCA, FCA, CYSEC or ASIC\n         Author: Aleksei Kurochkin\n         ","status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <b class=\"\">...</b> is not clickable at point (817, 92). Other element would receive the click: <span class=\"menuGroup_linkfirstLevel__d5JGC\">...</span>\n  (Session info: chrome=131.0.6778.204)\nStacktrace:\n#0 0x55d8b6eb41fa <unknown>\n#1 0x55d8b69c4810 <unknown>\n#2 0x55d8b6a1a206 <unknown>\n#3 0x55d8b6a1816d <unknown>\n#4 0x55d8b6a15885 <unknown>\n#5 0x55d8b6a14a48 <unknown>\n#6 0x55d8b6a081f5 <unknown>\n#7 0x55d8b6a37582 <unknown>\n#8 0x55d8b6a07b38 <unknown>\n#9 0x55d8b6a3774e <unknown>\n#10 0x55d8b6a56007 <unknown>\n#11 0x55d8b6a37323 <unknown>\n#12 0x55d8b6a05de0 <unknown>\n#13 0x55d8b6a06dbe <unknown>\n#14 0x55d8b6e8012b <unknown>\n#15 0x55d8b6e840c7 <unknown>\n#16 0x55d8b6e6d6cc <unknown>\n#17 0x55d8b6e84c47 <unknown>\n#18 0x55d8b6e5267f <unknown>\n#19 0x55d8b6ea3288 <unknown>\n#20 0x55d8b6ea3450 <unknown>\n#21 0x55d8b6eb3076 <unknown>\n#22 0x7fa2dc49ca94 <unknown>\n#23 0x7fa2dc529c3c <unknown>","statusTrace":"self = <US_55_K_Alex_N_ReTestsManual_test.TestForFixedBugs object at 0x7f04da0f0a40>\nworker_id = 'master'\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"2c6fbd9adf2855ff9e8c269967ff470a\")>\ncur_language = '', cur_country = 'ae', cur_role = 'NoAuth'\ncur_login = 'test001.miketar+1@gmail.com', cur_password = 'Qwer1234-!@#$'\n\n    @pytest.mark.parametrize('cur_language', [''])\n    @pytest.mark.parametrize('cur_country', ['gb', 'ae', 'au', 'de'])\n    @pytest.mark.parametrize('cur_role', random.sample(['NoAuth', 'NoReg'], 1))\n    def test_634(self, worker_id, d, cur_language, cur_country, cur_role, cur_login, cur_password):\n        \"\"\"\n         Check: Menu section [Markets] >\n                Menu item [Markets analysis] >\n                Article \"Gold price predictions for the next..\" >\n                Click on [Trade now] link >\n                Click on [Close] button\n         Language: EN\n         License: SCA, FCA, CYSEC or ASIC\n         Author: Aleksei Kurochkin\n         \"\"\"\n        test = self\n        self.cur_language = cur_language\n        self.cur_country = cur_country\n        self.driver = d\n    \n        self.bid = build_dynamic_arg_for_us_55(\n            d, worker_id, cur_language, cur_country, cur_role,\n            \"55\", \"ReTests of Manual Detected Bugs\",\n            \"634\",\n            'The loading spinner is displayed continuously on the page \"Gold price '\n            'predictions for the next...\" after click on [Trade now]',\n            False,\n            False\n        )\n    \n        # Arrange\n        self.link = apply_preconditions_to_link(d, cur_language, cur_country, cur_role, cur_login, cur_password)\n        self.bug = Bug634(test)\n        self.bug.open_market_analysis_page(test)\n>       MyCommon.search_and_open_an_article_in_market_analysis_page(d, \"Gold price predictions for the next\")\n\ntests/US_55_ReTestsManual/K_Alex_N/US_55_K_Alex_N_ReTestsManual_test.py:109: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/US_55_ReTestsManual/K_Alex_N/MyCommon.py:50: in search_and_open_an_article_in_market_analysis_page\n    open_the_article()\ntests/US_55_ReTestsManual/K_Alex_N/MyCommon.py:41: in open_the_article\n    driver.find_element(*ARTICLE_LOCATOR).click()\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:380: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f04d9f3cbc0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#21 0x55d8b6eb3076 \\\\u003Cunknown>\\\\n#22 0x7fa2dc49ca94 \\\\u003Cunknown>\\\\n#23 0x7fa2dc529c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <b class=\"\">...</b> is not clickable at point (817, 92). Other element would receive the click: <span class=\"menuGroup_linkfirstLevel__d5JGC\">...</span>\nE         (Session info: chrome=131.0.6778.204)\nE       Stacktrace:\nE       #0 0x55d8b6eb41fa <unknown>\nE       #1 0x55d8b69c4810 <unknown>\nE       #2 0x55d8b6a1a206 <unknown>\nE       #3 0x55d8b6a1816d <unknown>\nE       #4 0x55d8b6a15885 <unknown>\nE       #5 0x55d8b6a14a48 <unknown>\nE       #6 0x55d8b6a081f5 <unknown>\nE       #7 0x55d8b6a37582 <unknown>\nE       #8 0x55d8b6a07b38 <unknown>\nE       #9 0x55d8b6a3774e <unknown>\nE       #10 0x55d8b6a56007 <unknown>\nE       #11 0x55d8b6a37323 <unknown>\nE       #12 0x55d8b6a05de0 <unknown>\nE       #13 0x55d8b6a06dbe <unknown>\nE       #14 0x55d8b6e8012b <unknown>\nE       #15 0x55d8b6e840c7 <unknown>\nE       #16 0x55d8b6e6d6cc <unknown>\nE       #17 0x55d8b6e84c47 <unknown>\nE       #18 0x55d8b6e5267f <unknown>\nE       #19 0x55d8b6ea3288 <unknown>\nE       #20 0x55d8b6ea3450 <unknown>\nE       #21 0x55d8b6eb3076 <unknown>\nE       #22 0x7fa2dc49ca94 <unknown>\nE       #23 0x7fa2dc529c3c <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","steps":[{"name":"Build dynamic argument for TCs of US_55","time":{"start":1736734383381,"stop":1736734383384,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"2c6fbd9adf2855ff9e8c269967ff470a\")>"},{"name":"worker_id","value":"'master'"},{"name":"cur_language","value":"''"},{"name":"cur_country","value":"'ae'"},{"name":"cur_role","value":"'NoAuth'"},{"name":"us","value":"'55'"},{"name":"desc_us","value":"'ReTests of Manual Detected Bugs'"},{"name":"num_tc","value":"'634'"},{"name":"desc_tc","value":"'The loading spinner is displayed continuously on the page \"Gold price predictions for the next...\" after click on [Trade now]'"},{"name":"manual","value":"False"},{"name":"new_layout","value":"False"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"   Set New preconditions","time":{"start":1736734383384,"stop":1736734385710,"duration":2326},"status":"passed","steps":[{"name":"2025-01-13 02:11:13.566411   Set language and country","time":{"start":1736734383414,"stop":1736734385705,"duration":2291},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"2c6fbd9adf2855ff9e8c269967ff470a\")>"},{"name":"cur_language","value":"'en'"},{"name":"cur_country","value":"'ae'"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"2c6fbd9adf2855ff9e8c269967ff470a\")>"},{"name":"host","value":"'https://capital.com/en-gb'"},{"name":"end_point","value":"''"},{"name":"cur_language","value":"''"},{"name":"cur_country","value":"'ae'"},{"name":"cur_role","value":"'NoAuth'"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"}],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Select \"Markets\" menu, \"Market analysis\" submenu","time":{"start":1736734385710,"stop":1736734394018,"duration":8308},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"2c6fbd9adf2855ff9e8c269967ff470a\")>"},{"name":"cur_language","value":"''"},{"name":"cur_country","value":"'ae'"},{"name":"link","value":"'https://capital.com/en-ae'"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"23e48722eb9d3f9c","name":"Screenshot","source":"23e48722eb9d3f9c.png","type":"image/png","size":341543},{"uid":"b47e2dc639fe4906","name":"stdout","source":"b47e2dc639fe4906.txt","type":"text/plain","size":2628}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"d::0","time":{"start":1736734788863,"stop":1736734789047,"duration":184},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"epic","value":"TC_55!634 | The loading spinner is displayed continuously on the page \"Gold price predictions for the next...\" after click on [Trade now]"},{"name":"feature","value":"Role: NoAuth"},{"name":"story","value":"Country: ae"},{"name":"tag","value":"us_55"},{"name":"parentSuite","value":"tests.US_55_ReTestsManual.K_Alex_N"},{"name":"suite","value":"US_55_K_Alex_N_ReTestsManual_test"},{"name":"subSuite","value":"TestForFixedBugs"},{"name":"host","value":"fv-az1440-974"},{"name":"thread","value":"46251-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.US_55_ReTestsManual.K_Alex_N.US_55_K_Alex_N_ReTestsManual_test"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"cur_country","value":"'ae'"},{"name":"cur_language","value":"''"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"},{"name":"cur_role","value":"'NoAuth'"},{"name":"d","value":"'Chrome'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":1,"skipped":0,"passed":8,"unknown":0,"total":12},"items":[{"uid":"48799dadd85a3827","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/284//#testresult/48799dadd85a3827","status":"failed","statusDetails":"Failed: Bug № ??? 'Markets' menu not present in DOM for 'ae' country '' language","time":{"start":1736474001119,"stop":1736474009027,"duration":7908}},{"uid":"6171a820c328b31a","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/281//#testresult/6171a820c328b31a","status":"failed","statusDetails":"Failed: Bug № ??? 'Markets' menu not present in DOM for 'ae' country '' language","time":{"start":1736214990261,"stop":1736214998150,"duration":7889}},{"uid":"d07b6e8a15ace213","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/280//#testresult/d07b6e8a15ace213","status":"passed","time":{"start":1736129074730,"stop":1736129100926,"duration":26196}},{"uid":"ffbab414b9ccd84c","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/277//#testresult/ffbab414b9ccd84c","status":"passed","time":{"start":1735870480062,"stop":1735870503610,"duration":23548}},{"uid":"594c2cdd8d9ec642","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/276//#testresult/594c2cdd8d9ec642","status":"passed","time":{"start":1735783097514,"stop":1735783120717,"duration":23203}},{"uid":"23732b03116fd22c","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/274//#testresult/23732b03116fd22c","status":"passed","time":{"start":1735610743816,"stop":1735610767460,"duration":23644}},{"uid":"e768f2b8c890010c","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/272//#testresult/e768f2b8c890010c","status":"passed","time":{"start":1735436964779,"stop":1735436988613,"duration":23834}},{"uid":"1df06025336c8e3f","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/270//#testresult/1df06025336c8e3f","status":"failed","statusDetails":"Failed: Bug № ??? 'Markets' menu not present in DOM for 'ae' country '' language","time":{"start":1735264979433,"stop":1735264987296,"duration":7863}},{"uid":"ca302972912751c","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/268//#testresult/ca302972912751c","status":"passed","time":{"start":1735091360599,"stop":1735091383971,"duration":23372}},{"uid":"368ae200c97b6f21","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/267//#testresult/368ae200c97b6f21","status":"passed","time":{"start":1735005701135,"stop":1735005727042,"duration":25907}},{"uid":"e7d805bc924f11c4","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/266//#testresult/e7d805bc924f11c4","status":"passed","time":{"start":1734918533185,"stop":1734918558869,"duration":25684}}]},"tags":["us_55"]},"source":"e9aac9ca1e561db0.json","parameterValues":["'ae'","''","'test001.miketar+1@gmail.com'","'Qwer1234-!@#$'","'NoAuth'","'Chrome'"]}