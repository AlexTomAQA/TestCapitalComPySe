{"uid":"f73492afccfdabdf","name":"TC_55!513 (Lang: en) | Bid:55!513-en.au.NoAuth","fullName":"tests.US_55_ReTestsManual.K_Alex_N.US_55_K_Alex_N_ReTestsManual_test.TestManualDetectedBugs#test_513","historyId":"283644d969d85c68df04f7d9cbc7e78b","time":{"start":1735091639927,"stop":1735091693573,"duration":53646},"description":"\n         Check: Hover over to [Markets] menu section >\n                Click to [Market analysis] menu item>  \n                Go through pages and find article \"Solana price prediction: Can SOL rebound?\" >\n                Click to [Solana to US Dollar] anchor link in \"Table of Contents\" block\n\n         Language: EN\n         License: ASIC\n         Author: Aleksei Kurochkin\n         ","descriptionHtml":"<pre><code>     Check: Hover over to [Markets] menu section &gt;\n            Click to [Market analysis] menu item&gt;  \n            Go through pages and find article &quot;Solana price prediction: Can SOL rebound?&quot; &gt;\n            Click to [Solana to US Dollar] anchor link in &quot;Table of Contents&quot; block\n\n     Language: EN\n     License: ASIC\n     Author: Aleksei Kurochkin\n</code></pre>\n","status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <b class=\"\">...</b> is not clickable at point (713, 11). Other element would receive the click: <span class=\"text-accord\">...</span>\n  (Session info: chrome=131.0.6778.139)\nStacktrace:\n#0 0x5632497f68fa <unknown>\n#1 0x563249307d20 <unknown>\n#2 0x56324935d766 <unknown>\n#3 0x56324935b6cd <unknown>\n#4 0x563249358de5 <unknown>\n#5 0x563249357fa8 <unknown>\n#6 0x56324934b765 <unknown>\n#7 0x56324937aaf2 <unknown>\n#8 0x56324934b0a8 <unknown>\n#9 0x56324937acbe <unknown>\n#10 0x563249399560 <unknown>\n#11 0x56324937a893 <unknown>\n#12 0x56324934930d <unknown>\n#13 0x56324934a32e <unknown>\n#14 0x5632497c300b <unknown>\n#15 0x5632497c6f97 <unknown>\n#16 0x5632497af71c <unknown>\n#17 0x5632497c7b17 <unknown>\n#18 0x5632497946cf <unknown>\n#19 0x5632497e56b8 <unknown>\n#20 0x5632497e5880 <unknown>\n#21 0x5632497f5776 <unknown>\n#22 0x7f632549ca94 <unknown>\n#23 0x7f6325529c3c <unknown>","statusTrace":"self = <US_55_K_Alex_N_ReTestsManual_test.TestManualDetectedBugs object at 0x7f6dd662e900>\nworker_id = 'master'\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"9a14a57a166dbbd206f26a7a642b5e0c\")>\ncur_language = '', cur_country = 'au', cur_role = 'NoAuth'\ncur_login = 'test001.miketar+1@gmail.com', cur_password = 'Qwer1234-!@#$'\n\n    @pytest.mark.parametrize('cur_language', [''])\n    @pytest.mark.parametrize('cur_country', ['au'])\n    @pytest.mark.parametrize('cur_role', random.sample(['Auth', 'NoAuth', 'NoReg'], 1))\n    def test_513(self, worker_id, d, cur_language, cur_country, cur_role, cur_login, cur_password):\n    \n        \"\"\"\n         Check: Hover over to [Markets] menu section >\n                Click to [Market analysis] menu item>\n                Go through pages and find article \"Solana price prediction: Can SOL rebound?\" >\n                Click to [Solana to US Dollar] anchor link in \"Table of Contents\" block\n    \n         Language: EN\n         License: ASIC\n         Author: Aleksei Kurochkin\n         \"\"\"\n        test = self\n        self.cur_language = cur_language\n        self.cur_country = cur_country\n        self.driver = d\n    \n        self.bid = build_dynamic_arg_for_us_55(\n            d, worker_id, cur_language, cur_country, cur_role,\n            \"55\", \"ReTests of Manual Detected Bugs\",\n            \"513\",\n            'Hover over to [Markets] menu section > Click to [Market analysis] menu item > '\n            'Go through pages and find article \"Solana price prediction: Can SOL rebound?\" > '\n            'Click to [Solana to US Dollar] anchor link in \"Table of Contents\" block',\n            False,\n            False\n        )\n    \n        # Arrange\n        self.link = apply_preconditions_to_link(d, cur_language, cur_country, cur_role, cur_login, cur_password)\n        self.bug = Bug513(test)\n        self.bug.open_market_analysis_page(test)\n>       MyCommon.search_and_open_an_article_in_market_analysis_page(d, \"Solana price prediction\")\n\ntests/US_55_ReTestsManual/K_Alex_N/US_55_K_Alex_N_ReTestsManual_test.py:374: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/US_55_ReTestsManual/K_Alex_N/MyCommon.py:50: in search_and_open_an_article_in_market_analysis_page\n    open_the_article()\ntests/US_55_ReTestsManual/K_Alex_N/MyCommon.py:41: in open_the_article\n    driver.find_element(*ARTICLE_LOCATOR).click()\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:380: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f6dd6664ad0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#21 0x5632497f5776 \\\\u003Cunknown>\\\\n#22 0x7f632549ca94 \\\\u003Cunknown>\\\\n#23 0x7f6325529c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <b class=\"\">...</b> is not clickable at point (713, 11). Other element would receive the click: <span class=\"text-accord\">...</span>\nE         (Session info: chrome=131.0.6778.139)\nE       Stacktrace:\nE       #0 0x5632497f68fa <unknown>\nE       #1 0x563249307d20 <unknown>\nE       #2 0x56324935d766 <unknown>\nE       #3 0x56324935b6cd <unknown>\nE       #4 0x563249358de5 <unknown>\nE       #5 0x563249357fa8 <unknown>\nE       #6 0x56324934b765 <unknown>\nE       #7 0x56324937aaf2 <unknown>\nE       #8 0x56324934b0a8 <unknown>\nE       #9 0x56324937acbe <unknown>\nE       #10 0x563249399560 <unknown>\nE       #11 0x56324937a893 <unknown>\nE       #12 0x56324934930d <unknown>\nE       #13 0x56324934a32e <unknown>\nE       #14 0x5632497c300b <unknown>\nE       #15 0x5632497c6f97 <unknown>\nE       #16 0x5632497af71c <unknown>\nE       #17 0x5632497c7b17 <unknown>\nE       #18 0x5632497946cf <unknown>\nE       #19 0x5632497e56b8 <unknown>\nE       #20 0x5632497e5880 <unknown>\nE       #21 0x5632497f5776 <unknown>\nE       #22 0x7f632549ca94 <unknown>\nE       #23 0x7f6325529c3c <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"d","time":{"start":1735091254000,"stop":1735091254644,"duration":644},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"worker_id","time":{"start":1735091254644,"stop":1735091254644,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_login","time":{"start":1735091415640,"stop":1735091415640,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cur_password","time":{"start":1735091415640,"stop":1735091415640,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"\n         Check: Hover over to [Markets] menu section >\n                Click to [Market analysis] menu item>  \n                Go through pages and find article \"Solana price prediction: Can SOL rebound?\" >\n                Click to [Solana to US Dollar] anchor link in \"Table of Contents\" block\n\n         Language: EN\n         License: ASIC\n         Author: Aleksei Kurochkin\n         ","status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <b class=\"\">...</b> is not clickable at point (713, 11). Other element would receive the click: <span class=\"text-accord\">...</span>\n  (Session info: chrome=131.0.6778.139)\nStacktrace:\n#0 0x5632497f68fa <unknown>\n#1 0x563249307d20 <unknown>\n#2 0x56324935d766 <unknown>\n#3 0x56324935b6cd <unknown>\n#4 0x563249358de5 <unknown>\n#5 0x563249357fa8 <unknown>\n#6 0x56324934b765 <unknown>\n#7 0x56324937aaf2 <unknown>\n#8 0x56324934b0a8 <unknown>\n#9 0x56324937acbe <unknown>\n#10 0x563249399560 <unknown>\n#11 0x56324937a893 <unknown>\n#12 0x56324934930d <unknown>\n#13 0x56324934a32e <unknown>\n#14 0x5632497c300b <unknown>\n#15 0x5632497c6f97 <unknown>\n#16 0x5632497af71c <unknown>\n#17 0x5632497c7b17 <unknown>\n#18 0x5632497946cf <unknown>\n#19 0x5632497e56b8 <unknown>\n#20 0x5632497e5880 <unknown>\n#21 0x5632497f5776 <unknown>\n#22 0x7f632549ca94 <unknown>\n#23 0x7f6325529c3c <unknown>","statusTrace":"self = <US_55_K_Alex_N_ReTestsManual_test.TestManualDetectedBugs object at 0x7f6dd662e900>\nworker_id = 'master'\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"9a14a57a166dbbd206f26a7a642b5e0c\")>\ncur_language = '', cur_country = 'au', cur_role = 'NoAuth'\ncur_login = 'test001.miketar+1@gmail.com', cur_password = 'Qwer1234-!@#$'\n\n    @pytest.mark.parametrize('cur_language', [''])\n    @pytest.mark.parametrize('cur_country', ['au'])\n    @pytest.mark.parametrize('cur_role', random.sample(['Auth', 'NoAuth', 'NoReg'], 1))\n    def test_513(self, worker_id, d, cur_language, cur_country, cur_role, cur_login, cur_password):\n    \n        \"\"\"\n         Check: Hover over to [Markets] menu section >\n                Click to [Market analysis] menu item>\n                Go through pages and find article \"Solana price prediction: Can SOL rebound?\" >\n                Click to [Solana to US Dollar] anchor link in \"Table of Contents\" block\n    \n         Language: EN\n         License: ASIC\n         Author: Aleksei Kurochkin\n         \"\"\"\n        test = self\n        self.cur_language = cur_language\n        self.cur_country = cur_country\n        self.driver = d\n    \n        self.bid = build_dynamic_arg_for_us_55(\n            d, worker_id, cur_language, cur_country, cur_role,\n            \"55\", \"ReTests of Manual Detected Bugs\",\n            \"513\",\n            'Hover over to [Markets] menu section > Click to [Market analysis] menu item > '\n            'Go through pages and find article \"Solana price prediction: Can SOL rebound?\" > '\n            'Click to [Solana to US Dollar] anchor link in \"Table of Contents\" block',\n            False,\n            False\n        )\n    \n        # Arrange\n        self.link = apply_preconditions_to_link(d, cur_language, cur_country, cur_role, cur_login, cur_password)\n        self.bug = Bug513(test)\n        self.bug.open_market_analysis_page(test)\n>       MyCommon.search_and_open_an_article_in_market_analysis_page(d, \"Solana price prediction\")\n\ntests/US_55_ReTestsManual/K_Alex_N/US_55_K_Alex_N_ReTestsManual_test.py:374: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/US_55_ReTestsManual/K_Alex_N/MyCommon.py:50: in search_and_open_an_article_in_market_analysis_page\n    open_the_article()\ntests/US_55_ReTestsManual/K_Alex_N/MyCommon.py:41: in open_the_article\n    driver.find_element(*ARTICLE_LOCATOR).click()\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:380: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f6dd6664ad0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#21 0x5632497f5776 \\\\u003Cunknown>\\\\n#22 0x7f632549ca94 \\\\u003Cunknown>\\\\n#23 0x7f6325529c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <b class=\"\">...</b> is not clickable at point (713, 11). Other element would receive the click: <span class=\"text-accord\">...</span>\nE         (Session info: chrome=131.0.6778.139)\nE       Stacktrace:\nE       #0 0x5632497f68fa <unknown>\nE       #1 0x563249307d20 <unknown>\nE       #2 0x56324935d766 <unknown>\nE       #3 0x56324935b6cd <unknown>\nE       #4 0x563249358de5 <unknown>\nE       #5 0x563249357fa8 <unknown>\nE       #6 0x56324934b765 <unknown>\nE       #7 0x56324937aaf2 <unknown>\nE       #8 0x56324934b0a8 <unknown>\nE       #9 0x56324937acbe <unknown>\nE       #10 0x563249399560 <unknown>\nE       #11 0x56324937a893 <unknown>\nE       #12 0x56324934930d <unknown>\nE       #13 0x56324934a32e <unknown>\nE       #14 0x5632497c300b <unknown>\nE       #15 0x5632497c6f97 <unknown>\nE       #16 0x5632497af71c <unknown>\nE       #17 0x5632497c7b17 <unknown>\nE       #18 0x5632497946cf <unknown>\nE       #19 0x5632497e56b8 <unknown>\nE       #20 0x5632497e5880 <unknown>\nE       #21 0x5632497f5776 <unknown>\nE       #22 0x7f632549ca94 <unknown>\nE       #23 0x7f6325529c3c <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcompyse-CcJ6hTD8-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","steps":[{"name":"Build dynamic argument for TCs of US_55","time":{"start":1735091639927,"stop":1735091639931,"duration":4},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"9a14a57a166dbbd206f26a7a642b5e0c\")>"},{"name":"worker_id","value":"'master'"},{"name":"cur_language","value":"''"},{"name":"cur_country","value":"'au'"},{"name":"cur_role","value":"'NoAuth'"},{"name":"us","value":"'55'"},{"name":"desc_us","value":"'ReTests of Manual Detected Bugs'"},{"name":"num_tc","value":"'513'"},{"name":"desc_tc","value":"'Hover over to [Markets] menu section > Click to [Market analysis] menu item > Go through pages and find article \"Solana price prediction: Can SOL rebound?\" > Click to [Solana to US Dollar] anchor link in \"Table of Contents\" block'"},{"name":"manual","value":"False"},{"name":"new_layout","value":"False"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"   Set New preconditions","time":{"start":1735091639932,"stop":1735091653457,"duration":13525},"status":"passed","steps":[{"name":"2024-12-25 01:47:33.981949   Start Authorization","time":{"start":1735091647166,"stop":1735091649870,"duration":2704},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"9a14a57a166dbbd206f26a7a642b5e0c\")>"},{"name":"link","value":"'https://capital.com/en-gb'"},{"name":"login","value":"'test001.miketar+1@gmail.com'"},{"name":"password","value":"'Qwer1234-!@#$'"},{"name":"cur_role","value":"'NoAuth'"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"2024-12-25 01:47:33.981961   Start Deauthorization","time":{"start":1735091649870,"stop":1735091650642,"duration":772},"status":"passed","steps":[{"name":"Start Logout from account info menu in top bar","time":{"start":1735091649870,"stop":1735091650642,"duration":772},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"9a14a57a166dbbd206f26a7a642b5e0c\")>"},{"name":"link","value":"'https://capital.com/en-gb'"}],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"2024-12-25 01:47:33.981970   Set language and country","time":{"start":1735091650642,"stop":1735091653451,"duration":2809},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"9a14a57a166dbbd206f26a7a642b5e0c\")>"},{"name":"cur_language","value":"'en'"},{"name":"cur_country","value":"'au'"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"9a14a57a166dbbd206f26a7a642b5e0c\")>"},{"name":"host","value":"'https://capital.com/en-gb'"},{"name":"end_point","value":"''"},{"name":"cur_language","value":"''"},{"name":"cur_country","value":"'au'"},{"name":"cur_role","value":"'NoAuth'"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"}],"shouldDisplayMessage":false,"stepsCount":4,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Select \"Markets\" menu, \"Market analysis\" submenu","time":{"start":1735091653457,"stop":1735091661755,"duration":8298},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"9a14a57a166dbbd206f26a7a642b5e0c\")>"},{"name":"cur_language","value":"''"},{"name":"cur_country","value":"'au'"},{"name":"link","value":"'https://capital.com/en-au'"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"9320023c263d0cb0","name":"Screenshot","source":"9320023c263d0cb0.png","type":"image/png","size":306363},{"uid":"e3ef4cf746f67a0b","name":"stdout","source":"e3ef4cf746f67a0b.txt","type":"text/plain","size":5352}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":7,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"d::0","time":{"start":1735091747295,"stop":1735091747473,"duration":178},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"epic","value":"TC_55!513 | Hover over to [Markets] menu section > Click to [Market analysis] menu item > Go through pages and find article \"Solana price prediction: Can SOL rebound?\" > Click to [Solana to US Dollar] anchor link in \"Table of Contents\" block"},{"name":"feature","value":"Role: NoAuth"},{"name":"story","value":"Country: au"},{"name":"tag","value":"us_55"},{"name":"parentSuite","value":"tests.US_55_ReTestsManual.K_Alex_N"},{"name":"suite","value":"US_55_K_Alex_N_ReTestsManual_test"},{"name":"subSuite","value":"TestManualDetectedBugs"},{"name":"host","value":"fv-az1959-573"},{"name":"thread","value":"40619-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.US_55_ReTestsManual.K_Alex_N.US_55_K_Alex_N_ReTestsManual_test"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"cur_country","value":"'au'"},{"name":"cur_language","value":"''"},{"name":"cur_login","value":"'test001.miketar+1@gmail.com'"},{"name":"cur_password","value":"'Qwer1234-!@#$'"},{"name":"cur_role","value":"'NoAuth'"},{"name":"d","value":"'Chrome'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":3,"skipped":0,"passed":0,"unknown":0,"total":6},"items":[{"uid":"36df81d0b6da45ad","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/266//#testresult/36df81d0b6da45ad","status":"broken","statusDetails":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <b class=\"\">...</b> is not clickable at point (713, 11). Other element would receive the click: <span class=\"text-accord\">...</span>\n  (Session info: chrome=131.0.6778.139)\nStacktrace:\n#0 0x558d859098fa <unknown>\n#1 0x558d8541ad20 <unknown>\n#2 0x558d85470766 <unknown>\n#3 0x558d8546e6cd <unknown>\n#4 0x558d8546bde5 <unknown>\n#5 0x558d8546afa8 <unknown>\n#6 0x558d8545e765 <unknown>\n#7 0x558d8548daf2 <unknown>\n#8 0x558d8545e0a8 <unknown>\n#9 0x558d8548dcbe <unknown>\n#10 0x558d854ac560 <unknown>\n#11 0x558d8548d893 <unknown>\n#12 0x558d8545c30d <unknown>\n#13 0x558d8545d32e <unknown>\n#14 0x558d858d600b <unknown>\n#15 0x558d858d9f97 <unknown>\n#16 0x558d858c271c <unknown>\n#17 0x558d858dab17 <unknown>\n#18 0x558d858a76cf <unknown>\n#19 0x558d858f86b8 <unknown>\n#20 0x558d858f8880 <unknown>\n#21 0x558d85908776 <unknown>\n#22 0x7f369e89ca94 <unknown>\n#23 0x7f369e929c3c <unknown>","time":{"start":1734918835141,"stop":1734918889093,"duration":53952}},{"uid":"abb6a0051bb33f06","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/264//#testresult/abb6a0051bb33f06","status":"broken","statusDetails":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <b class=\"\">...</b> is not clickable at point (713, 34). Other element would receive the click: <div class=\"grid_grid__2D3md topPanel_directions__2gpsL grid_gMdLg__9Xp_H grid_startToCenter__rpi6Z grid_flex__Nv3nG\">...</div>\n  (Session info: chrome=131.0.6778.139)\nStacktrace:\n#0 0x55e2bdd8c8fa <unknown>\n#1 0x55e2bd89dd20 <unknown>\n#2 0x55e2bd8f3766 <unknown>\n#3 0x55e2bd8f16cd <unknown>\n#4 0x55e2bd8eede5 <unknown>\n#5 0x55e2bd8edfa8 <unknown>\n#6 0x55e2bd8e1765 <unknown>\n#7 0x55e2bd910af2 <unknown>\n#8 0x55e2bd8e10a8 <unknown>\n#9 0x55e2bd910cbe <unknown>\n#10 0x55e2bd92f560 <unknown>\n#11 0x55e2bd910893 <unknown>\n#12 0x55e2bd8df30d <unknown>\n#13 0x55e2bd8e032e <unknown>\n#14 0x55e2bdd5900b <unknown>\n#15 0x55e2bdd5cf97 <unknown>\n#16 0x55e2bdd4571c <unknown>\n#17 0x55e2bdd5db17 <unknown>\n#18 0x55e2bdd2a6cf <unknown>\n#19 0x55e2bdd7b6b8 <unknown>\n#20 0x55e2bdd7b880 <unknown>\n#21 0x55e2bdd8b776 <unknown>\n#22 0x7fb45869ca94 <unknown>\n#23 0x7fb458729c3c <unknown>","time":{"start":1734747676535,"stop":1734747731836,"duration":55301}},{"uid":"2394fb44053687d0","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/259//#testresult/2394fb44053687d0","status":"failed","statusDetails":"Failed: Bug # 55!513 link to part2 in table of content do not work","time":{"start":1734314374354,"stop":1734314428455,"duration":54101}},{"uid":"d3be4bec86412d47","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/258//#testresult/d3be4bec86412d47","status":"failed","statusDetails":"Failed: Bug # 55!513 link to part2 in table of content do not work","time":{"start":1734227775332,"stop":1734227829523,"duration":54191}},{"uid":"891efb47c8a041c3","reportUrl":"https://AlexTomAQA.github.io/TestCapitalComPySe/257//#testresult/891efb47c8a041c3","status":"failed","statusDetails":"Failed: Bug # 55!513 link to part2 in table of content do not work","time":{"start":1734165449221,"stop":1734165493655,"duration":44434}}]},"tags":["us_55"]},"source":"f73492afccfdabdf.json","parameterValues":["'au'","''","'test001.miketar+1@gmail.com'","'Qwer1234-!@#$'","'NoAuth'","'Chrome'"]}